<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
  <link rel="dns-prefetch" href="https://github.githubassets.com">
  <link rel="dns-prefetch" href="https://avatars0.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars1.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars2.githubusercontent.com">
  <link rel="dns-prefetch" href="https://avatars3.githubusercontent.com">
  <link rel="dns-prefetch" href="https://github-cloud.s3.amazonaws.com">
  <link rel="dns-prefetch" href="https://user-images.githubusercontent.com/">



  <link crossorigin="anonymous" media="all" integrity="sha512-3+HOqCwtQal5hOJQ+mdxiq5zmGOTjF6RhjDsPLxbKDYgGlLFeCwzoIanb7j5IiCuXKUqyC2q8FdkC4nmx2P2rA==" rel="stylesheet" href="https://github.githubassets.com/assets/frameworks-a2fba223d5af91496cac70d4ec3624df.css" />
  <link crossorigin="anonymous" media="all" integrity="sha512-MRlTIqIyb8caK5+o8llXVntXovciHyAM4qE3kWU2S7SIjAPDxYp4mE0jQp4kP5UYegy+lG9y1I6VlsdzEjb5Qw==" rel="stylesheet" href="https://github.githubassets.com/assets/site-294181adec18ed639e160b96b45d17ac.css" />
    <link crossorigin="anonymous" media="all" integrity="sha512-rsD81z23enDfs9K8QwuOdeneWb2QHFNY9t5B56bADHpt6HdhHGuAg2uTvL4Ct95hfkjZyKIQH6S2ETUBSR3VIA==" rel="stylesheet" href="https://github.githubassets.com/assets/github-6556dfa9be535e551ffffaadfecdad99.css" />
    
    
    
    

  <meta name="viewport" content="width=device-width">
  
  <title>너무나 중요한 알고리즘 · GitHub</title>
    <meta name="description" content="너무나 중요한 알고리즘. GitHub Gist: instantly share code, notes, and snippets.">
    <link rel="search" type="application/opensearchdescription+xml" href="/opensearch-gist.xml" title="Gist">
  <link rel="fluid-icon" href="https://gist.github.com/fluidicon.png" title="GitHub">
  <meta property="fb:app_id" content="1401488693436528">

    <meta name="twitter:image:src" content="https://avatars0.githubusercontent.com/u/20276670?s=400&amp;v=4" /><meta name="twitter:site" content="@github" /><meta name="twitter:card" content="summary_large_image" /><meta name="twitter:title" content="너무나 중요한 알고리즘" /><meta name="twitter:description" content="너무나 중요한 알고리즘. GitHub Gist: instantly share code, notes, and snippets." />
    <meta property="og:image" content="https://avatars0.githubusercontent.com/u/20276670?s=400&amp;v=4" /><meta property="og:site_name" content="Gist" /><meta property="og:type" content="article" /><meta property="og:title" content="너무나 중요한 알고리즘" /><meta property="og:url" content="https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e" /><meta property="og:description" content="너무나 중요한 알고리즘. GitHub Gist: instantly share code, notes, and snippets." /><meta property="article:author" content="262588213843476" /><meta property="article:publisher" content="262588213843476" />

  <link rel="assets" href="https://github.githubassets.com/">
  
  <meta name="pjax-timeout" content="1000">
  
  <meta name="request-id" content="0F62:883A:F5D3D7:166A8B6:5CE940C1" data-pjax-transient>


  

  <meta name="selected-link" value="gist_code" data-pjax-transient>

      <meta name="google-site-verification" content="KT5gs8h0wvaagLKAVWq8bbeNwnZZK1r1XQysX3xurLU">
    <meta name="google-site-verification" content="ZzhVyEFwb7w3e0-uOTltm8Jsck2F5StVihD0exw2fsA">
    <meta name="google-site-verification" content="GXs5KoUUkNCoaAZn7wPN-t01Pywp9M3sEjnt_3_ZWPc">

  <meta name="octolytics-host" content="collector.githubapp.com" /><meta name="octolytics-app-id" content="gist" /><meta name="octolytics-event-url" content="https://collector.githubapp.com/github-external/browser_event" /><meta name="octolytics-dimension-request_id" content="0F62:883A:F5D3D7:166A8B6:5CE940C1" /><meta name="octolytics-dimension-region_edge" content="sea" /><meta name="octolytics-dimension-region_render" content="iad" />
<meta name="analytics-location" content="/&lt;user-name&gt;/&lt;gist-id&gt;" data-pjax-transient="true" />



    <meta name="google-analytics" content="UA-3769691-4">


<meta class="js-ga-set" name="dimension1" content="Logged Out">



    <meta name="octolytics-dimension-public" content="true" /><meta name="octolytics-dimension-gist_id" content="87792707" /><meta name="octolytics-dimension-gist_name" content="5408324d876a51384564fac1f186938e" /><meta name="octolytics-dimension-anonymous" content="false" /><meta name="octolytics-dimension-owner_id" content="20276670" /><meta name="octolytics-dimension-owner_login" content="Curookie" /><meta name="octolytics-dimension-forked" content="false" />

  <meta class="js-ga-set" name="dimension5" content="public">
  <meta class="js-ga-set" name="dimension6" content="owned">
  <meta class="js-ga-set" name="dimension7" content="unknown">


      <meta name="hostname" content="gist.github.com">
    <meta name="user-login" content="">

      <meta name="expected-hostname" content="gist.github.com">
    <meta name="js-proxy-site-detection-payload" content="NGE5NDlkYTVhN2QyZWE5ZGI0MzRkZDliMTU5ZjQ3MzlhMWE4ODVlZmZlMTRjODIxMTY2MThlMTM3MTcwOWNlNnx7InJlbW90ZV9hZGRyZXNzIjoiMS4yMzIuOTQuMTMyIiwicmVxdWVzdF9pZCI6IjBGNjI6ODgzQTpGNUQzRDc6MTY2QThCNjo1Q0U5NDBDMSIsInRpbWVzdGFtcCI6MTU1ODc5MDM0NSwiaG9zdCI6ImdpdGh1Yi5jb20ifQ==">

    <meta name="enabled-features" content="SPONSORS,UNIVERSE_BANNER,MARKETPLACE_INVOICED_BILLING,MARKETPLACE_SOCIAL_PROOF_CUSTOMERS,MARKETPLACE_TRENDING_SOCIAL_PROOF,MARKETPLACE_RECOMMENDATIONS">

  <meta name="html-safe-nonce" content="83896427945dfd6915876af212652783bf3d479f">

  <meta http-equiv="x-pjax-version" content="64395112d6a30f49197bac7217175fdd">
  

      <link href="/Curookie.atom" rel="alternate" title="atom" type="application/atom+xml">

  <link crossorigin="anonymous" media="all" integrity="sha512-wx/pel4W5UaeP3bMsNTBXC+VO0PCxJthIGK0+wxdgcJm12Zy2fEs8iemaXo4QxllBE76meoHujyQyeM8gG/d+w==" rel="stylesheet" href="https://github.githubassets.com/assets/gist-ce018e566da363f8262d7af4f6e8b7f3.css" />




  <meta name="browser-stats-url" content="https://api.github.com/_private/browser/stats">

  <meta name="browser-errors-url" content="https://api.github.com/_private/browser/errors">

  <link rel="mask-icon" href="https://github.githubassets.com/pinned-octocat.svg" color="#000000">
  <link rel="icon" type="image/x-icon" class="js-site-favicon" href="https://github.githubassets.com/favicon.ico">

<meta name="theme-color" content="#1e2327">

  <meta name="msapplication-TileImage" content="/windows-tile.png">
  <meta name="msapplication-TileColor" content="#ffffff">





  </head>

  <body class="logged-out env-production min-width-lg">
    

  <div class="position-relative js-header-wrapper ">
    <a href="#start-of-content" tabindex="1" class="px-2 py-4 bg-blue text-white show-on-focus js-skip-to-content">Skip to content</a>
    <div id="js-pjax-loader-bar" class="pjax-loader-bar"><div class="progress"></div></div>

    
    
    


        <div class="Header" role="banner" >
  <div class="Header-item">
    <a class="Header-link" data-hotkey="g d" aria-label="Gist Homepage" href="/">
  <svg class="octicon octicon-mark-github v-align-middle d-none" height="24" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
  <svg height="24" class="octicon octicon-logo-github v-align-middle" viewBox="0 0 45 16" version="1.1" width="67" aria-hidden="true"><path fill-rule="evenodd" d="M18.53 12.03h-.02c.009 0 .015.01.024.011h.006l-.01-.01zm.004.011c-.093.001-.327.05-.574.05-.78 0-1.05-.36-1.05-.83V8.13h1.59c.09 0 .16-.08.16-.19v-1.7c0-.09-.08-.17-.16-.17h-1.59V3.96c0-.08-.05-.13-.14-.13h-2.16c-.09 0-.14.05-.14.13v2.17s-1.09.27-1.16.28c-.08.02-.13.09-.13.17v1.36c0 .11.08.19.17.19h1.11v3.28c0 2.44 1.7 2.69 2.86 2.69.53 0 1.17-.17 1.27-.22.06-.02.09-.09.09-.16v-1.5a.177.177 0 0 0-.146-.18zM42.23 9.84c0-1.81-.73-2.05-1.5-1.97-.6.04-1.08.34-1.08.34v3.52s.49.34 1.22.36c1.03.03 1.36-.34 1.36-2.25zm2.43-.16c0 3.43-1.11 4.41-3.05 4.41-1.64 0-2.52-.83-2.52-.83s-.04.46-.09.52c-.03.06-.08.08-.14.08h-1.48c-.1 0-.19-.08-.19-.17l.02-11.11c0-.09.08-.17.17-.17h2.13c.09 0 .17.08.17.17v3.77s.82-.53 2.02-.53l-.01-.02c1.2 0 2.97.45 2.97 3.88zm-8.72-3.61h-2.1c-.11 0-.17.08-.17.19v5.44s-.55.39-1.3.39-.97-.34-.97-1.09V6.25c0-.09-.08-.17-.17-.17h-2.14c-.09 0-.17.08-.17.17v5.11c0 2.2 1.23 2.75 2.92 2.75 1.39 0 2.52-.77 2.52-.77s.05.39.08.45c.02.05.09.09.16.09h1.34c.11 0 .17-.08.17-.17l.02-7.47c0-.09-.08-.17-.19-.17zm-23.7-.01h-2.13c-.09 0-.17.09-.17.2v7.34c0 .2.13.27.3.27h1.92c.2 0 .25-.09.25-.27V6.23c0-.09-.08-.17-.17-.17zm-1.05-3.38c-.77 0-1.38.61-1.38 1.38 0 .77.61 1.38 1.38 1.38.75 0 1.36-.61 1.36-1.38 0-.77-.61-1.38-1.36-1.38zm16.49-.25h-2.11c-.09 0-.17.08-.17.17v4.09h-3.31V2.6c0-.09-.08-.17-.17-.17h-2.13c-.09 0-.17.08-.17.17v11.11c0 .09.09.17.17.17h2.13c.09 0 .17-.08.17-.17V8.96h3.31l-.02 4.75c0 .09.08.17.17.17h2.13c.09 0 .17-.08.17-.17V2.6c0-.09-.08-.17-.17-.17zM8.81 7.35v5.74c0 .04-.01.11-.06.13 0 0-1.25.89-3.31.89-2.49 0-5.44-.78-5.44-5.92S2.58 1.99 5.1 2c2.18 0 3.06.49 3.2.58.04.05.06.09.06.14L7.94 4.5c0 .09-.09.2-.2.17-.36-.11-.9-.33-2.17-.33-1.47 0-3.05.42-3.05 3.73s1.5 3.7 2.58 3.7c.92 0 1.25-.11 1.25-.11v-2.3H4.88c-.11 0-.19-.08-.19-.17V7.35c0-.09.08-.17.19-.17h3.74c.11 0 .19.08.19.17z"/></svg>
  <svg height="24" class="octicon octicon-logo-gist v-align-middle" viewBox="0 0 25 16" version="1.1" width="37" aria-hidden="true"><path fill-rule="evenodd" d="M4.7 8.73h2.45v4.02c-.55.27-1.64.34-2.53.34-2.56 0-3.47-2.2-3.47-5.05 0-2.85.91-5.06 3.48-5.06 1.28 0 2.06.23 3.28.73V2.66C7.27 2.33 6.25 2 4.63 2 1.13 2 0 4.69 0 8.03c0 3.34 1.11 6.03 4.63 6.03 1.64 0 2.81-.27 3.59-.64V7.73H4.7v1zm6.39 3.72V6.06h-1.05v6.28c0 1.25.58 1.72 1.72 1.72v-.89c-.48 0-.67-.16-.67-.7v-.02zm.25-8.72c0-.44-.33-.78-.78-.78s-.77.34-.77.78.33.78.77.78.78-.34.78-.78zm4.34 5.69c-1.5-.13-1.78-.48-1.78-1.17 0-.77.33-1.34 1.88-1.34 1.05 0 1.66.16 2.27.36v-.94c-.69-.3-1.52-.39-2.25-.39-2.2 0-2.92 1.2-2.92 2.31 0 1.08.47 1.88 2.73 2.08 1.55.13 1.77.63 1.77 1.34 0 .73-.44 1.42-2.06 1.42-1.11 0-1.86-.19-2.33-.36v.94c.5.2 1.58.39 2.33.39 2.38 0 3.14-1.2 3.14-2.41 0-1.28-.53-2.03-2.75-2.23h-.03zm8.58-2.47v-.86h-2.42v-2.5l-1.08.31v2.11l-1.56.44v.48h1.56v5c0 1.53 1.19 2.13 2.5 2.13.19 0 .52-.02.69-.05v-.89c-.19.03-.41.03-.61.03-.97 0-1.5-.39-1.5-1.34V6.94h2.42v.02-.01z"/></svg>
</a>
  </div>


  <div class="Header-item Header-item--full js-site-search">
      <div class="header-search mr-3">

<!-- '"` --><!-- </textarea></xmp> --></option></form><form class="position-relative js-quicksearch-form" role="search" aria-label="Site" action="/search" accept-charset="UTF-8" method="get"><input name="utf8" type="hidden" value="&#x2713;" />
  <div class="header-search-wrapper form-control input-sm js-chromeless-input-container">
    <input type="text"
      class="form-control input-sm js-site-search-focus header-search-input"
      data-hotkey="s,/"
      name="q"
      aria-label="Search"
      placeholder="Search…"
      autocorrect="off"
      autocomplete="off"
      autocapitalize="off">
  </div>

</form></div>


    <nav aria-label="Global" class="d-flex">
  <a class="Header-link mr-3" data-ga-click="Header, go to all gists, text:all gists" href="/discover">All gists</a>

  <a class="Header-link mr-3" data-ga-click="Header, go to GitHub, text:Back to GitHub" href="https://github.com">Back to GitHub</a>


</nav>

  </div>




    <div class="Header-item f4 mr-0" role="navigation">
      <a class="HeaderMenu-link no-underline mr-3" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;gist header&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="16b9315af9ec7c7790131d662a04213ee70eacaa04094e25d3e968fb44e79641" data-ga-click="Header, sign in" href="https://gist.github.com/auth/github?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">
        Sign&nbsp;in
</a>        <a class="HeaderMenu-link d-inline-block no-underline border border-gray-dark rounded-1 px-2 py-1" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;gist header&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="7600924ff3ef45f0921d87ee911a916fded864dae64f17845dbbdc60ac2adabd" data-ga-click="Header, sign up" href="/join?source=header-gist">
          Sign&nbsp;up
</a>    </div>
</div>



  </div>

  <div id="start-of-content" class="show-on-focus"></div>


    <div id="js-flash-container">

</div>



  <div class="application-main " data-commit-hovercards-enabled>
        <div itemscope itemtype="http://schema.org/Code">
    <main id="gist-pjax-container" class="gist-content-wrapper" data-pjax-container>
      


  <div class="gist-detail-intro gist-banner">
    <div class="container-lg px-3">
      <p class="lead">
        Instantly share code, notes, and snippets.
      </p>
    </div>
  </div>


<div class="gisthead pagehead repohead instapaper_ignore readability-menu experiment-repo-nav pt-3 mb-4">
  <div class="container-lg px-3">
    
  


<div class="mb-3 d-flex">
  <h1 class="public css-truncate float-none flex-auto width-fit pl-0">
    <a class="avatar mr-1" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie"><img src="https://avatars0.githubusercontent.com/u/20276670?s=52&amp;v=4" width="26" height="26" alt="@Curookie" /></a>
    <span class="author"><a data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie">Curookie</a></span><!--
        --><span class="path-divider">/</span><!--
        --><strong itemprop="name" class="css-truncate-target" style="max-width: 410px"><a href="/Curookie/5408324d876a51384564fac1f186938e">알고리즘</a></strong>

    <div class="d-block text-small text-gray">
      Last active <time-ago datetime="2018-11-06T13:07:28Z">Nov 6, 2018</time-ago>
    </div>
  </h1>

  <ul class="pagehead-actions float-none">



    <li>
        <a class="btn btn-sm btn-with-count tooltipped tooltipped-n" aria-label="You must be signed in to star a gist" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;gist star button&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e6f6abe5dec9860f91f989abc9691be591efd8d9a89c223a313de7af3d925320" href="/login?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">
    <svg class="octicon octicon-star" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M14 6l-4.9-.64L7 1 4.9 5.36 0 6l3.6 3.26L2.67 14 7 11.67 11.33 14l-.93-4.74L14 6z"/></svg>
    Star
</a>
  <a class="social-count" aria-label="0 users starred this gist" href="/Curookie/5408324d876a51384564fac1f186938e/stargazers">
    0
</a>
    </li>

      <li>
          <a class="btn btn-sm btn-with-count tooltipped tooltipped-n" aria-label="You must be signed in to fork a gist" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;gist fork button&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e7e8b0f1ee2e9e5f888fb7453516c97c1e9ac86525b5cd18b73f6a7124586acc" href="/login?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">
    <svg class="octicon octicon-repo-forked" viewBox="0 0 10 16" version="1.1" width="10" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8 1a1.993 1.993 0 0 0-1 3.72V6L5 8 3 6V4.72A1.993 1.993 0 0 0 2 1a1.993 1.993 0 0 0-1 3.72V6.5l3 3v1.78A1.993 1.993 0 0 0 5 15a1.993 1.993 0 0 0 1-3.72V9.5l3-3V4.72A1.993 1.993 0 0 0 8 1zM2 4.2C1.34 4.2.8 3.65.8 3c0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3 10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2zm3-10c-.66 0-1.2-.55-1.2-1.2 0-.65.55-1.2 1.2-1.2.65 0 1.2.55 1.2 1.2 0 .65-.55 1.2-1.2 1.2z"/></svg>
    Fork
</a>    <span class="social-count">0</span>

      </li>
  </ul>

</div>

<div class="d-flex">
  <div class="flex-auto">
    <nav class="reponav js-repo-nav js-sidenav-container-pjax"
     aria-label="Gist"
     data-pjax="#gist-pjax-container">

  <a class="js-selected-navigation-item selected reponav-item" data-pjax="true" data-hotkey="g c" aria-current="page" data-selected-links="gist_code /Curookie/5408324d876a51384564fac1f186938e" href="/Curookie/5408324d876a51384564fac1f186938e">
    <svg class="octicon octicon-code" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M9.5 3L8 4.5 11.5 8 8 11.5 9.5 13 14 8 9.5 3zm-5 0L0 8l4.5 5L6 11.5 2.5 8 6 4.5 4.5 3z"/></svg>
    Code
</a>
    <a class="js-selected-navigation-item reponav-item" data-pjax="true" data-hotkey="g r" data-selected-links="gist_revisions /Curookie/5408324d876a51384564fac1f186938e/revisions" href="/Curookie/5408324d876a51384564fac1f186938e/revisions">
      <svg class="octicon octicon-git-commit" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M10.86 7c-.45-1.72-2-3-3.86-3-1.86 0-3.41 1.28-3.86 3H0v2h3.14c.45 1.72 2 3 3.86 3 1.86 0 3.41-1.28 3.86-3H14V7h-3.14zM7 10.2c-1.22 0-2.2-.98-2.2-2.2 0-1.22.98-2.2 2.2-2.2 1.22 0 2.2.98 2.2 2.2 0 1.22-.98 2.2-2.2 2.2z"/></svg>
      Revisions
      <span class="Counter">110</span>
</a>

</nav>

  </div>

  <div class="file-navigation-options" data-multiple>

    <div class="file-navigation-option v-align-middle">

  <div class="input-group">
    <div class="input-group-button">
      <details class="details-reset details-overlay select-menu">
        <summary class="btn btn-sm select-menu-button" data-ga-click="Repository, clone Embed, location:repo overview">
          <span data-menu-button>Embed</span>
        </summary>
        <details-menu
          class="select-menu-modal position-absolute"
          data-menu-input="gist-share-url"
          style="z-index: 99;" aria-label="Clone options">
          <div class="select-menu-header">
            <span class="select-menu-title">What would you like to do?</span>
          </div>
          <div class="select-menu-list">
              <button name="button" type="button" class="select-menu-item width-full" aria-checked="true" role="menuitemradio" value="&lt;script src=&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e.js&quot;&gt;&lt;/script&gt;" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;EMBED&quot;,&quot;git_repository_type&quot;:&quot;GIST&quot;,&quot;gist_id&quot;:87792707,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="62598bd55fa925d68a178df014446fc79450f6c4889c6c4e2b00225fc4affc9d">
                <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
                <div class="select-menu-item-text">
                  <span class="select-menu-item-heading" data-menu-button-text>
                    
                    Embed
                  </span>
                    <span class="description">
                      Embed this gist in your website.
                    </span>
                </div>
</button>              <button name="button" type="button" class="select-menu-item width-full" aria-checked="false" role="menuitemradio" value="https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;SHARE&quot;,&quot;git_repository_type&quot;:&quot;GIST&quot;,&quot;gist_id&quot;:87792707,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="e574c6d2fde2a8c5ebbcf5108eef6d978f775a5ef04dfc2e7fe4755bfd3218bb">
                <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
                <div class="select-menu-item-text">
                  <span class="select-menu-item-heading" data-menu-button-text>
                    
                    Share
                  </span>
                    <span class="description">
                      Copy sharable link for this gist.
                    </span>
                </div>
</button>              <button name="button" type="button" class="select-menu-item width-full" aria-checked="false" role="menuitemradio" value="https://gist.github.com/5408324d876a51384564fac1f186938e.git" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;USE_HTTPS&quot;,&quot;git_repository_type&quot;:&quot;GIST&quot;,&quot;gist_id&quot;:87792707,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="744aa9e1c19a38d8d9875ef492f71fa9eb4a28937d384b9b01cfd1f1bb2aa47f">
                <svg class="octicon octicon-check select-menu-item-icon" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M12 5l-8 8-4-4 1.5-1.5L4 10l6.5-6.5L12 5z"/></svg>
                <div class="select-menu-item-text">
                  <span class="select-menu-item-heading" data-menu-button-text>
                    Clone via
                    HTTPS
                  </span>
                    <span class="description">
                      Clone with Git or checkout with SVN using the repository’s web address.
                    </span>
                </div>
</button>          </div>
          <div class="select-menu-list">
            <a role="menuitem" class="select-menu-item select-menu-action" href="https://help.github.com/articles/which-remote-url-should-i-use" target="_blank">
              <svg class="octicon octicon-question select-menu-item-icon" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M6 10h2v2H6v-2zm4-3.5C10 8.64 8 9 8 9H6c0-.55.45-1 1-1h.5c.28 0 .5-.22.5-.5v-1c0-.28-.22-.5-.5-.5h-1c-.28 0-.5.22-.5.5V7H4c0-1.5 1.5-3 3-3s3 1 3 2.5zM7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7z"/></svg>
              <div class="select-menu-item-text">
                Learn more about clone URLs
              </div>
            </a>
          </div>
        </details-menu>
      </details>
    </div>

    <input
      id="gist-share-url"
      type="text"
      data-autoselect
      class="form-control input-monospace input-sm"
      value="&lt;script src=&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e.js&quot;&gt;&lt;/script&gt;"
      aria-label="Clone this repository at &lt;script src=&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e.js&quot;&gt;&lt;/script&gt;"
      readonly>

    <div class="input-group-button">
      <clipboard-copy for="gist-share-url" aria-label="Copy to clipboard" class="btn btn-sm zeroclipboard-button" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;COPY_URL&quot;,&quot;git_repository_type&quot;:&quot;GIST&quot;,&quot;gist_id&quot;:87792707,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="236d7a970f81818de67b80e564c1fafbb2f3b87b4463634ab7e1628401f6244c"><svg class="octicon octicon-clippy" viewBox="0 0 14 16" version="1.1" width="14" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M2 13h4v1H2v-1zm5-6H2v1h5V7zm2 3V8l-3 3 3 3v-2h5v-2H9zM4.5 9H2v1h2.5V9zM2 12h2.5v-1H2v1zm9 1h1v2c-.02.28-.11.52-.3.7-.19.18-.42.28-.7.3H1c-.55 0-1-.45-1-1V4c0-.55.45-1 1-1h3c0-1.11.89-2 2-2 1.11 0 2 .89 2 2h3c.55 0 1 .45 1 1v5h-1V6H1v9h10v-2zM2 5h8c0-.55-.45-1-1-1H8c-.55 0-1-.45-1-1s-.45-1-1-1-1 .45-1 1-.45 1-1 1H3c-.55 0-1 .45-1 1z"/></svg></clipboard-copy>
    </div>
  </div>
</div>


    <div class="file-navigation-option">
    <a class="btn btn-sm tooltipped tooltipped-s tooltipped-multiline" aria-label="Save Curookie/5408324d876a51384564fac1f186938e to your computer and use it in GitHub Desktop." data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;OPEN_IN_DESKTOP&quot;,&quot;git_repository_type&quot;:&quot;GIST&quot;,&quot;gist_id&quot;:87792707,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="cf02740279268b3e05e940c69b8b329df437ea9f06bf5954abdd96965ad974c5" href="https://desktop.github.com"><svg class="octicon octicon-desktop-download" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M4 6h3V0h2v6h3l-4 4-4-4zm11-4h-4v1h4v8H1V3h4V2H1c-.55 0-1 .45-1 1v9c0 .55.45 1 1 1h5.34c-.25.61-.86 1.39-2.34 2h8c-1.48-.61-2.09-1.39-2.34-2H15c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1z"/></svg></a>
</div>


    <div class="file-navigation-option">
      <a class="btn btn-sm" rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;clone_or_download.click&quot;,&quot;payload&quot;:{&quot;feature_clicked&quot;:&quot;DOWNLOAD_ZIP&quot;,&quot;git_repository_type&quot;:&quot;GIST&quot;,&quot;gist_id&quot;:87792707,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="a80670906b3f2e918acadefd87b1586f443e53cbe89e70cbe642dfe8ff0ff280" data-ga-click="Gist, download zip, location:gist overview" href="/Curookie/5408324d876a51384564fac1f186938e/archive/36e0ea3742bc785d58b2a442e5789d386261144c.zip">Download ZIP</a>
    </div>
  </div>
</div>


  </div>
</div>

<div class="container-lg px-3 new-discussion-timeline experiment-repo-nav">
  <div class="repository-content gist-content">
    
  <div>
      <div itemprop="about">
    너무나 중요한 알고리즘
  </div>


        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-" class="file">
      <div class="file-header">
        <div class="file-actions">

          <a class="btn btn-sm " href="/Curookie/5408324d876a51384564fac1f186938e/raw/36e0ea3742bc785d58b2a442e5789d386261144c/%25EC%2595%258C%25EA%25B3%25A0%25EB%25A6%25AC%25EC%25A6%2598">Raw</a>
        </div>
        <div class="file-info">
          <span class="icon">
            <svg class="octicon octicon-gist" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.5 5L10 7.5 7.5 10l-.75-.75L8.5 7.5 6.75 5.75 7.5 5zm-3 0L2 7.5 4.5 10l.75-.75L3.5 7.5l1.75-1.75L4.5 5zM0 13V2c0-.55.45-1 1-1h10c.55 0 1 .45 1 1v11c0 .55-.45 1-1 1H1c-.55 0-1-.45-1-1zm1 0h10V2H1v11z"/></svg>
          </span>
          <a class="css-truncate" href="#file-">
            <strong class="user-select-contain gist-blob-name css-truncate-target">
              알고리즘
            </strong>
          </a>
        </div>
      </div>
    

  <div itemprop="text" class="Box-body p-0 blob-wrapper data type-text ">
      
<table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file--L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file--LC1" class="blob-code blob-code-inner js-file-line">[알고리즘 강의]</td>
      </tr>
      <tr>
        <td id="file--L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file--LC2" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file--LC3" class="blob-code blob-code-inner js-file-line">T아카데미 기초 : https://youtu.be/4E3i3uYHKeA</td>
      </tr>
      <tr>
        <td id="file--L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file--LC4" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L5" class="blob-num js-line-number" data-line-number="5"></td>
        <td id="file--LC5" class="blob-code blob-code-inner js-file-line">T아카데미 중급 : https://youtu.be/Cc-YlbLOaqY?list=PL9mhQYIlKEhcqOXxPOhs6pNpq681RDK4J</td>
      </tr>
      <tr>
        <td id="file--L6" class="blob-num js-line-number" data-line-number="6"></td>
        <td id="file--LC6" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L7" class="blob-num js-line-number" data-line-number="7"></td>
        <td id="file--LC7" class="blob-code blob-code-inner js-file-line">Jake Lee : https://youtu.be/mzM3S5FtKuw?list=PLl5LpJCoD2mCIRn0Fkt8z07EK320ZmHgY</td>
      </tr>
      <tr>
        <td id="file--L8" class="blob-num js-line-number" data-line-number="8"></td>
        <td id="file--LC8" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L9" class="blob-num js-line-number" data-line-number="9"></td>
        <td id="file--LC9" class="blob-code blob-code-inner js-file-line">권오흠 교수님 알고리즘 : https://www.youtube.com/watch?v=ln7AfppN7mY&amp;list=PL52K_8WQO5oUuH06MLOrah4h05TZ4n38l</td>
      </tr>
      <tr>
        <td id="file--L10" class="blob-num js-line-number" data-line-number="10"></td>
        <td id="file--LC10" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L11" class="blob-num js-line-number" data-line-number="11"></td>
        <td id="file--LC11" class="blob-code blob-code-inner js-file-line">권오흠 교수님 자료구조 :</td>
      </tr>
      <tr>
        <td id="file--L12" class="blob-num js-line-number" data-line-number="12"></td>
        <td id="file--LC12" class="blob-code blob-code-inner js-file-line">https://www.youtube.com/watch?v=-XbHQQ8pUQY&amp;list=PL52K_8WQO5oXIATx2vcTvqwxXxoGxxsIz</td>
      </tr>
      <tr>
        <td id="file--L13" class="blob-num js-line-number" data-line-number="13"></td>
        <td id="file--LC13" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L14" class="blob-num js-line-number" data-line-number="14"></td>
        <td id="file--LC14" class="blob-code blob-code-inner js-file-line">동빈나(안경잡이개발자) https://www.youtube.com/watch?v=qQ5iLNjpxSk&amp;list=PLRx0vPvlEmdDHxCvAQS1_6XV4deOwfVrz</td>
      </tr>
      <tr>
        <td id="file--L15" class="blob-num js-line-number" data-line-number="15"></td>
        <td id="file--LC15" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L16" class="blob-num js-line-number" data-line-number="16"></td>
        <td id="file--LC16" class="blob-code blob-code-inner js-file-line">삼성 swea : https://www.swexpertacademy.com/main/learn/course/courseList.do</td>
      </tr>
      <tr>
        <td id="file--L17" class="blob-num js-line-number" data-line-number="17"></td>
        <td id="file--LC17" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L18" class="blob-num js-line-number" data-line-number="18"></td>
        <td id="file--LC18" class="blob-code blob-code-inner js-file-line">인프런 : https://www.inflearn.com/</td>
      </tr>
      <tr>
        <td id="file--L19" class="blob-num js-line-number" data-line-number="19"></td>
        <td id="file--LC19" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L20" class="blob-num js-line-number" data-line-number="20"></td>
        <td id="file--LC20" class="blob-code blob-code-inner js-file-line">백준(코드플러스) : https://code.plus/ </td>
      </tr>
      <tr>
        <td id="file--L21" class="blob-num js-line-number" data-line-number="21"></td>
        <td id="file--LC21" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L22" class="blob-num js-line-number" data-line-number="22"></td>
        <td id="file--LC22" class="blob-code blob-code-inner js-file-line">■ 문자 코드(Ascii/Unicode)</td>
      </tr>
      <tr>
        <td id="file--L23" class="blob-num js-line-number" data-line-number="23"></td>
        <td id="file--LC23" class="blob-code blob-code-inner js-file-line">32 - space(공백)</td>
      </tr>
      <tr>
        <td id="file--L24" class="blob-num js-line-number" data-line-number="24"></td>
        <td id="file--LC24" class="blob-code blob-code-inner js-file-line">65 - A</td>
      </tr>
      <tr>
        <td id="file--L25" class="blob-num js-line-number" data-line-number="25"></td>
        <td id="file--LC25" class="blob-code blob-code-inner js-file-line">90 - Z</td>
      </tr>
      <tr>
        <td id="file--L26" class="blob-num js-line-number" data-line-number="26"></td>
        <td id="file--LC26" class="blob-code blob-code-inner js-file-line">97 - a</td>
      </tr>
      <tr>
        <td id="file--L27" class="blob-num js-line-number" data-line-number="27"></td>
        <td id="file--LC27" class="blob-code blob-code-inner js-file-line">122 - z</td>
      </tr>
      <tr>
        <td id="file--L28" class="blob-num js-line-number" data-line-number="28"></td>
        <td id="file--LC28" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L29" class="blob-num js-line-number" data-line-number="29"></td>
        <td id="file--LC29" class="blob-code blob-code-inner js-file-line">■ 소수 prime number</td>
      </tr>
      <tr>
        <td id="file--L30" class="blob-num js-line-number" data-line-number="30"></td>
        <td id="file--LC30" class="blob-code blob-code-inner js-file-line">자기 자신보다 작은 수들을 나누어봐서, 하나라도 나누어지면 소수가 아닌 것</td>
      </tr>
      <tr>
        <td id="file--L31" class="blob-num js-line-number" data-line-number="31"></td>
        <td id="file--LC31" class="blob-code blob-code-inner js-file-line">확장) 입력받은 수보다 작은 수의 소수들만 나누어보면 되는 것이다. (ArrayList에 소수를 넣어놓고 나누어보는 방식으로~)&#39;</td>
      </tr>
      <tr>
        <td id="file--L32" class="blob-num js-line-number" data-line-number="32"></td>
        <td id="file--LC32" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L33" class="blob-num js-line-number" data-line-number="33"></td>
        <td id="file--LC33" class="blob-code blob-code-inner js-file-line">public class PrimeNumber1 {</td>
      </tr>
      <tr>
        <td id="file--L34" class="blob-num js-line-number" data-line-number="34"></td>
        <td id="file--LC34" class="blob-code blob-code-inner js-file-line">	public static void getPrime(int num, ArrayList&lt;Integer&gt; prime) {</td>
      </tr>
      <tr>
        <td id="file--L35" class="blob-num js-line-number" data-line-number="35"></td>
        <td id="file--LC35" class="blob-code blob-code-inner js-file-line">		prime.add(2); </td>
      </tr>
      <tr>
        <td id="file--L36" class="blob-num js-line-number" data-line-number="36"></td>
        <td id="file--LC36" class="blob-code blob-code-inner js-file-line">		for (int i = 2; i &lt;= num; i++) {</td>
      </tr>
      <tr>
        <td id="file--L37" class="blob-num js-line-number" data-line-number="37"></td>
        <td id="file--LC37" class="blob-code blob-code-inner js-file-line">			for (int j = 0; prime.size() &gt; j; j++) {</td>
      </tr>
      <tr>
        <td id="file--L38" class="blob-num js-line-number" data-line-number="38"></td>
        <td id="file--LC38" class="blob-code blob-code-inner js-file-line">				if (i % prime.get(j) == 0) break; // 소수가 아닌 경우 pass</td>
      </tr>
      <tr>
        <td id="file--L39" class="blob-num js-line-number" data-line-number="39"></td>
        <td id="file--LC39" class="blob-code blob-code-inner js-file-line">				if (j + 1 == prime.size()) // 소수일 때</td>
      </tr>
      <tr>
        <td id="file--L40" class="blob-num js-line-number" data-line-number="40"></td>
        <td id="file--LC40" class="blob-code blob-code-inner js-file-line">					prime.add(i);</td>
      </tr>
      <tr>
        <td id="file--L41" class="blob-num js-line-number" data-line-number="41"></td>
        <td id="file--LC41" class="blob-code blob-code-inner js-file-line">			}</td>
      </tr>
      <tr>
        <td id="file--L42" class="blob-num js-line-number" data-line-number="42"></td>
        <td id="file--LC42" class="blob-code blob-code-inner js-file-line">		}</td>
      </tr>
      <tr>
        <td id="file--L43" class="blob-num js-line-number" data-line-number="43"></td>
        <td id="file--LC43" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L44" class="blob-num js-line-number" data-line-number="44"></td>
        <td id="file--LC44" class="blob-code blob-code-inner js-file-line">		for (Integer result : prime) {</td>
      </tr>
      <tr>
        <td id="file--L45" class="blob-num js-line-number" data-line-number="45"></td>
        <td id="file--LC45" class="blob-code blob-code-inner js-file-line">			System.out.println(result);</td>
      </tr>
      <tr>
        <td id="file--L46" class="blob-num js-line-number" data-line-number="46"></td>
        <td id="file--LC46" class="blob-code blob-code-inner js-file-line">		}</td>
      </tr>
      <tr>
        <td id="file--L47" class="blob-num js-line-number" data-line-number="47"></td>
        <td id="file--LC47" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L48" class="blob-num js-line-number" data-line-number="48"></td>
        <td id="file--LC48" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L49" class="blob-num js-line-number" data-line-number="49"></td>
        <td id="file--LC49" class="blob-code blob-code-inner js-file-line">	public static void main(String[] args) {</td>
      </tr>
      <tr>
        <td id="file--L50" class="blob-num js-line-number" data-line-number="50"></td>
        <td id="file--LC50" class="blob-code blob-code-inner js-file-line">		ArrayList&lt;Integer&gt; prime = new ArrayList&lt;Integer&gt;();</td>
      </tr>
      <tr>
        <td id="file--L51" class="blob-num js-line-number" data-line-number="51"></td>
        <td id="file--LC51" class="blob-code blob-code-inner js-file-line">		long start = System.currentTimeMillis();</td>
      </tr>
      <tr>
        <td id="file--L52" class="blob-num js-line-number" data-line-number="52"></td>
        <td id="file--LC52" class="blob-code blob-code-inner js-file-line">		getPrime(30000, prime);</td>
      </tr>
      <tr>
        <td id="file--L53" class="blob-num js-line-number" data-line-number="53"></td>
        <td id="file--LC53" class="blob-code blob-code-inner js-file-line">		long end = System.currentTimeMillis();</td>
      </tr>
      <tr>
        <td id="file--L54" class="blob-num js-line-number" data-line-number="54"></td>
        <td id="file--LC54" class="blob-code blob-code-inner js-file-line">		System.out.println(&quot;수행시간 : &quot; + (end - start));</td>
      </tr>
      <tr>
        <td id="file--L55" class="blob-num js-line-number" data-line-number="55"></td>
        <td id="file--LC55" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L56" class="blob-num js-line-number" data-line-number="56"></td>
        <td id="file--LC56" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L57" class="blob-num js-line-number" data-line-number="57"></td>
        <td id="file--LC57" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L58" class="blob-num js-line-number" data-line-number="58"></td>
        <td id="file--LC58" class="blob-code blob-code-inner js-file-line">확장) 주어진 자연수 N이 소수이기 위한 필요충분 조건은 N이 N의 제곱근보다 크지 않은 어떤 소수로도 나눠지지 않는다.</td>
      </tr>
      <tr>
        <td id="file--L59" class="blob-num js-line-number" data-line-number="59"></td>
        <td id="file--LC59" class="blob-code blob-code-inner js-file-line">수가 수를 나누면 몫이 발생하게 되는데 몫과 나누는 수, 둘 중 하나는 반드시 N의 제곱근 이하이기 때문이다.</td>
      </tr>
      <tr>
        <td id="file--L60" class="blob-num js-line-number" data-line-number="60"></td>
        <td id="file--LC60" class="blob-code blob-code-inner js-file-line">즉, 2부터 N의 제곱근 까지 나눠보면 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L61" class="blob-num js-line-number" data-line-number="61"></td>
        <td id="file--LC61" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L62" class="blob-num js-line-number" data-line-number="62"></td>
        <td id="file--LC62" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L63" class="blob-num js-line-number" data-line-number="63"></td>
        <td id="file--LC63" class="blob-code blob-code-inner js-file-line">#include &lt;math.h&gt;</td>
      </tr>
      <tr>
        <td id="file--L64" class="blob-num js-line-number" data-line-number="64"></td>
        <td id="file--LC64" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L65" class="blob-num js-line-number" data-line-number="65"></td>
        <td id="file--LC65" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L66" class="blob-num js-line-number" data-line-number="66"></td>
        <td id="file--LC66" class="blob-code blob-code-inner js-file-line">int main(){</td>
      </tr>
      <tr>
        <td id="file--L67" class="blob-num js-line-number" data-line-number="67"></td>
        <td id="file--LC67" class="blob-code blob-code-inner js-file-line">    unsigned int num;</td>
      </tr>
      <tr>
        <td id="file--L68" class="blob-num js-line-number" data-line-number="68"></td>
        <td id="file--LC68" class="blob-code blob-code-inner js-file-line">    cout &lt;&lt; &quot;소수를 구할 수를 입력하세요 : &quot;;</td>
      </tr>
      <tr>
        <td id="file--L69" class="blob-num js-line-number" data-line-number="69"></td>
        <td id="file--LC69" class="blob-code blob-code-inner js-file-line">    cin &gt;&gt; num;</td>
      </tr>
      <tr>
        <td id="file--L70" class="blob-num js-line-number" data-line-number="70"></td>
        <td id="file--LC70" class="blob-code blob-code-inner js-file-line">    bool isPrime = true;</td>
      </tr>
      <tr>
        <td id="file--L71" class="blob-num js-line-number" data-line-number="71"></td>
        <td id="file--LC71" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L72" class="blob-num js-line-number" data-line-number="72"></td>
        <td id="file--LC72" class="blob-code blob-code-inner js-file-line">    // 2부터 N의 제곱근까지의 수로 나눠서 나눠지는 수가 있으면 반복문 종료</td>
      </tr>
      <tr>
        <td id="file--L73" class="blob-num js-line-number" data-line-number="73"></td>
        <td id="file--LC73" class="blob-code blob-code-inner js-file-line">    for (int i=2; i&lt;=sqrt(num); i++) {</td>
      </tr>
      <tr>
        <td id="file--L74" class="blob-num js-line-number" data-line-number="74"></td>
        <td id="file--LC74" class="blob-code blob-code-inner js-file-line">        if (num % i == 0) {</td>
      </tr>
      <tr>
        <td id="file--L75" class="blob-num js-line-number" data-line-number="75"></td>
        <td id="file--LC75" class="blob-code blob-code-inner js-file-line">            isPrime = false;</td>
      </tr>
      <tr>
        <td id="file--L76" class="blob-num js-line-number" data-line-number="76"></td>
        <td id="file--LC76" class="blob-code blob-code-inner js-file-line">            break;</td>
      </tr>
      <tr>
        <td id="file--L77" class="blob-num js-line-number" data-line-number="77"></td>
        <td id="file--LC77" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L78" class="blob-num js-line-number" data-line-number="78"></td>
        <td id="file--LC78" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L79" class="blob-num js-line-number" data-line-number="79"></td>
        <td id="file--LC79" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L80" class="blob-num js-line-number" data-line-number="80"></td>
        <td id="file--LC80" class="blob-code blob-code-inner js-file-line">    if(isPrime) {</td>
      </tr>
      <tr>
        <td id="file--L81" class="blob-num js-line-number" data-line-number="81"></td>
        <td id="file--LC81" class="blob-code blob-code-inner js-file-line">        cout &lt;&lt; num &lt;&lt; &quot;은 소수입니다.&quot; &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L82" class="blob-num js-line-number" data-line-number="82"></td>
        <td id="file--LC82" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L83" class="blob-num js-line-number" data-line-number="83"></td>
        <td id="file--LC83" class="blob-code blob-code-inner js-file-line">    else {</td>
      </tr>
      <tr>
        <td id="file--L84" class="blob-num js-line-number" data-line-number="84"></td>
        <td id="file--LC84" class="blob-code blob-code-inner js-file-line">        cout &lt;&lt; num &lt;&lt; &quot;은 소수가 아닙니다.&quot; &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L85" class="blob-num js-line-number" data-line-number="85"></td>
        <td id="file--LC85" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L86" class="blob-num js-line-number" data-line-number="86"></td>
        <td id="file--LC86" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L87" class="blob-num js-line-number" data-line-number="87"></td>
        <td id="file--LC87" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L88" class="blob-num js-line-number" data-line-number="88"></td>
        <td id="file--LC88" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L89" class="blob-num js-line-number" data-line-number="89"></td>
        <td id="file--LC89" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L90" class="blob-num js-line-number" data-line-number="90"></td>
        <td id="file--LC90" class="blob-code blob-code-inner js-file-line">확장) 에라토스테네스의 체 (Sieve of Eratosthenes) 나눌 필요가 없이 배수를 체크하는 식으로 진행</td>
      </tr>
      <tr>
        <td id="file--L91" class="blob-num js-line-number" data-line-number="91"></td>
        <td id="file--LC91" class="blob-code blob-code-inner js-file-line">void getChe(int num) {</td>
      </tr>
      <tr>
        <td id="file--L92" class="blob-num js-line-number" data-line-number="92"></td>
        <td id="file--LC92" class="blob-code blob-code-inner js-file-line">    int *arr;</td>
      </tr>
      <tr>
        <td id="file--L93" class="blob-num js-line-number" data-line-number="93"></td>
        <td id="file--LC93" class="blob-code blob-code-inner js-file-line">    arr = (int *)malloc(sizeof(int) * num);</td>
      </tr>
      <tr>
        <td id="file--L94" class="blob-num js-line-number" data-line-number="94"></td>
        <td id="file--LC94" class="blob-code blob-code-inner js-file-line">    int i = 2;</td>
      </tr>
      <tr>
        <td id="file--L95" class="blob-num js-line-number" data-line-number="95"></td>
        <td id="file--LC95" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L96" class="blob-num js-line-number" data-line-number="96"></td>
        <td id="file--LC96" class="blob-code blob-code-inner js-file-line">    // 입력받은 수 만큼 배열에 모두 초기화 해둔다</td>
      </tr>
      <tr>
        <td id="file--L97" class="blob-num js-line-number" data-line-number="97"></td>
        <td id="file--LC97" class="blob-code blob-code-inner js-file-line">    for (i = 2; i &lt;= num; i++) {</td>
      </tr>
      <tr>
        <td id="file--L98" class="blob-num js-line-number" data-line-number="98"></td>
        <td id="file--LC98" class="blob-code blob-code-inner js-file-line">        arr[i] = i;</td>
      </tr>
      <tr>
        <td id="file--L99" class="blob-num js-line-number" data-line-number="99"></td>
        <td id="file--LC99" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L100" class="blob-num js-line-number" data-line-number="100"></td>
        <td id="file--LC100" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L101" class="blob-num js-line-number" data-line-number="101"></td>
        <td id="file--LC101" class="blob-code blob-code-inner js-file-line">    for (i = 2; i &lt;= num; i++) { </td>
      </tr>
      <tr>
        <td id="file--L102" class="blob-num js-line-number" data-line-number="102"></td>
        <td id="file--LC102" class="blob-code blob-code-inner js-file-line">        if (arr[i] == 0) // 이미 체크된 수의 배수는 확인하지 않는다</td>
      </tr>
      <tr>
        <td id="file--L103" class="blob-num js-line-number" data-line-number="103"></td>
        <td id="file--LC103" class="blob-code blob-code-inner js-file-line">            continue;</td>
      </tr>
      <tr>
        <td id="file--L104" class="blob-num js-line-number" data-line-number="104"></td>
        <td id="file--LC104" class="blob-code blob-code-inner js-file-line">        //소수 찾았을때     </td>
      </tr>
      <tr>
        <td id="file--L105" class="blob-num js-line-number" data-line-number="105"></td>
        <td id="file--LC105" class="blob-code blob-code-inner js-file-line">        for (int j = i + i; j &lt;= num; j += i) { // i를 제외한 i의 배수들은 0으로 체크</td>
      </tr>
      <tr>
        <td id="file--L106" class="blob-num js-line-number" data-line-number="106"></td>
        <td id="file--LC106" class="blob-code blob-code-inner js-file-line">            arr[j] = 0;</td>
      </tr>
      <tr>
        <td id="file--L107" class="blob-num js-line-number" data-line-number="107"></td>
        <td id="file--LC107" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L108" class="blob-num js-line-number" data-line-number="108"></td>
        <td id="file--LC108" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L109" class="blob-num js-line-number" data-line-number="109"></td>
        <td id="file--LC109" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L110" class="blob-num js-line-number" data-line-number="110"></td>
        <td id="file--LC110" class="blob-code blob-code-inner js-file-line">    // print</td>
      </tr>
      <tr>
        <td id="file--L111" class="blob-num js-line-number" data-line-number="111"></td>
        <td id="file--LC111" class="blob-code blob-code-inner js-file-line">    for (i = 2; i &lt;= num; i++) {</td>
      </tr>
      <tr>
        <td id="file--L112" class="blob-num js-line-number" data-line-number="112"></td>
        <td id="file--LC112" class="blob-code blob-code-inner js-file-line">        if (arr[i] != 0)</td>
      </tr>
      <tr>
        <td id="file--L113" class="blob-num js-line-number" data-line-number="113"></td>
        <td id="file--LC113" class="blob-code blob-code-inner js-file-line">            cout &lt;&lt; arr[i] &lt;&lt; &quot; &quot;;</td>
      </tr>
      <tr>
        <td id="file--L114" class="blob-num js-line-number" data-line-number="114"></td>
        <td id="file--LC114" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L115" class="blob-num js-line-number" data-line-number="115"></td>
        <td id="file--LC115" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L116" class="blob-num js-line-number" data-line-number="116"></td>
        <td id="file--LC116" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L117" class="blob-num js-line-number" data-line-number="117"></td>
        <td id="file--LC117" class="blob-code blob-code-inner js-file-line">소수 개수 구하기 내 코드</td>
      </tr>
      <tr>
        <td id="file--L118" class="blob-num js-line-number" data-line-number="118"></td>
        <td id="file--LC118" class="blob-code blob-code-inner js-file-line">#include &lt;string&gt;</td>
      </tr>
      <tr>
        <td id="file--L119" class="blob-num js-line-number" data-line-number="119"></td>
        <td id="file--LC119" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L120" class="blob-num js-line-number" data-line-number="120"></td>
        <td id="file--LC120" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L121" class="blob-num js-line-number" data-line-number="121"></td>
        <td id="file--LC121" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L122" class="blob-num js-line-number" data-line-number="122"></td>
        <td id="file--LC122" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L123" class="blob-num js-line-number" data-line-number="123"></td>
        <td id="file--LC123" class="blob-code blob-code-inner js-file-line">int solution(int n) {</td>
      </tr>
      <tr>
        <td id="file--L124" class="blob-num js-line-number" data-line-number="124"></td>
        <td id="file--LC124" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L125" class="blob-num js-line-number" data-line-number="125"></td>
        <td id="file--LC125" class="blob-code blob-code-inner js-file-line">    int arr[1000000];</td>
      </tr>
      <tr>
        <td id="file--L126" class="blob-num js-line-number" data-line-number="126"></td>
        <td id="file--LC126" class="blob-code blob-code-inner js-file-line">    int i = 2;</td>
      </tr>
      <tr>
        <td id="file--L127" class="blob-num js-line-number" data-line-number="127"></td>
        <td id="file--LC127" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L128" class="blob-num js-line-number" data-line-number="128"></td>
        <td id="file--LC128" class="blob-code blob-code-inner js-file-line">    for(i=2; i&lt;=n; i++)</td>
      </tr>
      <tr>
        <td id="file--L129" class="blob-num js-line-number" data-line-number="129"></td>
        <td id="file--LC129" class="blob-code blob-code-inner js-file-line">        arr[i] = i;</td>
      </tr>
      <tr>
        <td id="file--L130" class="blob-num js-line-number" data-line-number="130"></td>
        <td id="file--LC130" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L131" class="blob-num js-line-number" data-line-number="131"></td>
        <td id="file--LC131" class="blob-code blob-code-inner js-file-line">    for(i=2; i&lt;=n; i++)</td>
      </tr>
      <tr>
        <td id="file--L132" class="blob-num js-line-number" data-line-number="132"></td>
        <td id="file--LC132" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L133" class="blob-num js-line-number" data-line-number="133"></td>
        <td id="file--LC133" class="blob-code blob-code-inner js-file-line">        if(arr[i]==0) continue;</td>
      </tr>
      <tr>
        <td id="file--L134" class="blob-num js-line-number" data-line-number="134"></td>
        <td id="file--LC134" class="blob-code blob-code-inner js-file-line">        answer++;</td>
      </tr>
      <tr>
        <td id="file--L135" class="blob-num js-line-number" data-line-number="135"></td>
        <td id="file--LC135" class="blob-code blob-code-inner js-file-line">        for(int j=i+i; j&lt;=n; j+=i)</td>
      </tr>
      <tr>
        <td id="file--L136" class="blob-num js-line-number" data-line-number="136"></td>
        <td id="file--LC136" class="blob-code blob-code-inner js-file-line">            arr[j] = 0;     </td>
      </tr>
      <tr>
        <td id="file--L137" class="blob-num js-line-number" data-line-number="137"></td>
        <td id="file--LC137" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L138" class="blob-num js-line-number" data-line-number="138"></td>
        <td id="file--LC138" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L139" class="blob-num js-line-number" data-line-number="139"></td>
        <td id="file--LC139" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L140" class="blob-num js-line-number" data-line-number="140"></td>
        <td id="file--LC140" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L141" class="blob-num js-line-number" data-line-number="141"></td>
        <td id="file--LC141" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L142" class="blob-num js-line-number" data-line-number="142"></td>
        <td id="file--LC142" class="blob-code blob-code-inner js-file-line">■ 약수</td>
      </tr>
      <tr>
        <td id="file--L143" class="blob-num js-line-number" data-line-number="143"></td>
        <td id="file--LC143" class="blob-code blob-code-inner js-file-line">% 나눠서 나머지가 0이면 약수.</td>
      </tr>
      <tr>
        <td id="file--L144" class="blob-num js-line-number" data-line-number="144"></td>
        <td id="file--LC144" class="blob-code blob-code-inner js-file-line">확장) n의 1/2까지만 측정해서 i*i 제곱약수 걸러주고 그 외는 n/i로 약수의 짝을 구하면 반복문을 줄일 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L145" class="blob-num js-line-number" data-line-number="145"></td>
        <td id="file--LC145" class="blob-code blob-code-inner js-file-line">확장) 소수 구해서 n이 2^a*3^b*5*c일때 약수의 총합은 (a+1)(b+1)(c+1)이다.</td>
      </tr>
      <tr>
        <td id="file--L146" class="blob-num js-line-number" data-line-number="146"></td>
        <td id="file--LC146" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L147" class="blob-num js-line-number" data-line-number="147"></td>
        <td id="file--LC147" class="blob-code blob-code-inner js-file-line">#include&lt;cmath&gt;</td>
      </tr>
      <tr>
        <td id="file--L148" class="blob-num js-line-number" data-line-number="148"></td>
        <td id="file--LC148" class="blob-code blob-code-inner js-file-line">int sum = 0;</td>
      </tr>
      <tr>
        <td id="file--L149" class="blob-num js-line-number" data-line-number="149"></td>
        <td id="file--LC149" class="blob-code blob-code-inner js-file-line">  for(int i=1; i&lt;=sqrt(n); i++) if(n%i==0) { sum += i; if(n!=i*i) sum += n/i; }</td>
      </tr>
      <tr>
        <td id="file--L150" class="blob-num js-line-number" data-line-number="150"></td>
        <td id="file--LC150" class="blob-code blob-code-inner js-file-line">return sum;</td>
      </tr>
      <tr>
        <td id="file--L151" class="blob-num js-line-number" data-line-number="151"></td>
        <td id="file--LC151" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L152" class="blob-num js-line-number" data-line-number="152"></td>
        <td id="file--LC152" class="blob-code blob-code-inner js-file-line">■ 최대공약수 gcd</td>
      </tr>
      <tr>
        <td id="file--L153" class="blob-num js-line-number" data-line-number="153"></td>
        <td id="file--LC153" class="blob-code blob-code-inner js-file-line">확장)유클리드 호제법</td>
      </tr>
      <tr>
        <td id="file--L154" class="blob-num js-line-number" data-line-number="154"></td>
        <td id="file--LC154" class="blob-code blob-code-inner js-file-line">만약(a&gt;b일 때) f(a,b)=f(b, a mob b)=f(a mob b, b mob (a mob b)) ... f(x, y)나머지가 0이 되었을 때 그 수 y는 a,b의 최대공약수다.</td>
      </tr>
      <tr>
        <td id="file--L155" class="blob-num js-line-number" data-line-number="155"></td>
        <td id="file--LC155" class="blob-code blob-code-inner js-file-line">https://ko.wikipedia.org/wiki/%EC%9C%A0%ED%81%B4%EB%A6%AC%EB%93%9C_%ED%98%B8%EC%A0%9C%EB%B2%95</td>
      </tr>
      <tr>
        <td id="file--L156" class="blob-num js-line-number" data-line-number="156"></td>
        <td id="file--LC156" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L157" class="blob-num js-line-number" data-line-number="157"></td>
        <td id="file--LC157" class="blob-code blob-code-inner js-file-line">(54, 24) (24, 54/24..6) (6, 24/6..0) -&gt; 6</td>
      </tr>
      <tr>
        <td id="file--L158" class="blob-num js-line-number" data-line-number="158"></td>
        <td id="file--LC158" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L159" class="blob-num js-line-number" data-line-number="159"></td>
        <td id="file--LC159" class="blob-code blob-code-inner js-file-line">예제)</td>
      </tr>
      <tr>
        <td id="file--L160" class="blob-num js-line-number" data-line-number="160"></td>
        <td id="file--LC160" class="blob-code blob-code-inner js-file-line">#1</td>
      </tr>
      <tr>
        <td id="file--L161" class="blob-num js-line-number" data-line-number="161"></td>
        <td id="file--LC161" class="blob-code blob-code-inner js-file-line">#include&lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L162" class="blob-num js-line-number" data-line-number="162"></td>
        <td id="file--LC162" class="blob-code blob-code-inner js-file-line">#include&lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L163" class="blob-num js-line-number" data-line-number="163"></td>
        <td id="file--LC163" class="blob-code blob-code-inner js-file-line">#include&lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L164" class="blob-num js-line-number" data-line-number="164"></td>
        <td id="file--LC164" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L165" class="blob-num js-line-number" data-line-number="165"></td>
        <td id="file--LC165" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; gcdlcm(int a,int b)</td>
      </tr>
      <tr>
        <td id="file--L166" class="blob-num js-line-number" data-line-number="166"></td>
        <td id="file--LC166" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L167" class="blob-num js-line-number" data-line-number="167"></td>
        <td id="file--LC167" class="blob-code blob-code-inner js-file-line">	vector&lt;int&gt; answer;</td>
      </tr>
      <tr>
        <td id="file--L168" class="blob-num js-line-number" data-line-number="168"></td>
        <td id="file--LC168" class="blob-code blob-code-inner js-file-line">    if(min(a,b)==a) swap(a,b);</td>
      </tr>
      <tr>
        <td id="file--L169" class="blob-num js-line-number" data-line-number="169"></td>
        <td id="file--LC169" class="blob-code blob-code-inner js-file-line">    int mod = a%b;</td>
      </tr>
      <tr>
        <td id="file--L170" class="blob-num js-line-number" data-line-number="170"></td>
        <td id="file--LC170" class="blob-code blob-code-inner js-file-line">    int c = a;</td>
      </tr>
      <tr>
        <td id="file--L171" class="blob-num js-line-number" data-line-number="171"></td>
        <td id="file--LC171" class="blob-code blob-code-inner js-file-line">    int d = b;</td>
      </tr>
      <tr>
        <td id="file--L172" class="blob-num js-line-number" data-line-number="172"></td>
        <td id="file--LC172" class="blob-code blob-code-inner js-file-line">    while(mod&gt;0) {</td>
      </tr>
      <tr>
        <td id="file--L173" class="blob-num js-line-number" data-line-number="173"></td>
        <td id="file--LC173" class="blob-code blob-code-inner js-file-line">        c = d;</td>
      </tr>
      <tr>
        <td id="file--L174" class="blob-num js-line-number" data-line-number="174"></td>
        <td id="file--LC174" class="blob-code blob-code-inner js-file-line">        d = mod;</td>
      </tr>
      <tr>
        <td id="file--L175" class="blob-num js-line-number" data-line-number="175"></td>
        <td id="file--LC175" class="blob-code blob-code-inner js-file-line">        mod = c%d;</td>
      </tr>
      <tr>
        <td id="file--L176" class="blob-num js-line-number" data-line-number="176"></td>
        <td id="file--LC176" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L177" class="blob-num js-line-number" data-line-number="177"></td>
        <td id="file--LC177" class="blob-code blob-code-inner js-file-line">    answer.push_back(d);</td>
      </tr>
      <tr>
        <td id="file--L178" class="blob-num js-line-number" data-line-number="178"></td>
        <td id="file--LC178" class="blob-code blob-code-inner js-file-line">    answer.push_back(a*b/d);</td>
      </tr>
      <tr>
        <td id="file--L179" class="blob-num js-line-number" data-line-number="179"></td>
        <td id="file--LC179" class="blob-code blob-code-inner js-file-line">	return answer;</td>
      </tr>
      <tr>
        <td id="file--L180" class="blob-num js-line-number" data-line-number="180"></td>
        <td id="file--LC180" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L181" class="blob-num js-line-number" data-line-number="181"></td>
        <td id="file--LC181" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L182" class="blob-num js-line-number" data-line-number="182"></td>
        <td id="file--LC182" class="blob-code blob-code-inner js-file-line">#2</td>
      </tr>
      <tr>
        <td id="file--L183" class="blob-num js-line-number" data-line-number="183"></td>
        <td id="file--LC183" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L184" class="blob-num js-line-number" data-line-number="184"></td>
        <td id="file--LC184" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L185" class="blob-num js-line-number" data-line-number="185"></td>
        <td id="file--LC185" class="blob-code blob-code-inner js-file-line">	int a=3, b=12;</td>
      </tr>
      <tr>
        <td id="file--L186" class="blob-num js-line-number" data-line-number="186"></td>
        <td id="file--LC186" class="blob-code blob-code-inner js-file-line">	vector&lt;int&gt; testAnswer = gcdlcm(a,b);</td>
      </tr>
      <tr>
        <td id="file--L187" class="blob-num js-line-number" data-line-number="187"></td>
        <td id="file--LC187" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L188" class="blob-num js-line-number" data-line-number="188"></td>
        <td id="file--LC188" class="blob-code blob-code-inner js-file-line">	cout&lt;&lt;testAnswer[0]&lt;&lt;&quot; &quot;&lt;&lt;testAnswer[1];</td>
      </tr>
      <tr>
        <td id="file--L189" class="blob-num js-line-number" data-line-number="189"></td>
        <td id="file--LC189" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L190" class="blob-num js-line-number" data-line-number="190"></td>
        <td id="file--LC190" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L191" class="blob-num js-line-number" data-line-number="191"></td>
        <td id="file--LC191" class="blob-code blob-code-inner js-file-line">int Euclidean(int a, int b)</td>
      </tr>
      <tr>
        <td id="file--L192" class="blob-num js-line-number" data-line-number="192"></td>
        <td id="file--LC192" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L193" class="blob-num js-line-number" data-line-number="193"></td>
        <td id="file--LC193" class="blob-code blob-code-inner js-file-line">    return b ? Euclidean(b, a%b) : a;</td>
      </tr>
      <tr>
        <td id="file--L194" class="blob-num js-line-number" data-line-number="194"></td>
        <td id="file--LC194" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L195" class="blob-num js-line-number" data-line-number="195"></td>
        <td id="file--LC195" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L196" class="blob-num js-line-number" data-line-number="196"></td>
        <td id="file--LC196" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; gcdlcm(int a,int b)</td>
      </tr>
      <tr>
        <td id="file--L197" class="blob-num js-line-number" data-line-number="197"></td>
        <td id="file--LC197" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L198" class="blob-num js-line-number" data-line-number="198"></td>
        <td id="file--LC198" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; answer;</td>
      </tr>
      <tr>
        <td id="file--L199" class="blob-num js-line-number" data-line-number="199"></td>
        <td id="file--LC199" class="blob-code blob-code-inner js-file-line">    // 유클리드 호제법</td>
      </tr>
      <tr>
        <td id="file--L200" class="blob-num js-line-number" data-line-number="200"></td>
        <td id="file--LC200" class="blob-code blob-code-inner js-file-line">  answer.push_back(Euclidean(a,b));</td>
      </tr>
      <tr>
        <td id="file--L201" class="blob-num js-line-number" data-line-number="201"></td>
        <td id="file--LC201" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L202" class="blob-num js-line-number" data-line-number="202"></td>
        <td id="file--LC202" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L203" class="blob-num js-line-number" data-line-number="203"></td>
        <td id="file--LC203" class="blob-code blob-code-inner js-file-line">■ 최소공배수 lcm = a * b / 최대공약수(gcd)</td>
      </tr>
      <tr>
        <td id="file--L204" class="blob-num js-line-number" data-line-number="204"></td>
        <td id="file--LC204" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L205" class="blob-num js-line-number" data-line-number="205"></td>
        <td id="file--LC205" class="blob-code blob-code-inner js-file-line">N개의 최소공배수 구하기</td>
      </tr>
      <tr>
        <td id="file--L206" class="blob-num js-line-number" data-line-number="206"></td>
        <td id="file--LC206" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L207" class="blob-num js-line-number" data-line-number="207"></td>
        <td id="file--LC207" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L208" class="blob-num js-line-number" data-line-number="208"></td>
        <td id="file--LC208" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L209" class="blob-num js-line-number" data-line-number="209"></td>
        <td id="file--LC209" class="blob-code blob-code-inner js-file-line">#include &lt;functional&gt;</td>
      </tr>
      <tr>
        <td id="file--L210" class="blob-num js-line-number" data-line-number="210"></td>
        <td id="file--LC210" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L211" class="blob-num js-line-number" data-line-number="211"></td>
        <td id="file--LC211" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L212" class="blob-num js-line-number" data-line-number="212"></td>
        <td id="file--LC212" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L213" class="blob-num js-line-number" data-line-number="213"></td>
        <td id="file--LC213" class="blob-code blob-code-inner js-file-line">int euclidean(int a, int b)</td>
      </tr>
      <tr>
        <td id="file--L214" class="blob-num js-line-number" data-line-number="214"></td>
        <td id="file--LC214" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L215" class="blob-num js-line-number" data-line-number="215"></td>
        <td id="file--LC215" class="blob-code blob-code-inner js-file-line">    return b ? euclidean(b, a%b) : a;</td>
      </tr>
      <tr>
        <td id="file--L216" class="blob-num js-line-number" data-line-number="216"></td>
        <td id="file--LC216" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L217" class="blob-num js-line-number" data-line-number="217"></td>
        <td id="file--LC217" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L218" class="blob-num js-line-number" data-line-number="218"></td>
        <td id="file--LC218" class="blob-code blob-code-inner js-file-line">int lcm(int a, int b)</td>
      </tr>
      <tr>
        <td id="file--L219" class="blob-num js-line-number" data-line-number="219"></td>
        <td id="file--LC219" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L220" class="blob-num js-line-number" data-line-number="220"></td>
        <td id="file--LC220" class="blob-code blob-code-inner js-file-line">    return a*b/euclidean(a,b);</td>
      </tr>
      <tr>
        <td id="file--L221" class="blob-num js-line-number" data-line-number="221"></td>
        <td id="file--LC221" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L222" class="blob-num js-line-number" data-line-number="222"></td>
        <td id="file--LC222" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L223" class="blob-num js-line-number" data-line-number="223"></td>
        <td id="file--LC223" class="blob-code blob-code-inner js-file-line">int solution(vector&lt;int&gt; arr) {</td>
      </tr>
      <tr>
        <td id="file--L224" class="blob-num js-line-number" data-line-number="224"></td>
        <td id="file--LC224" class="blob-code blob-code-inner js-file-line">    sort(arr.begin(),arr.end(),greater&lt;int&gt;());</td>
      </tr>
      <tr>
        <td id="file--L225" class="blob-num js-line-number" data-line-number="225"></td>
        <td id="file--LC225" class="blob-code blob-code-inner js-file-line">    int answer = arr[0];</td>
      </tr>
      <tr>
        <td id="file--L226" class="blob-num js-line-number" data-line-number="226"></td>
        <td id="file--LC226" class="blob-code blob-code-inner js-file-line">    int arrSize = arr.size();</td>
      </tr>
      <tr>
        <td id="file--L227" class="blob-num js-line-number" data-line-number="227"></td>
        <td id="file--LC227" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L228" class="blob-num js-line-number" data-line-number="228"></td>
        <td id="file--LC228" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;arrSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L229" class="blob-num js-line-number" data-line-number="229"></td>
        <td id="file--LC229" class="blob-code blob-code-inner js-file-line">        answer = lcm(answer, arr[i]);</td>
      </tr>
      <tr>
        <td id="file--L230" class="blob-num js-line-number" data-line-number="230"></td>
        <td id="file--LC230" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L231" class="blob-num js-line-number" data-line-number="231"></td>
        <td id="file--LC231" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L232" class="blob-num js-line-number" data-line-number="232"></td>
        <td id="file--LC232" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L233" class="blob-num js-line-number" data-line-number="233"></td>
        <td id="file--LC233" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L234" class="blob-num js-line-number" data-line-number="234"></td>
        <td id="file--LC234" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L235" class="blob-num js-line-number" data-line-number="235"></td>
        <td id="file--LC235" class="blob-code blob-code-inner js-file-line">■ 피보나치수열</td>
      </tr>
      <tr>
        <td id="file--L236" class="blob-num js-line-number" data-line-number="236"></td>
        <td id="file--LC236" class="blob-code blob-code-inner js-file-line">- 2, 1짜리로 n을 체우는 경우의 수 문제는 피보나치 수열로 풀 수 있다고 보면 된다.</td>
      </tr>
      <tr>
        <td id="file--L237" class="blob-num js-line-number" data-line-number="237"></td>
        <td id="file--LC237" class="blob-code blob-code-inner js-file-line">- ex) 점프 2,1 n칸 건너기, 타일링 2x1 짜리로 n칸 체우기</td>
      </tr>
      <tr>
        <td id="file--L238" class="blob-num js-line-number" data-line-number="238"></td>
        <td id="file--LC238" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L239" class="blob-num js-line-number" data-line-number="239"></td>
        <td id="file--LC239" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L240" class="blob-num js-line-number" data-line-number="240"></td>
        <td id="file--LC240" class="blob-code blob-code-inner js-file-line">1. 재귀형식</td>
      </tr>
      <tr>
        <td id="file--L241" class="blob-num js-line-number" data-line-number="241"></td>
        <td id="file--LC241" class="blob-code blob-code-inner js-file-line">0, 1, 1, 2, 3, 5, 8, ... 이므로 n이 1보다 작으면 n을 아니면 점화식 따라간다.</td>
      </tr>
      <tr>
        <td id="file--L242" class="blob-num js-line-number" data-line-number="242"></td>
        <td id="file--LC242" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L243" class="blob-num js-line-number" data-line-number="243"></td>
        <td id="file--LC243" class="blob-code blob-code-inner js-file-line">int fibonacci(int n){</td>
      </tr>
      <tr>
        <td id="file--L244" class="blob-num js-line-number" data-line-number="244"></td>
        <td id="file--LC244" class="blob-code blob-code-inner js-file-line">    if(n&lt;=1) return n;</td>
      </tr>
      <tr>
        <td id="file--L245" class="blob-num js-line-number" data-line-number="245"></td>
        <td id="file--LC245" class="blob-code blob-code-inner js-file-line">    else return fibonacci(n-2)+fibonacci(n-1);</td>
      </tr>
      <tr>
        <td id="file--L246" class="blob-num js-line-number" data-line-number="246"></td>
        <td id="file--LC246" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L247" class="blob-num js-line-number" data-line-number="247"></td>
        <td id="file--LC247" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L248" class="blob-num js-line-number" data-line-number="248"></td>
        <td id="file--LC248" class="blob-code blob-code-inner js-file-line">이렇게 만들어진 형식은 아무래도 함수 호출당 함수 호출 수가 각 2배씩 늘어나므로 O(2^n) 시간복잡도</td>
      </tr>
      <tr>
        <td id="file--L249" class="blob-num js-line-number" data-line-number="249"></td>
        <td id="file--LC249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L250" class="blob-num js-line-number" data-line-number="250"></td>
        <td id="file--LC250" class="blob-code blob-code-inner js-file-line">2. 재귀 + 저장을 이용한 방식</td>
      </tr>
      <tr>
        <td id="file--L251" class="blob-num js-line-number" data-line-number="251"></td>
        <td id="file--LC251" class="blob-code blob-code-inner js-file-line">재귀적인 호출에서 중복으로 호출이 되는 fibonacci 함수들이 있다</td>
      </tr>
      <tr>
        <td id="file--L252" class="blob-num js-line-number" data-line-number="252"></td>
        <td id="file--LC252" class="blob-code blob-code-inner js-file-line">예를 들면 f(4)를 호출했을 때 f(3)과 f(2)가 호출되고, f(3)에서 f(2), f(1)이 호출</td>
      </tr>
      <tr>
        <td id="file--L253" class="blob-num js-line-number" data-line-number="253"></td>
        <td id="file--LC253" class="blob-code blob-code-inner js-file-line">여기까지만 봐도 f(2)가 두 번 등장함 값을 저장해 놓고, 다음 호출에서는 값을 호출</td>
      </tr>
      <tr>
        <td id="file--L254" class="blob-num js-line-number" data-line-number="254"></td>
        <td id="file--LC254" class="blob-code blob-code-inner js-file-line">시간이 많이 줄어듬, n인 경우 f(0)부터 f(n-1)까지 한번씩만 계산이 될것이므로 시간복잡도는 O(n) (중복된 호출은 O(1)시간에 끝나기 때문)</td>
      </tr>
      <tr>
        <td id="file--L255" class="blob-num js-line-number" data-line-number="255"></td>
        <td id="file--LC255" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L256" class="blob-num js-line-number" data-line-number="256"></td>
        <td id="file--LC256" class="blob-code blob-code-inner js-file-line">int fibonacci(int n){</td>
      </tr>
      <tr>
        <td id="file--L257" class="blob-num js-line-number" data-line-number="257"></td>
        <td id="file--LC257" class="blob-code blob-code-inner js-file-line">    if(n&lt;=1) return n;</td>
      </tr>
      <tr>
        <td id="file--L258" class="blob-num js-line-number" data-line-number="258"></td>
        <td id="file--LC258" class="blob-code blob-code-inner js-file-line">    else if(m[n]) return m[n];</td>
      </tr>
      <tr>
        <td id="file--L259" class="blob-num js-line-number" data-line-number="259"></td>
        <td id="file--LC259" class="blob-code blob-code-inner js-file-line">    else return m[n] = fibonacci(n-1)+fibonacci(n-2);</td>
      </tr>
      <tr>
        <td id="file--L260" class="blob-num js-line-number" data-line-number="260"></td>
        <td id="file--LC260" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L261" class="blob-num js-line-number" data-line-number="261"></td>
        <td id="file--LC261" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L262" class="blob-num js-line-number" data-line-number="262"></td>
        <td id="file--LC262" class="blob-code blob-code-inner js-file-line">3. For-loop을 이용한 방식</td>
      </tr>
      <tr>
        <td id="file--L263" class="blob-num js-line-number" data-line-number="263"></td>
        <td id="file--LC263" class="blob-code blob-code-inner js-file-line">이 방식은 위의 재귀 + 저장 방식을 unroll한 방식.</td>
      </tr>
      <tr>
        <td id="file--L264" class="blob-num js-line-number" data-line-number="264"></td>
        <td id="file--LC264" class="blob-code blob-code-inner js-file-line">피보나치 수열의 일반항을 그대로 0번째 부터 쭉 계산해 나가는 방식.</td>
      </tr>
      <tr>
        <td id="file--L265" class="blob-num js-line-number" data-line-number="265"></td>
        <td id="file--LC265" class="blob-code blob-code-inner js-file-line">이 방법 역시 시간복잡도는 O(n) </td>
      </tr>
      <tr>
        <td id="file--L266" class="blob-num js-line-number" data-line-number="266"></td>
        <td id="file--LC266" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L267" class="blob-num js-line-number" data-line-number="267"></td>
        <td id="file--LC267" class="blob-code blob-code-inner js-file-line">int fibonacci(int n){</td>
      </tr>
      <tr>
        <td id="file--L268" class="blob-num js-line-number" data-line-number="268"></td>
        <td id="file--LC268" class="blob-code blob-code-inner js-file-line">    int f[n+1] = {0, 1};</td>
      </tr>
      <tr>
        <td id="file--L269" class="blob-num js-line-number" data-line-number="269"></td>
        <td id="file--LC269" class="blob-code blob-code-inner js-file-line">    for(int i = 2; i &lt;= n; i++){</td>
      </tr>
      <tr>
        <td id="file--L270" class="blob-num js-line-number" data-line-number="270"></td>
        <td id="file--LC270" class="blob-code blob-code-inner js-file-line">        f[i] = f[i-1]+f[i-2];</td>
      </tr>
      <tr>
        <td id="file--L271" class="blob-num js-line-number" data-line-number="271"></td>
        <td id="file--LC271" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L272" class="blob-num js-line-number" data-line-number="272"></td>
        <td id="file--LC272" class="blob-code blob-code-inner js-file-line">    return f[n];</td>
      </tr>
      <tr>
        <td id="file--L273" class="blob-num js-line-number" data-line-number="273"></td>
        <td id="file--LC273" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L274" class="blob-num js-line-number" data-line-number="274"></td>
        <td id="file--LC274" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L275" class="blob-num js-line-number" data-line-number="275"></td>
        <td id="file--LC275" class="blob-code blob-code-inner js-file-line">4. 큰 피보나치 수의 나머지(피사노 주기)</td>
      </tr>
      <tr>
        <td id="file--L276" class="blob-num js-line-number" data-line-number="276"></td>
        <td id="file--LC276" class="blob-code blob-code-inner js-file-line">문제 중에는 구하려는 수가 너무 커서 일정한 숫자 K의 나머지로 구하라는 문제가 있다.</td>
      </tr>
      <tr>
        <td id="file--L277" class="blob-num js-line-number" data-line-number="277"></td>
        <td id="file--LC277" class="blob-code blob-code-inner js-file-line">[피사노 주기]</td>
      </tr>
      <tr>
        <td id="file--L278" class="blob-num js-line-number" data-line-number="278"></td>
        <td id="file--LC278" class="blob-code blob-code-inner js-file-line">  피보나치 수를 K로 나눈 나머지는 항상 주기를 가지게 된다. 이 주기를 피사노 주기.</td>
      </tr>
      <tr>
        <td id="file--L279" class="blob-num js-line-number" data-line-number="279"></td>
        <td id="file--LC279" class="blob-code blob-code-inner js-file-line">  특히 K가 10의  m승이고, m&gt;2라면 주기는 15 x K/10.</td>
      </tr>
      <tr>
        <td id="file--L280" class="blob-num js-line-number" data-line-number="280"></td>
        <td id="file--LC280" class="blob-code blob-code-inner js-file-line">  만약 K = 1,000,000 이라면 m = 6 이고 주기는 1,500,000. </td>
      </tr>
      <tr>
        <td id="file--L281" class="blob-num js-line-number" data-line-number="281"></td>
        <td id="file--LC281" class="blob-code blob-code-inner js-file-line">즉 1,500,000번째까지 나머지만 잘 구해놓으면 그 이상의 수는 주기성을 이용하여 금방 구할 수 있게 됨. </td>
      </tr>
      <tr>
        <td id="file--L282" class="blob-num js-line-number" data-line-number="282"></td>
        <td id="file--LC282" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L283" class="blob-num js-line-number" data-line-number="283"></td>
        <td id="file--LC283" class="blob-code blob-code-inner js-file-line">#define P 1500000</td>
      </tr>
      <tr>
        <td id="file--L284" class="blob-num js-line-number" data-line-number="284"></td>
        <td id="file--LC284" class="blob-code blob-code-inner js-file-line">#define K 1000000</td>
      </tr>
      <tr>
        <td id="file--L285" class="blob-num js-line-number" data-line-number="285"></td>
        <td id="file--LC285" class="blob-code blob-code-inner js-file-line">int fibonacci(long long n){</td>
      </tr>
      <tr>
        <td id="file--L286" class="blob-num js-line-number" data-line-number="286"></td>
        <td id="file--LC286" class="blob-code blob-code-inner js-file-line">    n %= P;</td>
      </tr>
      <tr>
        <td id="file--L287" class="blob-num js-line-number" data-line-number="287"></td>
        <td id="file--LC287" class="blob-code blob-code-inner js-file-line">    int f[n+1] = {0, 1};</td>
      </tr>
      <tr>
        <td id="file--L288" class="blob-num js-line-number" data-line-number="288"></td>
        <td id="file--LC288" class="blob-code blob-code-inner js-file-line">    for(int i = 2; i &lt;= n; i++){</td>
      </tr>
      <tr>
        <td id="file--L289" class="blob-num js-line-number" data-line-number="289"></td>
        <td id="file--LC289" class="blob-code blob-code-inner js-file-line">        f[i] = f[i-1] +f[i-2];</td>
      </tr>
      <tr>
        <td id="file--L290" class="blob-num js-line-number" data-line-number="290"></td>
        <td id="file--LC290" class="blob-code blob-code-inner js-file-line">        f[i] %= K;</td>
      </tr>
      <tr>
        <td id="file--L291" class="blob-num js-line-number" data-line-number="291"></td>
        <td id="file--LC291" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L292" class="blob-num js-line-number" data-line-number="292"></td>
        <td id="file--LC292" class="blob-code blob-code-inner js-file-line">    return f[n];</td>
      </tr>
      <tr>
        <td id="file--L293" class="blob-num js-line-number" data-line-number="293"></td>
        <td id="file--LC293" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L294" class="blob-num js-line-number" data-line-number="294"></td>
        <td id="file--LC294" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L295" class="blob-num js-line-number" data-line-number="295"></td>
        <td id="file--LC295" class="blob-code blob-code-inner js-file-line">5. 피보나치 관계식의 행렬표현</td>
      </tr>
      <tr>
        <td id="file--L296" class="blob-num js-line-number" data-line-number="296"></td>
        <td id="file--LC296" class="blob-code blob-code-inner js-file-line">나머지 연산을 하라는데 10의 거듭제곱이 아니라면?</td>
      </tr>
      <tr>
        <td id="file--L297" class="blob-num js-line-number" data-line-number="297"></td>
        <td id="file--LC297" class="blob-code blob-code-inner js-file-line">그럴땐 관계식을 행렬로 표현하는 방식을 사용.</td>
      </tr>
      <tr>
        <td id="file--L298" class="blob-num js-line-number" data-line-number="298"></td>
        <td id="file--LC298" class="blob-code blob-code-inner js-file-line">=&gt; F_n+2 = F_n+1 + F_n, n&gt;= 0</td>
      </tr>
      <tr>
        <td id="file--L299" class="blob-num js-line-number" data-line-number="299"></td>
        <td id="file--LC299" class="blob-code blob-code-inner js-file-line">=&gt; F_n+2 = (1 1)(F_n+1 </td>
      </tr>
      <tr>
        <td id="file--L300" class="blob-num js-line-number" data-line-number="300"></td>
        <td id="file--LC300" class="blob-code blob-code-inner js-file-line">                 F_n  )             </td>
      </tr>
      <tr>
        <td id="file--L301" class="blob-num js-line-number" data-line-number="301"></td>
        <td id="file--LC301" class="blob-code blob-code-inner js-file-line">=&gt; (F_n+2  = (1 1  (F_n+1 </td>
      </tr>
      <tr>
        <td id="file--L302" class="blob-num js-line-number" data-line-number="302"></td>
        <td id="file--LC302" class="blob-code blob-code-inner js-file-line">    F_n+1)    1 0)  F_n  )</td>
      </tr>
      <tr>
        <td id="file--L303" class="blob-num js-line-number" data-line-number="303"></td>
        <td id="file--LC303" class="blob-code blob-code-inner js-file-line">=&gt; (F_n    = (1 1 ^n-1 (F_1 </td>
      </tr>
      <tr>
        <td id="file--L304" class="blob-num js-line-number" data-line-number="304"></td>
        <td id="file--LC304" class="blob-code blob-code-inner js-file-line">    F_n-1)    1 0)      F_0) , n&gt;=1 </td>
      </tr>
      <tr>
        <td id="file--L305" class="blob-num js-line-number" data-line-number="305"></td>
        <td id="file--LC305" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L306" class="blob-num js-line-number" data-line-number="306"></td>
        <td id="file--LC306" class="blob-code blob-code-inner js-file-line">결론</td>
      </tr>
      <tr>
        <td id="file--L307" class="blob-num js-line-number" data-line-number="307"></td>
        <td id="file--LC307" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L308" class="blob-num js-line-number" data-line-number="308"></td>
        <td id="file--LC308" class="blob-code blob-code-inner js-file-line">(F_n+1 F_n    = (1 1 ^n  </td>
      </tr>
      <tr>
        <td id="file--L309" class="blob-num js-line-number" data-line-number="309"></td>
        <td id="file--LC309" class="blob-code blob-code-inner js-file-line">(F_n   F_n-1)    1 0)   , n&gt;=1</td>
      </tr>
      <tr>
        <td id="file--L310" class="blob-num js-line-number" data-line-number="310"></td>
        <td id="file--LC310" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L311" class="blob-num js-line-number" data-line-number="311"></td>
        <td id="file--LC311" class="blob-code blob-code-inner js-file-line">{{1,1},{1,0}}의 n승의 성분을 통해 피보나치 수를 알아낼 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L312" class="blob-num js-line-number" data-line-number="312"></td>
        <td id="file--LC312" class="blob-code blob-code-inner js-file-line">이렇게 할 경우 O(n)</td>
      </tr>
      <tr>
        <td id="file--L313" class="blob-num js-line-number" data-line-number="313"></td>
        <td id="file--LC313" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L314" class="blob-num js-line-number" data-line-number="314"></td>
        <td id="file--LC314" class="blob-code blob-code-inner js-file-line">추가적으로 거듭제곱의 계산은 거듭제곱 수 n의 이진표현을 통해 빠르게 계산할 수 있는데 이 경우 시간복잡도는 O(log(n))</td>
      </tr>
      <tr>
        <td id="file--L315" class="blob-num js-line-number" data-line-number="315"></td>
        <td id="file--LC315" class="blob-code blob-code-inner js-file-line">x^n/2 + x^n/2 = x^n 이므로 n이 홀수일 때 해당 x를 곱해주는 것 여기선 res{{1,0}{0,1}}</td>
      </tr>
      <tr>
        <td id="file--L316" class="blob-num js-line-number" data-line-number="316"></td>
        <td id="file--LC316" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L317" class="blob-num js-line-number" data-line-number="317"></td>
        <td id="file--LC317" class="blob-code blob-code-inner js-file-line">#include&lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L318" class="blob-num js-line-number" data-line-number="318"></td>
        <td id="file--LC318" class="blob-code blob-code-inner js-file-line">#include&lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L319" class="blob-num js-line-number" data-line-number="319"></td>
        <td id="file--LC319" class="blob-code blob-code-inner js-file-line">#define mod 1000000007LL</td>
      </tr>
      <tr>
        <td id="file--L320" class="blob-num js-line-number" data-line-number="320"></td>
        <td id="file--LC320" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L321" class="blob-num js-line-number" data-line-number="321"></td>
        <td id="file--LC321" class="blob-code blob-code-inner js-file-line">typedef vector&lt;vector&lt;long long&gt; &gt; matrix;</td>
      </tr>
      <tr>
        <td id="file--L322" class="blob-num js-line-number" data-line-number="322"></td>
        <td id="file--LC322" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L323" class="blob-num js-line-number" data-line-number="323"></td>
        <td id="file--LC323" class="blob-code blob-code-inner js-file-line">matrix operator*(matrix&amp;a, matrix&amp;b) {</td>
      </tr>
      <tr>
        <td id="file--L324" class="blob-num js-line-number" data-line-number="324"></td>
        <td id="file--LC324" class="blob-code blob-code-inner js-file-line">    int n = a.size();</td>
      </tr>
      <tr>
        <td id="file--L325" class="blob-num js-line-number" data-line-number="325"></td>
        <td id="file--LC325" class="blob-code blob-code-inner js-file-line">    matrix c(n, vector&lt;long long&gt;(n));</td>
      </tr>
      <tr>
        <td id="file--L326" class="blob-num js-line-number" data-line-number="326"></td>
        <td id="file--LC326" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; n; i++) {</td>
      </tr>
      <tr>
        <td id="file--L327" class="blob-num js-line-number" data-line-number="327"></td>
        <td id="file--LC327" class="blob-code blob-code-inner js-file-line">        for (int j = 0; j &lt; n; j++) {</td>
      </tr>
      <tr>
        <td id="file--L328" class="blob-num js-line-number" data-line-number="328"></td>
        <td id="file--LC328" class="blob-code blob-code-inner js-file-line">            for(int k = 0 ; k &lt; n; k++){</td>
      </tr>
      <tr>
        <td id="file--L329" class="blob-num js-line-number" data-line-number="329"></td>
        <td id="file--LC329" class="blob-code blob-code-inner js-file-line">                c[i][j] += a[i][k] * b[k][j];</td>
      </tr>
      <tr>
        <td id="file--L330" class="blob-num js-line-number" data-line-number="330"></td>
        <td id="file--LC330" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L331" class="blob-num js-line-number" data-line-number="331"></td>
        <td id="file--LC331" class="blob-code blob-code-inner js-file-line">            c[i][j] %= mod;</td>
      </tr>
      <tr>
        <td id="file--L332" class="blob-num js-line-number" data-line-number="332"></td>
        <td id="file--LC332" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L333" class="blob-num js-line-number" data-line-number="333"></td>
        <td id="file--LC333" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L334" class="blob-num js-line-number" data-line-number="334"></td>
        <td id="file--LC334" class="blob-code blob-code-inner js-file-line">    return c;</td>
      </tr>
      <tr>
        <td id="file--L335" class="blob-num js-line-number" data-line-number="335"></td>
        <td id="file--LC335" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L336" class="blob-num js-line-number" data-line-number="336"></td>
        <td id="file--LC336" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L337" class="blob-num js-line-number" data-line-number="337"></td>
        <td id="file--LC337" class="blob-code blob-code-inner js-file-line">int main() {</td>
      </tr>
      <tr>
        <td id="file--L338" class="blob-num js-line-number" data-line-number="338"></td>
        <td id="file--LC338" class="blob-code blob-code-inner js-file-line">    long long n;</td>
      </tr>
      <tr>
        <td id="file--L339" class="blob-num js-line-number" data-line-number="339"></td>
        <td id="file--LC339" class="blob-code blob-code-inner js-file-line">    matrix res = { {1, 0},{0, 1} };</td>
      </tr>
      <tr>
        <td id="file--L340" class="blob-num js-line-number" data-line-number="340"></td>
        <td id="file--LC340" class="blob-code blob-code-inner js-file-line">    matrix x = { {1, 1},{1, 0} };</td>
      </tr>
      <tr>
        <td id="file--L341" class="blob-num js-line-number" data-line-number="341"></td>
        <td id="file--LC341" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%lld&quot;, &amp;n);</td>
      </tr>
      <tr>
        <td id="file--L342" class="blob-num js-line-number" data-line-number="342"></td>
        <td id="file--LC342" class="blob-code blob-code-inner js-file-line">    while (n) {</td>
      </tr>
      <tr>
        <td id="file--L343" class="blob-num js-line-number" data-line-number="343"></td>
        <td id="file--LC343" class="blob-code blob-code-inner js-file-line">        if (n % 2 == 1) {</td>
      </tr>
      <tr>
        <td id="file--L344" class="blob-num js-line-number" data-line-number="344"></td>
        <td id="file--LC344" class="blob-code blob-code-inner js-file-line">            res = res * x;</td>
      </tr>
      <tr>
        <td id="file--L345" class="blob-num js-line-number" data-line-number="345"></td>
        <td id="file--LC345" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L346" class="blob-num js-line-number" data-line-number="346"></td>
        <td id="file--LC346" class="blob-code blob-code-inner js-file-line">        x = x*x;</td>
      </tr>
      <tr>
        <td id="file--L347" class="blob-num js-line-number" data-line-number="347"></td>
        <td id="file--LC347" class="blob-code blob-code-inner js-file-line">        n *= 0.5;</td>
      </tr>
      <tr>
        <td id="file--L348" class="blob-num js-line-number" data-line-number="348"></td>
        <td id="file--LC348" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L349" class="blob-num js-line-number" data-line-number="349"></td>
        <td id="file--LC349" class="blob-code blob-code-inner js-file-line">    printf(&quot;%lld\n&quot;, res[0][1]);</td>
      </tr>
      <tr>
        <td id="file--L350" class="blob-num js-line-number" data-line-number="350"></td>
        <td id="file--LC350" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L351" class="blob-num js-line-number" data-line-number="351"></td>
        <td id="file--LC351" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L352" class="blob-num js-line-number" data-line-number="352"></td>
        <td id="file--LC352" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L353" class="blob-num js-line-number" data-line-number="353"></td>
        <td id="file--LC353" class="blob-code blob-code-inner js-file-line">내가 구현한 c++</td>
      </tr>
      <tr>
        <td id="file--L354" class="blob-num js-line-number" data-line-number="354"></td>
        <td id="file--LC354" class="blob-code blob-code-inner js-file-line">#include&lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L355" class="blob-num js-line-number" data-line-number="355"></td>
        <td id="file--LC355" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L356" class="blob-num js-line-number" data-line-number="356"></td>
        <td id="file--LC356" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L357" class="blob-num js-line-number" data-line-number="357"></td>
        <td id="file--LC357" class="blob-code blob-code-inner js-file-line">typedef vector&lt;vector&lt;long long&gt;&gt; matrix;</td>
      </tr>
      <tr>
        <td id="file--L358" class="blob-num js-line-number" data-line-number="358"></td>
        <td id="file--LC358" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L359" class="blob-num js-line-number" data-line-number="359"></td>
        <td id="file--LC359" class="blob-code blob-code-inner js-file-line">matrix operator* (matrix &amp;a, matrix &amp;b) {</td>
      </tr>
      <tr>
        <td id="file--L360" class="blob-num js-line-number" data-line-number="360"></td>
        <td id="file--LC360" class="blob-code blob-code-inner js-file-line">    int n = a.size();</td>
      </tr>
      <tr>
        <td id="file--L361" class="blob-num js-line-number" data-line-number="361"></td>
        <td id="file--LC361" class="blob-code blob-code-inner js-file-line">    matrix c(n, vector&lt;long long&gt;(n));</td>
      </tr>
      <tr>
        <td id="file--L362" class="blob-num js-line-number" data-line-number="362"></td>
        <td id="file--LC362" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;n; i++)</td>
      </tr>
      <tr>
        <td id="file--L363" class="blob-num js-line-number" data-line-number="363"></td>
        <td id="file--LC363" class="blob-code blob-code-inner js-file-line">        for(int j=0; j&lt;n; j++)</td>
      </tr>
      <tr>
        <td id="file--L364" class="blob-num js-line-number" data-line-number="364"></td>
        <td id="file--LC364" class="blob-code blob-code-inner js-file-line">            for(int k=0; k&lt;n; k++)</td>
      </tr>
      <tr>
        <td id="file--L365" class="blob-num js-line-number" data-line-number="365"></td>
        <td id="file--LC365" class="blob-code blob-code-inner js-file-line">                c[i][j] += a[i][k] * b[k][j];</td>
      </tr>
      <tr>
        <td id="file--L366" class="blob-num js-line-number" data-line-number="366"></td>
        <td id="file--LC366" class="blob-code blob-code-inner js-file-line">    return c;</td>
      </tr>
      <tr>
        <td id="file--L367" class="blob-num js-line-number" data-line-number="367"></td>
        <td id="file--LC367" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L368" class="blob-num js-line-number" data-line-number="368"></td>
        <td id="file--LC368" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L369" class="blob-num js-line-number" data-line-number="369"></td>
        <td id="file--LC369" class="blob-code blob-code-inner js-file-line">long long solution(int N) {</td>
      </tr>
      <tr>
        <td id="file--L370" class="blob-num js-line-number" data-line-number="370"></td>
        <td id="file--LC370" class="blob-code blob-code-inner js-file-line">    long long answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L371" class="blob-num js-line-number" data-line-number="371"></td>
        <td id="file--LC371" class="blob-code blob-code-inner js-file-line">    matrix res = {{1, 0},{0, 1}};</td>
      </tr>
      <tr>
        <td id="file--L372" class="blob-num js-line-number" data-line-number="372"></td>
        <td id="file--LC372" class="blob-code blob-code-inner js-file-line">    matrix fib = {{1, 1},{1, 0}};</td>
      </tr>
      <tr>
        <td id="file--L373" class="blob-num js-line-number" data-line-number="373"></td>
        <td id="file--LC373" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L374" class="blob-num js-line-number" data-line-number="374"></td>
        <td id="file--LC374" class="blob-code blob-code-inner js-file-line">    while(N) {</td>
      </tr>
      <tr>
        <td id="file--L375" class="blob-num js-line-number" data-line-number="375"></td>
        <td id="file--LC375" class="blob-code blob-code-inner js-file-line">        if(N&amp;1) res = res * fib;</td>
      </tr>
      <tr>
        <td id="file--L376" class="blob-num js-line-number" data-line-number="376"></td>
        <td id="file--LC376" class="blob-code blob-code-inner js-file-line">        fib = fib * fib;</td>
      </tr>
      <tr>
        <td id="file--L377" class="blob-num js-line-number" data-line-number="377"></td>
        <td id="file--LC377" class="blob-code blob-code-inner js-file-line">        N *= 0.5;</td>
      </tr>
      <tr>
        <td id="file--L378" class="blob-num js-line-number" data-line-number="378"></td>
        <td id="file--LC378" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L379" class="blob-num js-line-number" data-line-number="379"></td>
        <td id="file--LC379" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L380" class="blob-num js-line-number" data-line-number="380"></td>
        <td id="file--LC380" class="blob-code blob-code-inner js-file-line">    return answer= res[0][1];</td>
      </tr>
      <tr>
        <td id="file--L381" class="blob-num js-line-number" data-line-number="381"></td>
        <td id="file--LC381" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L382" class="blob-num js-line-number" data-line-number="382"></td>
        <td id="file--LC382" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L383" class="blob-num js-line-number" data-line-number="383"></td>
        <td id="file--LC383" class="blob-code blob-code-inner js-file-line">■ 삼각수 (Triangular Number)</td>
      </tr>
      <tr>
        <td id="file--L384" class="blob-num js-line-number" data-line-number="384"></td>
        <td id="file--LC384" class="blob-code blob-code-inner js-file-line">삼각수는 </td>
      </tr>
      <tr>
        <td id="file--L385" class="blob-num js-line-number" data-line-number="385"></td>
        <td id="file--LC385" class="blob-code blob-code-inner js-file-line">A+B&gt;C, A+C&gt;B, B+C&gt;A 모두 만족했을 때 그 3수를 삼각수라고 하는데 쉽게 삼각수를 판별하기위해 오름차순으로 정렬 후</td>
      </tr>
      <tr>
        <td id="file--L386" class="blob-num js-line-number" data-line-number="386"></td>
        <td id="file--LC386" class="blob-code blob-code-inner js-file-line">A,B,C순이라면 A+B&gt;C만 만족하면 삼각수라는 것을 구할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L387" class="blob-num js-line-number" data-line-number="387"></td>
        <td id="file--LC387" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L388" class="blob-num js-line-number" data-line-number="388"></td>
        <td id="file--LC388" class="blob-code blob-code-inner js-file-line">■ 3수의 부분곱의 최댓값</td>
      </tr>
      <tr>
        <td id="file--L389" class="blob-num js-line-number" data-line-number="389"></td>
        <td id="file--LC389" class="blob-code blob-code-inner js-file-line">그냥 정렬해서 음수일때나 양수일때 상관없이 가장 작은수 3개 큰 수 3개의 곱을 구해서 둘중에 큰 것이 최댓값이 된다. </td>
      </tr>
      <tr>
        <td id="file--L390" class="blob-num js-line-number" data-line-number="390"></td>
        <td id="file--LC390" class="blob-code blob-code-inner js-file-line">[풀이]</td>
      </tr>
      <tr>
        <td id="file--L391" class="blob-num js-line-number" data-line-number="391"></td>
        <td id="file--LC391" class="blob-code blob-code-inner js-file-line">import java.util.*;</td>
      </tr>
      <tr>
        <td id="file--L392" class="blob-num js-line-number" data-line-number="392"></td>
        <td id="file--LC392" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L393" class="blob-num js-line-number" data-line-number="393"></td>
        <td id="file--LC393" class="blob-code blob-code-inner js-file-line">class Solution {</td>
      </tr>
      <tr>
        <td id="file--L394" class="blob-num js-line-number" data-line-number="394"></td>
        <td id="file--LC394" class="blob-code blob-code-inner js-file-line">   public int solution(int[] A) {</td>
      </tr>
      <tr>
        <td id="file--L395" class="blob-num js-line-number" data-line-number="395"></td>
        <td id="file--LC395" class="blob-code blob-code-inner js-file-line">        // find 3 max</td>
      </tr>
      <tr>
        <td id="file--L396" class="blob-num js-line-number" data-line-number="396"></td>
        <td id="file--LC396" class="blob-code blob-code-inner js-file-line">        int N = A.length;</td>
      </tr>
      <tr>
        <td id="file--L397" class="blob-num js-line-number" data-line-number="397"></td>
        <td id="file--LC397" class="blob-code blob-code-inner js-file-line">        Arrays.sort(A);</td>
      </tr>
      <tr>
        <td id="file--L398" class="blob-num js-line-number" data-line-number="398"></td>
        <td id="file--LC398" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L399" class="blob-num js-line-number" data-line-number="399"></td>
        <td id="file--LC399" class="blob-code blob-code-inner js-file-line">        int result1 = A[N-3] * A[N-2] * A[N-1];</td>
      </tr>
      <tr>
        <td id="file--L400" class="blob-num js-line-number" data-line-number="400"></td>
        <td id="file--LC400" class="blob-code blob-code-inner js-file-line">        int result2 = A[0] * A[1] * A[N-1];</td>
      </tr>
      <tr>
        <td id="file--L401" class="blob-num js-line-number" data-line-number="401"></td>
        <td id="file--LC401" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L402" class="blob-num js-line-number" data-line-number="402"></td>
        <td id="file--LC402" class="blob-code blob-code-inner js-file-line">        return result1 &gt; result2 ? result1 : result2;</td>
      </tr>
      <tr>
        <td id="file--L403" class="blob-num js-line-number" data-line-number="403"></td>
        <td id="file--LC403" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L404" class="blob-num js-line-number" data-line-number="404"></td>
        <td id="file--LC404" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L405" class="blob-num js-line-number" data-line-number="405"></td>
        <td id="file--LC405" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L406" class="blob-num js-line-number" data-line-number="406"></td>
        <td id="file--LC406" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L407" class="blob-num js-line-number" data-line-number="407"></td>
        <td id="file--LC407" class="blob-code blob-code-inner js-file-line">■ 하샤드 수</td>
      </tr>
      <tr>
        <td id="file--L408" class="blob-num js-line-number" data-line-number="408"></td>
        <td id="file--LC408" class="blob-code blob-code-inner js-file-line">양의 정수 x가 하샤드 수이려면 x의 자릿수의 합으로 x가 나누어져야 합니다.</td>
      </tr>
      <tr>
        <td id="file--L409" class="blob-num js-line-number" data-line-number="409"></td>
        <td id="file--LC409" class="blob-code blob-code-inner js-file-line">예를 들어 18의 자릿수 합은 1+8=9이고, 18은 9로 나누어 떨어지므로 18은 하샤드 수입니다.</td>
      </tr>
      <tr>
        <td id="file--L410" class="blob-num js-line-number" data-line-number="410"></td>
        <td id="file--LC410" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L411" class="blob-num js-line-number" data-line-number="411"></td>
        <td id="file--LC411" class="blob-code blob-code-inner js-file-line">핵심포인트는 정수형에서 10의 나머지로 마지막 자리수를 구하고 나서 다음 자리수를 구하기 위해 10으로 나눠주는 것.</td>
      </tr>
      <tr>
        <td id="file--L412" class="blob-num js-line-number" data-line-number="412"></td>
        <td id="file--LC412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L413" class="blob-num js-line-number" data-line-number="413"></td>
        <td id="file--LC413" class="blob-code blob-code-inner js-file-line">내 코드는</td>
      </tr>
      <tr>
        <td id="file--L414" class="blob-num js-line-number" data-line-number="414"></td>
        <td id="file--LC414" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L415" class="blob-num js-line-number" data-line-number="415"></td>
        <td id="file--LC415" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L416" class="blob-num js-line-number" data-line-number="416"></td>
        <td id="file--LC416" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L417" class="blob-num js-line-number" data-line-number="417"></td>
        <td id="file--LC417" class="blob-code blob-code-inner js-file-line">bool solution(int x) {</td>
      </tr>
      <tr>
        <td id="file--L418" class="blob-num js-line-number" data-line-number="418"></td>
        <td id="file--LC418" class="blob-code blob-code-inner js-file-line">    int sumX = 0;</td>
      </tr>
      <tr>
        <td id="file--L419" class="blob-num js-line-number" data-line-number="419"></td>
        <td id="file--LC419" class="blob-code blob-code-inner js-file-line">    int numX = x*10;</td>
      </tr>
      <tr>
        <td id="file--L420" class="blob-num js-line-number" data-line-number="420"></td>
        <td id="file--LC420" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L421" class="blob-num js-line-number" data-line-number="421"></td>
        <td id="file--LC421" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;5; i++)</td>
      </tr>
      <tr>
        <td id="file--L422" class="blob-num js-line-number" data-line-number="422"></td>
        <td id="file--LC422" class="blob-code blob-code-inner js-file-line">        sumX += (numX/=10)%10;</td>
      </tr>
      <tr>
        <td id="file--L423" class="blob-num js-line-number" data-line-number="423"></td>
        <td id="file--LC423" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L424" class="blob-num js-line-number" data-line-number="424"></td>
        <td id="file--LC424" class="blob-code blob-code-inner js-file-line">    return x%sumX==0 ? true : false;</td>
      </tr>
      <tr>
        <td id="file--L425" class="blob-num js-line-number" data-line-number="425"></td>
        <td id="file--LC425" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L426" class="blob-num js-line-number" data-line-number="426"></td>
        <td id="file--LC426" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L427" class="blob-num js-line-number" data-line-number="427"></td>
        <td id="file--LC427" class="blob-code blob-code-inner js-file-line">■ 콜라츠 추측</td>
      </tr>
      <tr>
        <td id="file--L428" class="blob-num js-line-number" data-line-number="428"></td>
        <td id="file--LC428" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L429" class="blob-num js-line-number" data-line-number="429"></td>
        <td id="file--LC429" class="blob-code blob-code-inner js-file-line">1-1. 입력된 수가 짝수라면 2로 나눕니다. </td>
      </tr>
      <tr>
        <td id="file--L430" class="blob-num js-line-number" data-line-number="430"></td>
        <td id="file--LC430" class="blob-code blob-code-inner js-file-line">1-2. 입력된 수가 홀수라면 3을 곱하고 1을 더합니다.</td>
      </tr>
      <tr>
        <td id="file--L431" class="blob-num js-line-number" data-line-number="431"></td>
        <td id="file--LC431" class="blob-code blob-code-inner js-file-line">2. 결과로 나온 수에 같은 작업을 1이 될 때까지 반복합니다.</td>
      </tr>
      <tr>
        <td id="file--L432" class="blob-num js-line-number" data-line-number="432"></td>
        <td id="file--LC432" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L433" class="blob-num js-line-number" data-line-number="433"></td>
        <td id="file--LC433" class="blob-code blob-code-inner js-file-line">예를 들어, 입력된 수가 6이라면 6→3→10→5→16→8→4→2→1 이 되어 총 8번 만에 1이 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L434" class="blob-num js-line-number" data-line-number="434"></td>
        <td id="file--LC434" class="blob-code blob-code-inner js-file-line">위 작업을 몇 번이나 반복해야하는지 반환하는 함수, solution을 완성해 주세요.</td>
      </tr>
      <tr>
        <td id="file--L435" class="blob-num js-line-number" data-line-number="435"></td>
        <td id="file--LC435" class="blob-code blob-code-inner js-file-line">단, 작업을 500번을 반복해도 1이 되지 않는다면 –1을 반환해 주세요.</td>
      </tr>
      <tr>
        <td id="file--L436" class="blob-num js-line-number" data-line-number="436"></td>
        <td id="file--LC436" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L437" class="blob-num js-line-number" data-line-number="437"></td>
        <td id="file--LC437" class="blob-code blob-code-inner js-file-line">핵심포인트는 자료형의 범위였다. </td>
      </tr>
      <tr>
        <td id="file--L438" class="blob-num js-line-number" data-line-number="438"></td>
        <td id="file--LC438" class="blob-code blob-code-inner js-file-line">626331 이정도의 숫자도 콜라츠의 추측시 21억을 넘는 값이 나와 int가 아닌 long값으로 계산해야한다.</td>
      </tr>
      <tr>
        <td id="file--L439" class="blob-num js-line-number" data-line-number="439"></td>
        <td id="file--LC439" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L440" class="blob-num js-line-number" data-line-number="440"></td>
        <td id="file--LC440" class="blob-code blob-code-inner js-file-line">내 코드</td>
      </tr>
      <tr>
        <td id="file--L441" class="blob-num js-line-number" data-line-number="441"></td>
        <td id="file--LC441" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L442" class="blob-num js-line-number" data-line-number="442"></td>
        <td id="file--LC442" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L443" class="blob-num js-line-number" data-line-number="443"></td>
        <td id="file--LC443" class="blob-code blob-code-inner js-file-line">int solution(int num) {</td>
      </tr>
      <tr>
        <td id="file--L444" class="blob-num js-line-number" data-line-number="444"></td>
        <td id="file--LC444" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L445" class="blob-num js-line-number" data-line-number="445"></td>
        <td id="file--LC445" class="blob-code blob-code-inner js-file-line">    long Num = num;</td>
      </tr>
      <tr>
        <td id="file--L446" class="blob-num js-line-number" data-line-number="446"></td>
        <td id="file--LC446" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L447" class="blob-num js-line-number" data-line-number="447"></td>
        <td id="file--LC447" class="blob-code blob-code-inner js-file-line">    while(Num!=1)</td>
      </tr>
      <tr>
        <td id="file--L448" class="blob-num js-line-number" data-line-number="448"></td>
        <td id="file--LC448" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L449" class="blob-num js-line-number" data-line-number="449"></td>
        <td id="file--LC449" class="blob-code blob-code-inner js-file-line">        if(Num%2==0) Num*=0.5;</td>
      </tr>
      <tr>
        <td id="file--L450" class="blob-num js-line-number" data-line-number="450"></td>
        <td id="file--LC450" class="blob-code blob-code-inner js-file-line">        else Num=Num*3+1;</td>
      </tr>
      <tr>
        <td id="file--L451" class="blob-num js-line-number" data-line-number="451"></td>
        <td id="file--LC451" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L452" class="blob-num js-line-number" data-line-number="452"></td>
        <td id="file--LC452" class="blob-code blob-code-inner js-file-line">        if(++answer&gt;500) { answer= -1; break; }</td>
      </tr>
      <tr>
        <td id="file--L453" class="blob-num js-line-number" data-line-number="453"></td>
        <td id="file--LC453" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L454" class="blob-num js-line-number" data-line-number="454"></td>
        <td id="file--LC454" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L455" class="blob-num js-line-number" data-line-number="455"></td>
        <td id="file--LC455" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L456" class="blob-num js-line-number" data-line-number="456"></td>
        <td id="file--LC456" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L457" class="blob-num js-line-number" data-line-number="457"></td>
        <td id="file--LC457" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L458" class="blob-num js-line-number" data-line-number="458"></td>
        <td id="file--LC458" class="blob-code blob-code-inner js-file-line">■ 홀수/짝수 간단한 코드</td>
      </tr>
      <tr>
        <td id="file--L459" class="blob-num js-line-number" data-line-number="459"></td>
        <td id="file--LC459" class="blob-code blob-code-inner js-file-line">- num &amp; 1 ? &quot;Odd&quot; : &quot;Even&quot;;</td>
      </tr>
      <tr>
        <td id="file--L460" class="blob-num js-line-number" data-line-number="460"></td>
        <td id="file--LC460" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L461" class="blob-num js-line-number" data-line-number="461"></td>
        <td id="file--LC461" class="blob-code blob-code-inner js-file-line">■ 자리수 합 간단한 코드</td>
      </tr>
      <tr>
        <td id="file--L462" class="blob-num js-line-number" data-line-number="462"></td>
        <td id="file--LC462" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L463" class="blob-num js-line-number" data-line-number="463"></td>
        <td id="file--LC463" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L464" class="blob-num js-line-number" data-line-number="464"></td>
        <td id="file--LC464" class="blob-code blob-code-inner js-file-line">int solution(int n)</td>
      </tr>
      <tr>
        <td id="file--L465" class="blob-num js-line-number" data-line-number="465"></td>
        <td id="file--LC465" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L466" class="blob-num js-line-number" data-line-number="466"></td>
        <td id="file--LC466" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L467" class="blob-num js-line-number" data-line-number="467"></td>
        <td id="file--LC467" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L468" class="blob-num js-line-number" data-line-number="468"></td>
        <td id="file--LC468" class="blob-code blob-code-inner js-file-line">    n*=10;</td>
      </tr>
      <tr>
        <td id="file--L469" class="blob-num js-line-number" data-line-number="469"></td>
        <td id="file--LC469" class="blob-code blob-code-inner js-file-line">    while(n&gt;9)</td>
      </tr>
      <tr>
        <td id="file--L470" class="blob-num js-line-number" data-line-number="470"></td>
        <td id="file--LC470" class="blob-code blob-code-inner js-file-line">        answer += (n/=10)%10;</td>
      </tr>
      <tr>
        <td id="file--L471" class="blob-num js-line-number" data-line-number="471"></td>
        <td id="file--LC471" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L472" class="blob-num js-line-number" data-line-number="472"></td>
        <td id="file--LC472" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L473" class="blob-num js-line-number" data-line-number="473"></td>
        <td id="file--LC473" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L474" class="blob-num js-line-number" data-line-number="474"></td>
        <td id="file--LC474" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L475" class="blob-num js-line-number" data-line-number="475"></td>
        <td id="file--LC475" class="blob-code blob-code-inner js-file-line">■ 특정 문자기준 스트링 정렬</td>
      </tr>
      <tr>
        <td id="file--L476" class="blob-num js-line-number" data-line-number="476"></td>
        <td id="file--LC476" class="blob-code blob-code-inner js-file-line">-방법) 그 문자를 때어서 처음에 붙인다음 정렬하고 나서 그 문자를 빼준다. </td>
      </tr>
      <tr>
        <td id="file--L477" class="blob-num js-line-number" data-line-number="477"></td>
        <td id="file--LC477" class="blob-code blob-code-inner js-file-line">-방법) 정렬함수에서 특정 조건을 만드는 것을 찾아본다. </td>
      </tr>
      <tr>
        <td id="file--L478" class="blob-num js-line-number" data-line-number="478"></td>
        <td id="file--LC478" class="blob-code blob-code-inner js-file-line">-방법) 이중 포문 반복문을 사용해서 버블정렬한다.</td>
      </tr>
      <tr>
        <td id="file--L479" class="blob-num js-line-number" data-line-number="479"></td>
        <td id="file--LC479" class="blob-code blob-code-inner js-file-line">-방법) 페어를 쓰는데 한쪽문자, 한쪽 문자열 해서 정렬 두개다 보고 소트되니까 문자-&gt;문자열 순으로 정렬됨.</td>
      </tr>
      <tr>
        <td id="file--L480" class="blob-num js-line-number" data-line-number="480"></td>
        <td id="file--LC480" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L481" class="blob-num js-line-number" data-line-number="481"></td>
        <td id="file--LC481" class="blob-code blob-code-inner js-file-line">■ Swap 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L482" class="blob-num js-line-number" data-line-number="482"></td>
        <td id="file--LC482" class="blob-code blob-code-inner js-file-line">int A = 5;</td>
      </tr>
      <tr>
        <td id="file--L483" class="blob-num js-line-number" data-line-number="483"></td>
        <td id="file--LC483" class="blob-code blob-code-inner js-file-line">int B = 23;</td>
      </tr>
      <tr>
        <td id="file--L484" class="blob-num js-line-number" data-line-number="484"></td>
        <td id="file--LC484" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L485" class="blob-num js-line-number" data-line-number="485"></td>
        <td id="file--LC485" class="blob-code blob-code-inner js-file-line">A = A ^ B;</td>
      </tr>
      <tr>
        <td id="file--L486" class="blob-num js-line-number" data-line-number="486"></td>
        <td id="file--LC486" class="blob-code blob-code-inner js-file-line">B = A ^ B;</td>
      </tr>
      <tr>
        <td id="file--L487" class="blob-num js-line-number" data-line-number="487"></td>
        <td id="file--LC487" class="blob-code blob-code-inner js-file-line">A = A ^ B;</td>
      </tr>
      <tr>
        <td id="file--L488" class="blob-num js-line-number" data-line-number="488"></td>
        <td id="file--LC488" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L489" class="blob-num js-line-number" data-line-number="489"></td>
        <td id="file--LC489" class="blob-code blob-code-inner js-file-line">단점)</td>
      </tr>
      <tr>
        <td id="file--L490" class="blob-num js-line-number" data-line-number="490"></td>
        <td id="file--LC490" class="blob-code blob-code-inner js-file-line">- 코드를 이해하기 어렵다.</td>
      </tr>
      <tr>
        <td id="file--L491" class="blob-num js-line-number" data-line-number="491"></td>
        <td id="file--LC491" class="blob-code blob-code-inner js-file-line">- 두 변수의 메모리 위치가 동일할 때 동작하지 않는다.</td>
      </tr>
      <tr>
        <td id="file--L492" class="blob-num js-line-number" data-line-number="492"></td>
        <td id="file--LC492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L493" class="blob-num js-line-number" data-line-number="493"></td>
        <td id="file--LC493" class="blob-code blob-code-inner js-file-line">■ 가우스 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L494" class="blob-num js-line-number" data-line-number="494"></td>
        <td id="file--LC494" class="blob-code blob-code-inner js-file-line">짝수개 : (Max+Min)*전체의 반</td>
      </tr>
      <tr>
        <td id="file--L495" class="blob-num js-line-number" data-line-number="495"></td>
        <td id="file--LC495" class="blob-code blob-code-inner js-file-line">홀수개 : (Max+Min)*(전체의 반) #단, 소수점을 살린다. 가운데 값을 위해</td>
      </tr>
      <tr>
        <td id="file--L496" class="blob-num js-line-number" data-line-number="496"></td>
        <td id="file--LC496" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L497" class="blob-num js-line-number" data-line-number="497"></td>
        <td id="file--LC497" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L498" class="blob-num js-line-number" data-line-number="498"></td>
        <td id="file--LC498" class="blob-code blob-code-inner js-file-line">■ 행렬</td>
      </tr>
      <tr>
        <td id="file--L499" class="blob-num js-line-number" data-line-number="499"></td>
        <td id="file--LC499" class="blob-code blob-code-inner js-file-line">두 행렬 A, B가 있을 때</td>
      </tr>
      <tr>
        <td id="file--L500" class="blob-num js-line-number" data-line-number="500"></td>
        <td id="file--LC500" class="blob-code blob-code-inner js-file-line">이것이 각각 P * Q 형태와 Q * R형태여야 행렬 간 곱셈이 가능하고 결과 행렬은 P * R형태가 된다.</td>
      </tr>
      <tr>
        <td id="file--L501" class="blob-num js-line-number" data-line-number="501"></td>
        <td id="file--LC501" class="blob-code blob-code-inner js-file-line">예를 들어 5*2 행렬과 3*6 행렬은 서로 곱할 수 없고 5*3 행렬과 3*6 행렬은 곱할 수 있다. 그리고 결과물은 5*6이 된다.</td>
      </tr>
      <tr>
        <td id="file--L502" class="blob-num js-line-number" data-line-number="502"></td>
        <td id="file--LC502" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L503" class="blob-num js-line-number" data-line-number="503"></td>
        <td id="file--LC503" class="blob-code blob-code-inner js-file-line">■ 최솟값 만들기</td>
      </tr>
      <tr>
        <td id="file--L504" class="blob-num js-line-number" data-line-number="504"></td>
        <td id="file--LC504" class="blob-code blob-code-inner js-file-line">두 집합에서 각각 숫자를 뽑아 곱해서 모든 수를 더한게 최소가 되려면</td>
      </tr>
      <tr>
        <td id="file--L505" class="blob-num js-line-number" data-line-number="505"></td>
        <td id="file--LC505" class="blob-code blob-code-inner js-file-line">그냥 한 쪽 오름차순 내림차순 정렬 후 가장 작은 수와 큰 수를 곱하는 식일 때 최솟값이 된다.</td>
      </tr>
      <tr>
        <td id="file--L506" class="blob-num js-line-number" data-line-number="506"></td>
        <td id="file--LC506" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L507" class="blob-num js-line-number" data-line-number="507"></td>
        <td id="file--LC507" class="blob-code blob-code-inner js-file-line">■ 연속된 덧셈으로 표현된 숫자</td>
      </tr>
      <tr>
        <td id="file--L508" class="blob-num js-line-number" data-line-number="508"></td>
        <td id="file--LC508" class="blob-code blob-code-inner js-file-line">이거 내가 발견한건데 그냥 그 수의 약수중에 홀수의 개수를 구하면 된다. 이유는 모르겠다. 규칙 생각해서 해봤는데 됨.</td>
      </tr>
      <tr>
        <td id="file--L509" class="blob-num js-line-number" data-line-number="509"></td>
        <td id="file--LC509" class="blob-code blob-code-inner js-file-line">15 -&gt; 1,3,5,15 4가지 표현방식이 있을 것</td>
      </tr>
      <tr>
        <td id="file--L510" class="blob-num js-line-number" data-line-number="510"></td>
        <td id="file--LC510" class="blob-code blob-code-inner js-file-line">12345, 345, 78, 15</td>
      </tr>
      <tr>
        <td id="file--L511" class="blob-num js-line-number" data-line-number="511"></td>
        <td id="file--LC511" class="blob-code blob-code-inner js-file-line">10 -&gt; 1,2,5,10 2가지 표현방식이 있을 것</td>
      </tr>
      <tr>
        <td id="file--L512" class="blob-num js-line-number" data-line-number="512"></td>
        <td id="file--LC512" class="blob-code blob-code-inner js-file-line">1234, 10</td>
      </tr>
      <tr>
        <td id="file--L513" class="blob-num js-line-number" data-line-number="513"></td>
        <td id="file--LC513" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L514" class="blob-num js-line-number" data-line-number="514"></td>
        <td id="file--LC514" class="blob-code blob-code-inner js-file-line">#include &lt;string&gt;</td>
      </tr>
      <tr>
        <td id="file--L515" class="blob-num js-line-number" data-line-number="515"></td>
        <td id="file--LC515" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L516" class="blob-num js-line-number" data-line-number="516"></td>
        <td id="file--LC516" class="blob-code blob-code-inner js-file-line">#include &lt;cmath&gt;</td>
      </tr>
      <tr>
        <td id="file--L517" class="blob-num js-line-number" data-line-number="517"></td>
        <td id="file--LC517" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L518" class="blob-num js-line-number" data-line-number="518"></td>
        <td id="file--LC518" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L519" class="blob-num js-line-number" data-line-number="519"></td>
        <td id="file--LC519" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L520" class="blob-num js-line-number" data-line-number="520"></td>
        <td id="file--LC520" class="blob-code blob-code-inner js-file-line">int solution(int n) {</td>
      </tr>
      <tr>
        <td id="file--L521" class="blob-num js-line-number" data-line-number="521"></td>
        <td id="file--LC521" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L522" class="blob-num js-line-number" data-line-number="522"></td>
        <td id="file--LC522" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;=sqrt(n); i++)</td>
      </tr>
      <tr>
        <td id="file--L523" class="blob-num js-line-number" data-line-number="523"></td>
        <td id="file--LC523" class="blob-code blob-code-inner js-file-line">        if(n%i==0) </td>
      </tr>
      <tr>
        <td id="file--L524" class="blob-num js-line-number" data-line-number="524"></td>
        <td id="file--LC524" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L525" class="blob-num js-line-number" data-line-number="525"></td>
        <td id="file--LC525" class="blob-code blob-code-inner js-file-line">            if(i&amp;1) answer++;</td>
      </tr>
      <tr>
        <td id="file--L526" class="blob-num js-line-number" data-line-number="526"></td>
        <td id="file--LC526" class="blob-code blob-code-inner js-file-line">            if(n!=i*i&amp;&amp;(n/i)&amp;1) answer++;</td>
      </tr>
      <tr>
        <td id="file--L527" class="blob-num js-line-number" data-line-number="527"></td>
        <td id="file--LC527" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L528" class="blob-num js-line-number" data-line-number="528"></td>
        <td id="file--LC528" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L529" class="blob-num js-line-number" data-line-number="529"></td>
        <td id="file--LC529" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L530" class="blob-num js-line-number" data-line-number="530"></td>
        <td id="file--LC530" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L531" class="blob-num js-line-number" data-line-number="531"></td>
        <td id="file--LC531" class="blob-code blob-code-inner js-file-line">■ Bit의 수 구하기</td>
      </tr>
      <tr>
        <td id="file--L532" class="blob-num js-line-number" data-line-number="532"></td>
        <td id="file--LC532" class="blob-code blob-code-inner js-file-line">int bitCount(int n)</td>
      </tr>
      <tr>
        <td id="file--L533" class="blob-num js-line-number" data-line-number="533"></td>
        <td id="file--LC533" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L534" class="blob-num js-line-number" data-line-number="534"></td>
        <td id="file--LC534" class="blob-code blob-code-inner js-file-line">    int count =0;</td>
      </tr>
      <tr>
        <td id="file--L535" class="blob-num js-line-number" data-line-number="535"></td>
        <td id="file--LC535" class="blob-code blob-code-inner js-file-line">    while(n&gt;0)</td>
      </tr>
      <tr>
        <td id="file--L536" class="blob-num js-line-number" data-line-number="536"></td>
        <td id="file--LC536" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L537" class="blob-num js-line-number" data-line-number="537"></td>
        <td id="file--LC537" class="blob-code blob-code-inner js-file-line">        if(n&amp;1) count++;</td>
      </tr>
      <tr>
        <td id="file--L538" class="blob-num js-line-number" data-line-number="538"></td>
        <td id="file--LC538" class="blob-code blob-code-inner js-file-line">        n &gt;&gt;=1;</td>
      </tr>
      <tr>
        <td id="file--L539" class="blob-num js-line-number" data-line-number="539"></td>
        <td id="file--LC539" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L540" class="blob-num js-line-number" data-line-number="540"></td>
        <td id="file--LC540" class="blob-code blob-code-inner js-file-line">    return count;</td>
      </tr>
      <tr>
        <td id="file--L541" class="blob-num js-line-number" data-line-number="541"></td>
        <td id="file--LC541" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L542" class="blob-num js-line-number" data-line-number="542"></td>
        <td id="file--LC542" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L543" class="blob-num js-line-number" data-line-number="543"></td>
        <td id="file--LC543" class="blob-code blob-code-inner js-file-line">■ 소괄호만 옳은지 아닌지 체크하는 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L544" class="blob-num js-line-number" data-line-number="544"></td>
        <td id="file--LC544" class="blob-code blob-code-inner js-file-line">#include &lt;string&gt;</td>
      </tr>
      <tr>
        <td id="file--L545" class="blob-num js-line-number" data-line-number="545"></td>
        <td id="file--LC545" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L546" class="blob-num js-line-number" data-line-number="546"></td>
        <td id="file--LC546" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L547" class="blob-num js-line-number" data-line-number="547"></td>
        <td id="file--LC547" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L548" class="blob-num js-line-number" data-line-number="548"></td>
        <td id="file--LC548" class="blob-code blob-code-inner js-file-line">bool solution(string s)</td>
      </tr>
      <tr>
        <td id="file--L549" class="blob-num js-line-number" data-line-number="549"></td>
        <td id="file--LC549" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L550" class="blob-num js-line-number" data-line-number="550"></td>
        <td id="file--LC550" class="blob-code blob-code-inner js-file-line">    int openCnt=0;</td>
      </tr>
      <tr>
        <td id="file--L551" class="blob-num js-line-number" data-line-number="551"></td>
        <td id="file--LC551" class="blob-code blob-code-inner js-file-line">    int totCnt = s.length();</td>
      </tr>
      <tr>
        <td id="file--L552" class="blob-num js-line-number" data-line-number="552"></td>
        <td id="file--LC552" class="blob-code blob-code-inner js-file-line">    char c;</td>
      </tr>
      <tr>
        <td id="file--L553" class="blob-num js-line-number" data-line-number="553"></td>
        <td id="file--LC553" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L554" class="blob-num js-line-number" data-line-number="554"></td>
        <td id="file--LC554" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;totCnt; i++)</td>
      </tr>
      <tr>
        <td id="file--L555" class="blob-num js-line-number" data-line-number="555"></td>
        <td id="file--LC555" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L556" class="blob-num js-line-number" data-line-number="556"></td>
        <td id="file--LC556" class="blob-code blob-code-inner js-file-line">        c = s[i];</td>
      </tr>
      <tr>
        <td id="file--L557" class="blob-num js-line-number" data-line-number="557"></td>
        <td id="file--LC557" class="blob-code blob-code-inner js-file-line">        if(c==&#39;)&#39;) </td>
      </tr>
      <tr>
        <td id="file--L558" class="blob-num js-line-number" data-line-number="558"></td>
        <td id="file--LC558" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L559" class="blob-num js-line-number" data-line-number="559"></td>
        <td id="file--LC559" class="blob-code blob-code-inner js-file-line">            if(openCnt==0) return false;</td>
      </tr>
      <tr>
        <td id="file--L560" class="blob-num js-line-number" data-line-number="560"></td>
        <td id="file--LC560" class="blob-code blob-code-inner js-file-line">            openCnt-=1;</td>
      </tr>
      <tr>
        <td id="file--L561" class="blob-num js-line-number" data-line-number="561"></td>
        <td id="file--LC561" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L562" class="blob-num js-line-number" data-line-number="562"></td>
        <td id="file--LC562" class="blob-code blob-code-inner js-file-line">        else</td>
      </tr>
      <tr>
        <td id="file--L563" class="blob-num js-line-number" data-line-number="563"></td>
        <td id="file--LC563" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L564" class="blob-num js-line-number" data-line-number="564"></td>
        <td id="file--LC564" class="blob-code blob-code-inner js-file-line">            openCnt++;</td>
      </tr>
      <tr>
        <td id="file--L565" class="blob-num js-line-number" data-line-number="565"></td>
        <td id="file--LC565" class="blob-code blob-code-inner js-file-line">            if(totCnt-i-1&lt;openCnt) return false;</td>
      </tr>
      <tr>
        <td id="file--L566" class="blob-num js-line-number" data-line-number="566"></td>
        <td id="file--LC566" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L567" class="blob-num js-line-number" data-line-number="567"></td>
        <td id="file--LC567" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L568" class="blob-num js-line-number" data-line-number="568"></td>
        <td id="file--LC568" class="blob-code blob-code-inner js-file-line">    if(openCnt!=0) return false;</td>
      </tr>
      <tr>
        <td id="file--L569" class="blob-num js-line-number" data-line-number="569"></td>
        <td id="file--LC569" class="blob-code blob-code-inner js-file-line">    return true;</td>
      </tr>
      <tr>
        <td id="file--L570" class="blob-num js-line-number" data-line-number="570"></td>
        <td id="file--LC570" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L571" class="blob-num js-line-number" data-line-number="571"></td>
        <td id="file--LC571" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L572" class="blob-num js-line-number" data-line-number="572"></td>
        <td id="file--LC572" class="blob-code blob-code-inner js-file-line">■ 가장 큰 사각형 찾는 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L573" class="blob-num js-line-number" data-line-number="573"></td>
        <td id="file--LC573" class="blob-code blob-code-inner js-file-line">1행 1열을 제외하고 (1,1)인덱스부터 반복문을 돌리는데 현재 값이 1이상일 때 왼쪽, 위, 왼쪽위의 값 중의 최소값에 +1더 한 값을 현재 값에 넣는다.</td>
      </tr>
      <tr>
        <td id="file--L574" class="blob-num js-line-number" data-line-number="574"></td>
        <td id="file--LC574" class="blob-code blob-code-inner js-file-line">이런식으로 돌리면 가장 큰 숫자가 나온 위치 왼쪽위로 사각형이 가장 큰 사각형인거다.</td>
      </tr>
      <tr>
        <td id="file--L575" class="blob-num js-line-number" data-line-number="575"></td>
        <td id="file--LC575" class="blob-code blob-code-inner js-file-line">0 0 0 0 0 0</td>
      </tr>
      <tr>
        <td id="file--L576" class="blob-num js-line-number" data-line-number="576"></td>
        <td id="file--LC576" class="blob-code blob-code-inner js-file-line">0 1 1 1 1 0</td>
      </tr>
      <tr>
        <td id="file--L577" class="blob-num js-line-number" data-line-number="577"></td>
        <td id="file--LC577" class="blob-code blob-code-inner js-file-line">0 0 1 2 2 1</td>
      </tr>
      <tr>
        <td id="file--L578" class="blob-num js-line-number" data-line-number="578"></td>
        <td id="file--LC578" class="blob-code blob-code-inner js-file-line">1 0 1 2 3 0</td>
      </tr>
      <tr>
        <td id="file--L579" class="blob-num js-line-number" data-line-number="579"></td>
        <td id="file--LC579" class="blob-code blob-code-inner js-file-line">1 0 1 0 1 1</td>
      </tr>
      <tr>
        <td id="file--L580" class="blob-num js-line-number" data-line-number="580"></td>
        <td id="file--LC580" class="blob-code blob-code-inner js-file-line">1 0 0 1 0 0</td>
      </tr>
      <tr>
        <td id="file--L581" class="blob-num js-line-number" data-line-number="581"></td>
        <td id="file--LC581" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L582" class="blob-num js-line-number" data-line-number="582"></td>
        <td id="file--LC582" class="blob-code blob-code-inner js-file-line">변의 길이가 3 이 가장 큰 사각형</td>
      </tr>
      <tr>
        <td id="file--L583" class="blob-num js-line-number" data-line-number="583"></td>
        <td id="file--LC583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L584" class="blob-num js-line-number" data-line-number="584"></td>
        <td id="file--LC584" class="blob-code blob-code-inner js-file-line">■ 0이 없는 ?진수로 표현하기</td>
      </tr>
      <tr>
        <td id="file--L585" class="blob-num js-line-number" data-line-number="585"></td>
        <td id="file--LC585" class="blob-code blob-code-inner js-file-line">124 일 경우</td>
      </tr>
      <tr>
        <td id="file--L586" class="blob-num js-line-number" data-line-number="586"></td>
        <td id="file--LC586" class="blob-code blob-code-inner js-file-line">3진수를 0을 3으로 바꾸고 3을 4로 그런데 한가지 문제가 있었는데, 그것은 1, 2, 4로만 숫자를 표시해야하기</td>
      </tr>
      <tr>
        <td id="file--L587" class="blob-num js-line-number" data-line-number="587"></td>
        <td id="file--LC587" class="blob-code blob-code-inner js-file-line">때문에 3으로 나누어 떨어졌을 때 자리수를 나타내줄 0이 없다. 그러므로 1씩 낮춰줘야한다.</td>
      </tr>
      <tr>
        <td id="file--L588" class="blob-num js-line-number" data-line-number="588"></td>
        <td id="file--LC588" class="blob-code blob-code-inner js-file-line">String answer = &quot;&quot;;</td>
      </tr>
      <tr>
        <td id="file--L589" class="blob-num js-line-number" data-line-number="589"></td>
        <td id="file--LC589" class="blob-code blob-code-inner js-file-line">        int[] arr = {4, 1, 2};</td>
      </tr>
      <tr>
        <td id="file--L590" class="blob-num js-line-number" data-line-number="590"></td>
        <td id="file--LC590" class="blob-code blob-code-inner js-file-line">        int a;</td>
      </tr>
      <tr>
        <td id="file--L591" class="blob-num js-line-number" data-line-number="591"></td>
        <td id="file--LC591" class="blob-code blob-code-inner js-file-line">        while (n &gt; 0) {</td>
      </tr>
      <tr>
        <td id="file--L592" class="blob-num js-line-number" data-line-number="592"></td>
        <td id="file--LC592" class="blob-code blob-code-inner js-file-line">            a = n % 3;</td>
      </tr>
      <tr>
        <td id="file--L593" class="blob-num js-line-number" data-line-number="593"></td>
        <td id="file--LC593" class="blob-code blob-code-inner js-file-line">            n = n / 3;</td>
      </tr>
      <tr>
        <td id="file--L594" class="blob-num js-line-number" data-line-number="594"></td>
        <td id="file--LC594" class="blob-code blob-code-inner js-file-line">            if (a == 0) {</td>
      </tr>
      <tr>
        <td id="file--L595" class="blob-num js-line-number" data-line-number="595"></td>
        <td id="file--LC595" class="blob-code blob-code-inner js-file-line">                n -= 1;</td>
      </tr>
      <tr>
        <td id="file--L596" class="blob-num js-line-number" data-line-number="596"></td>
        <td id="file--LC596" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L597" class="blob-num js-line-number" data-line-number="597"></td>
        <td id="file--LC597" class="blob-code blob-code-inner js-file-line">            answer = arr[a] + answer;</td>
      </tr>
      <tr>
        <td id="file--L598" class="blob-num js-line-number" data-line-number="598"></td>
        <td id="file--LC598" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L599" class="blob-num js-line-number" data-line-number="599"></td>
        <td id="file--LC599" class="blob-code blob-code-inner js-file-line">        return answer;</td>
      </tr>
      <tr>
        <td id="file--L600" class="blob-num js-line-number" data-line-number="600"></td>
        <td id="file--LC600" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L601" class="blob-num js-line-number" data-line-number="601"></td>
        <td id="file--LC601" class="blob-code blob-code-inner js-file-line">■ 땅따먹기 사다리타며 최댓값 찾기</td>
      </tr>
      <tr>
        <td id="file--L602" class="blob-num js-line-number" data-line-number="602"></td>
        <td id="file--LC602" class="blob-code blob-code-inner js-file-line">| 1 | 2 | 3 | 5 |</td>
      </tr>
      <tr>
        <td id="file--L603" class="blob-num js-line-number" data-line-number="603"></td>
        <td id="file--LC603" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L604" class="blob-num js-line-number" data-line-number="604"></td>
        <td id="file--LC604" class="blob-code blob-code-inner js-file-line">| 5 | 6 | 7 | 8 |</td>
      </tr>
      <tr>
        <td id="file--L605" class="blob-num js-line-number" data-line-number="605"></td>
        <td id="file--LC605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L606" class="blob-num js-line-number" data-line-number="606"></td>
        <td id="file--LC606" class="blob-code blob-code-inner js-file-line">| 4 | 3 | 2 | 1 |</td>
      </tr>
      <tr>
        <td id="file--L607" class="blob-num js-line-number" data-line-number="607"></td>
        <td id="file--LC607" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L608" class="blob-num js-line-number" data-line-number="608"></td>
        <td id="file--LC608" class="blob-code blob-code-inner js-file-line">로 땅이 주어졌다면, 1행에서 네번째 칸 (5)를 밟았으면, 2행의 네번째 칸 (8)은 밟을 수 없습니다.</td>
      </tr>
      <tr>
        <td id="file--L609" class="blob-num js-line-number" data-line-number="609"></td>
        <td id="file--LC609" class="blob-code blob-code-inner js-file-line">마지막 행까지 모두 내려왔을 때, 얻을 수 있는 점수의 최대값을 return하는 solution 함수를 완성해 주세요.</td>
      </tr>
      <tr>
        <td id="file--L610" class="blob-num js-line-number" data-line-number="610"></td>
        <td id="file--LC610" class="blob-code blob-code-inner js-file-line">위 예의 경우, 1행의 네번째 칸 (5), 2행의 세번째 칸 (7), 3행의 첫번째 칸 (4) 땅을 밟아</td>
      </tr>
      <tr>
        <td id="file--L611" class="blob-num js-line-number" data-line-number="611"></td>
        <td id="file--LC611" class="blob-code blob-code-inner js-file-line">16점이 최고점이 되므로 16을 return 하면 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L612" class="blob-num js-line-number" data-line-number="612"></td>
        <td id="file--LC612" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L613" class="blob-num js-line-number" data-line-number="613"></td>
        <td id="file--LC613" class="blob-code blob-code-inner js-file-line">해결책은 위에서부터 0열부터 3열까지 i+1행에 i행의 3개의 열(자기자신 열 빼고)의 최대값을 찾아서 더해주면된다.</td>
      </tr>
      <tr>
        <td id="file--L614" class="blob-num js-line-number" data-line-number="614"></td>
        <td id="file--LC614" class="blob-code blob-code-inner js-file-line">그럼 결국 마지막행에 도착했을 때 4개 열 값 중에 가장 높은게 최고점임.</td>
      </tr>
      <tr>
        <td id="file--L615" class="blob-num js-line-number" data-line-number="615"></td>
        <td id="file--LC615" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L616" class="blob-num js-line-number" data-line-number="616"></td>
        <td id="file--LC616" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L617" class="blob-num js-line-number" data-line-number="617"></td>
        <td id="file--LC617" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L618" class="blob-num js-line-number" data-line-number="618"></td>
        <td id="file--LC618" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L619" class="blob-num js-line-number" data-line-number="619"></td>
        <td id="file--LC619" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L620" class="blob-num js-line-number" data-line-number="620"></td>
        <td id="file--LC620" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L621" class="blob-num js-line-number" data-line-number="621"></td>
        <td id="file--LC621" class="blob-code blob-code-inner js-file-line">int solution(vector&lt;vector&lt;int&gt; &gt; land)</td>
      </tr>
      <tr>
        <td id="file--L622" class="blob-num js-line-number" data-line-number="622"></td>
        <td id="file--LC622" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L623" class="blob-num js-line-number" data-line-number="623"></td>
        <td id="file--LC623" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L624" class="blob-num js-line-number" data-line-number="624"></td>
        <td id="file--LC624" class="blob-code blob-code-inner js-file-line">    int height = land.size();</td>
      </tr>
      <tr>
        <td id="file--L625" class="blob-num js-line-number" data-line-number="625"></td>
        <td id="file--LC625" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L626" class="blob-num js-line-number" data-line-number="626"></td>
        <td id="file--LC626" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;height-1; i++)</td>
      </tr>
      <tr>
        <td id="file--L627" class="blob-num js-line-number" data-line-number="627"></td>
        <td id="file--LC627" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L628" class="blob-num js-line-number" data-line-number="628"></td>
        <td id="file--LC628" class="blob-code blob-code-inner js-file-line">        land[i+1][0] += max(land[i][1],max(land[i][2],land[i][3]));</td>
      </tr>
      <tr>
        <td id="file--L629" class="blob-num js-line-number" data-line-number="629"></td>
        <td id="file--LC629" class="blob-code blob-code-inner js-file-line">        land[i+1][1] += max(land[i][0],max(land[i][2],land[i][3]));</td>
      </tr>
      <tr>
        <td id="file--L630" class="blob-num js-line-number" data-line-number="630"></td>
        <td id="file--LC630" class="blob-code blob-code-inner js-file-line">        land[i+1][2] += max(land[i][0],max(land[i][1],land[i][3]));</td>
      </tr>
      <tr>
        <td id="file--L631" class="blob-num js-line-number" data-line-number="631"></td>
        <td id="file--LC631" class="blob-code blob-code-inner js-file-line">        land[i+1][3] += max(land[i][0],max(land[i][1],land[i][2]));</td>
      </tr>
      <tr>
        <td id="file--L632" class="blob-num js-line-number" data-line-number="632"></td>
        <td id="file--LC632" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L633" class="blob-num js-line-number" data-line-number="633"></td>
        <td id="file--LC633" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L634" class="blob-num js-line-number" data-line-number="634"></td>
        <td id="file--LC634" class="blob-code blob-code-inner js-file-line">    sort(land[height-1].rbegin(),land[height-1].rend());</td>
      </tr>
      <tr>
        <td id="file--L635" class="blob-num js-line-number" data-line-number="635"></td>
        <td id="file--LC635" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L636" class="blob-num js-line-number" data-line-number="636"></td>
        <td id="file--LC636" class="blob-code blob-code-inner js-file-line">    return answer=land[height-1][0];</td>
      </tr>
      <tr>
        <td id="file--L637" class="blob-num js-line-number" data-line-number="637"></td>
        <td id="file--LC637" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L638" class="blob-num js-line-number" data-line-number="638"></td>
        <td id="file--LC638" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L639" class="blob-num js-line-number" data-line-number="639"></td>
        <td id="file--LC639" class="blob-code blob-code-inner js-file-line">■ 팰린드롬 Palindrome 알고리즘 O(n^2)</td>
      </tr>
      <tr>
        <td id="file--L640" class="blob-num js-line-number" data-line-number="640"></td>
        <td id="file--LC640" class="blob-code blob-code-inner js-file-line">for문 돌면서 해당 문자를 가운데 문자라 생각하며 k를 둬서 왼쪽과 오른쪽으로 증가시켜가며 값이 같은지 체크,</td>
      </tr>
      <tr>
        <td id="file--L641" class="blob-num js-line-number" data-line-number="641"></td>
        <td id="file--LC641" class="blob-code blob-code-inner js-file-line">다시 돌려 aa, bb를 있는지 체크 후 있으면 k또 반복 최대값을 구하면 됨. (이 부분을 대체하기 위해선 #같은걸 삽입해서 홀짝구분없이 만든다.)</td>
      </tr>
      <tr>
        <td id="file--L642" class="blob-num js-line-number" data-line-number="642"></td>
        <td id="file--LC642" class="blob-code blob-code-inner js-file-line">#a#a#b#a#a# -&gt; 5가 최대 </td>
      </tr>
      <tr>
        <td id="file--L643" class="blob-num js-line-number" data-line-number="643"></td>
        <td id="file--LC643" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L644" class="blob-num js-line-number" data-line-number="644"></td>
        <td id="file--LC644" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L645" class="blob-num js-line-number" data-line-number="645"></td>
        <td id="file--LC645" class="blob-code blob-code-inner js-file-line">#include &lt;string&gt;</td>
      </tr>
      <tr>
        <td id="file--L646" class="blob-num js-line-number" data-line-number="646"></td>
        <td id="file--LC646" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L647" class="blob-num js-line-number" data-line-number="647"></td>
        <td id="file--LC647" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L648" class="blob-num js-line-number" data-line-number="648"></td>
        <td id="file--LC648" class="blob-code blob-code-inner js-file-line">int solution(string s)</td>
      </tr>
      <tr>
        <td id="file--L649" class="blob-num js-line-number" data-line-number="649"></td>
        <td id="file--LC649" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L650" class="blob-num js-line-number" data-line-number="650"></td>
        <td id="file--LC650" class="blob-code blob-code-inner js-file-line">    int answer=1;</td>
      </tr>
      <tr>
        <td id="file--L651" class="blob-num js-line-number" data-line-number="651"></td>
        <td id="file--LC651" class="blob-code blob-code-inner js-file-line">    int sSize = s.length();</td>
      </tr>
      <tr>
        <td id="file--L652" class="blob-num js-line-number" data-line-number="652"></td>
        <td id="file--LC652" class="blob-code blob-code-inner js-file-line">    int resSize;</td>
      </tr>
      <tr>
        <td id="file--L653" class="blob-num js-line-number" data-line-number="653"></td>
        <td id="file--LC653" class="blob-code blob-code-inner js-file-line">    int maxPalin=0;</td>
      </tr>
      <tr>
        <td id="file--L654" class="blob-num js-line-number" data-line-number="654"></td>
        <td id="file--LC654" class="blob-code blob-code-inner js-file-line">    string res = &quot;&quot;;</td>
      </tr>
      <tr>
        <td id="file--L655" class="blob-num js-line-number" data-line-number="655"></td>
        <td id="file--LC655" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L656" class="blob-num js-line-number" data-line-number="656"></td>
        <td id="file--LC656" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;sSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L657" class="blob-num js-line-number" data-line-number="657"></td>
        <td id="file--LC657" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L658" class="blob-num js-line-number" data-line-number="658"></td>
        <td id="file--LC658" class="blob-code blob-code-inner js-file-line">        res += &quot;*&quot;;</td>
      </tr>
      <tr>
        <td id="file--L659" class="blob-num js-line-number" data-line-number="659"></td>
        <td id="file--LC659" class="blob-code blob-code-inner js-file-line">        res += s[i];</td>
      </tr>
      <tr>
        <td id="file--L660" class="blob-num js-line-number" data-line-number="660"></td>
        <td id="file--LC660" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L661" class="blob-num js-line-number" data-line-number="661"></td>
        <td id="file--LC661" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L662" class="blob-num js-line-number" data-line-number="662"></td>
        <td id="file--LC662" class="blob-code blob-code-inner js-file-line">    res += &quot;*&quot;;</td>
      </tr>
      <tr>
        <td id="file--L663" class="blob-num js-line-number" data-line-number="663"></td>
        <td id="file--LC663" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L664" class="blob-num js-line-number" data-line-number="664"></td>
        <td id="file--LC664" class="blob-code blob-code-inner js-file-line">    resSize = res.length();</td>
      </tr>
      <tr>
        <td id="file--L665" class="blob-num js-line-number" data-line-number="665"></td>
        <td id="file--LC665" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;resSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L666" class="blob-num js-line-number" data-line-number="666"></td>
        <td id="file--LC666" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L667" class="blob-num js-line-number" data-line-number="667"></td>
        <td id="file--LC667" class="blob-code blob-code-inner js-file-line">        for(int k=1; k&lt;resSize*0.5; k++)</td>
      </tr>
      <tr>
        <td id="file--L668" class="blob-num js-line-number" data-line-number="668"></td>
        <td id="file--LC668" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L669" class="blob-num js-line-number" data-line-number="669"></td>
        <td id="file--LC669" class="blob-code blob-code-inner js-file-line">            if(i-k&lt;0||i+k&gt;resSize) break;</td>
      </tr>
      <tr>
        <td id="file--L670" class="blob-num js-line-number" data-line-number="670"></td>
        <td id="file--LC670" class="blob-code blob-code-inner js-file-line">            if(res[i-k]==res[i+k]) maxPalin++;</td>
      </tr>
      <tr>
        <td id="file--L671" class="blob-num js-line-number" data-line-number="671"></td>
        <td id="file--LC671" class="blob-code blob-code-inner js-file-line">            else break;</td>
      </tr>
      <tr>
        <td id="file--L672" class="blob-num js-line-number" data-line-number="672"></td>
        <td id="file--LC672" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L673" class="blob-num js-line-number" data-line-number="673"></td>
        <td id="file--LC673" class="blob-code blob-code-inner js-file-line">        if(maxPalin&gt;answer) answer = maxPalin;</td>
      </tr>
      <tr>
        <td id="file--L674" class="blob-num js-line-number" data-line-number="674"></td>
        <td id="file--LC674" class="blob-code blob-code-inner js-file-line">        maxPalin=0;</td>
      </tr>
      <tr>
        <td id="file--L675" class="blob-num js-line-number" data-line-number="675"></td>
        <td id="file--LC675" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L676" class="blob-num js-line-number" data-line-number="676"></td>
        <td id="file--LC676" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L677" class="blob-num js-line-number" data-line-number="677"></td>
        <td id="file--LC677" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L678" class="blob-num js-line-number" data-line-number="678"></td>
        <td id="file--LC678" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L679" class="blob-num js-line-number" data-line-number="679"></td>
        <td id="file--LC679" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L680" class="blob-num js-line-number" data-line-number="680"></td>
        <td id="file--LC680" class="blob-code blob-code-inner js-file-line">해결) Manacher&#39;s 알고리즘 O(n)</td>
      </tr>
      <tr>
        <td id="file--L681" class="blob-num js-line-number" data-line-number="681"></td>
        <td id="file--LC681" class="blob-code blob-code-inner js-file-line">http://namnamseo.tistory.com/entry/%EC%A0%84%EC%B2%B4-%EB%AC%B8%EC%9E%90%EC%97%B4%EC%97%90%EC%84%9C-palindrome%EC%9D%98-%EA%B0%AF%EC%88%98-%EC%84%B8%EA%B8%B0-ON</td>
      </tr>
      <tr>
        <td id="file--L682" class="blob-num js-line-number" data-line-number="682"></td>
        <td id="file--LC682" class="blob-code blob-code-inner js-file-line">https://tarokuriyama.com/projects/palindrome2.php</td>
      </tr>
      <tr>
        <td id="file--L683" class="blob-num js-line-number" data-line-number="683"></td>
        <td id="file--LC683" class="blob-code blob-code-inner js-file-line">https://www.crocus.co.kr/1075</td>
      </tr>
      <tr>
        <td id="file--L684" class="blob-num js-line-number" data-line-number="684"></td>
        <td id="file--LC684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L685" class="blob-num js-line-number" data-line-number="685"></td>
        <td id="file--LC685" class="blob-code blob-code-inner js-file-line">■ 야근지수</td>
      </tr>
      <tr>
        <td id="file--L686" class="blob-num js-line-number" data-line-number="686"></td>
        <td id="file--LC686" class="blob-code blob-code-inner js-file-line">최고값을 줄어야하는 문제 일때 내가 생각한 방법인데 최고값 순으로 정렬 후 계단을 잘라가는 식으로</td>
      </tr>
      <tr>
        <td id="file--L687" class="blob-num js-line-number" data-line-number="687"></td>
        <td id="file--LC687" class="blob-code blob-code-inner js-file-line">그 비용이 줄일 수 있는 값보다 작으면 한번에 싹둑한 후</td>
      </tr>
      <tr>
        <td id="file--L688" class="blob-num js-line-number" data-line-number="688"></td>
        <td id="file--LC688" class="blob-code blob-code-inner js-file-line">비용이 클 때 for문 나와서 남은 줄일 수 있는 수를 사람들이 생각하는 -1 씩 줄이고 오름차순 정렬하고를 반복했음</td>
      </tr>
      <tr>
        <td id="file--L689" class="blob-num js-line-number" data-line-number="689"></td>
        <td id="file--LC689" class="blob-code blob-code-inner js-file-line">(최대값을 찾아서 빼는게 더 효율적이긴하겠지만) </td>
      </tr>
      <tr>
        <td id="file--L690" class="blob-num js-line-number" data-line-number="690"></td>
        <td id="file--LC690" class="blob-code blob-code-inner js-file-line">요점은 계단식 줄이기</td>
      </tr>
      <tr>
        <td id="file--L691" class="blob-num js-line-number" data-line-number="691"></td>
        <td id="file--LC691" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L692" class="blob-num js-line-number" data-line-number="692"></td>
        <td id="file--LC692" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L693" class="blob-num js-line-number" data-line-number="693"></td>
        <td id="file--LC693" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L694" class="blob-num js-line-number" data-line-number="694"></td>
        <td id="file--LC694" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L695" class="blob-num js-line-number" data-line-number="695"></td>
        <td id="file--LC695" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L696" class="blob-num js-line-number" data-line-number="696"></td>
        <td id="file--LC696" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L697" class="blob-num js-line-number" data-line-number="697"></td>
        <td id="file--LC697" class="blob-code blob-code-inner js-file-line">long long solution(int n, vector&lt;int&gt; works) {</td>
      </tr>
      <tr>
        <td id="file--L698" class="blob-num js-line-number" data-line-number="698"></td>
        <td id="file--LC698" class="blob-code blob-code-inner js-file-line">    long long answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L699" class="blob-num js-line-number" data-line-number="699"></td>
        <td id="file--LC699" class="blob-code blob-code-inner js-file-line">    int wSize = works.size();</td>
      </tr>
      <tr>
        <td id="file--L700" class="blob-num js-line-number" data-line-number="700"></td>
        <td id="file--LC700" class="blob-code blob-code-inner js-file-line">    int gonnaWorkTime;</td>
      </tr>
      <tr>
        <td id="file--L701" class="blob-num js-line-number" data-line-number="701"></td>
        <td id="file--LC701" class="blob-code blob-code-inner js-file-line">    long long workValue;</td>
      </tr>
      <tr>
        <td id="file--L702" class="blob-num js-line-number" data-line-number="702"></td>
        <td id="file--LC702" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L703" class="blob-num js-line-number" data-line-number="703"></td>
        <td id="file--LC703" class="blob-code blob-code-inner js-file-line">    sort(works.rbegin(), works.rend());</td>
      </tr>
      <tr>
        <td id="file--L704" class="blob-num js-line-number" data-line-number="704"></td>
        <td id="file--LC704" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L705" class="blob-num js-line-number" data-line-number="705"></td>
        <td id="file--LC705" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;wSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L706" class="blob-num js-line-number" data-line-number="706"></td>
        <td id="file--LC706" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L707" class="blob-num js-line-number" data-line-number="707"></td>
        <td id="file--LC707" class="blob-code blob-code-inner js-file-line">        gonnaWorkTime = (works[i-1] - works[i])*i;</td>
      </tr>
      <tr>
        <td id="file--L708" class="blob-num js-line-number" data-line-number="708"></td>
        <td id="file--LC708" class="blob-code blob-code-inner js-file-line">        if(gonnaWorkTime &gt; n) break;</td>
      </tr>
      <tr>
        <td id="file--L709" class="blob-num js-line-number" data-line-number="709"></td>
        <td id="file--LC709" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L710" class="blob-num js-line-number" data-line-number="710"></td>
        <td id="file--LC710" class="blob-code blob-code-inner js-file-line">        for(int k=0; k&lt;i; k++)</td>
      </tr>
      <tr>
        <td id="file--L711" class="blob-num js-line-number" data-line-number="711"></td>
        <td id="file--LC711" class="blob-code blob-code-inner js-file-line">            works[k] = works[i];</td>
      </tr>
      <tr>
        <td id="file--L712" class="blob-num js-line-number" data-line-number="712"></td>
        <td id="file--LC712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L713" class="blob-num js-line-number" data-line-number="713"></td>
        <td id="file--LC713" class="blob-code blob-code-inner js-file-line">        n -= gonnaWorkTime;</td>
      </tr>
      <tr>
        <td id="file--L714" class="blob-num js-line-number" data-line-number="714"></td>
        <td id="file--LC714" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L715" class="blob-num js-line-number" data-line-number="715"></td>
        <td id="file--LC715" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L716" class="blob-num js-line-number" data-line-number="716"></td>
        <td id="file--LC716" class="blob-code blob-code-inner js-file-line">    while(n&gt;0)</td>
      </tr>
      <tr>
        <td id="file--L717" class="blob-num js-line-number" data-line-number="717"></td>
        <td id="file--LC717" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L718" class="blob-num js-line-number" data-line-number="718"></td>
        <td id="file--LC718" class="blob-code blob-code-inner js-file-line">        if(works[0]==0) break;</td>
      </tr>
      <tr>
        <td id="file--L719" class="blob-num js-line-number" data-line-number="719"></td>
        <td id="file--LC719" class="blob-code blob-code-inner js-file-line">        works[0] -= 1;</td>
      </tr>
      <tr>
        <td id="file--L720" class="blob-num js-line-number" data-line-number="720"></td>
        <td id="file--LC720" class="blob-code blob-code-inner js-file-line">        sort(works.rbegin(), works.rend());</td>
      </tr>
      <tr>
        <td id="file--L721" class="blob-num js-line-number" data-line-number="721"></td>
        <td id="file--LC721" class="blob-code blob-code-inner js-file-line">        n--;</td>
      </tr>
      <tr>
        <td id="file--L722" class="blob-num js-line-number" data-line-number="722"></td>
        <td id="file--LC722" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L723" class="blob-num js-line-number" data-line-number="723"></td>
        <td id="file--LC723" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L724" class="blob-num js-line-number" data-line-number="724"></td>
        <td id="file--LC724" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;wSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L725" class="blob-num js-line-number" data-line-number="725"></td>
        <td id="file--LC725" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L726" class="blob-num js-line-number" data-line-number="726"></td>
        <td id="file--LC726" class="blob-code blob-code-inner js-file-line">        workValue = works[i];</td>
      </tr>
      <tr>
        <td id="file--L727" class="blob-num js-line-number" data-line-number="727"></td>
        <td id="file--LC727" class="blob-code blob-code-inner js-file-line">        answer += workValue * workValue;</td>
      </tr>
      <tr>
        <td id="file--L728" class="blob-num js-line-number" data-line-number="728"></td>
        <td id="file--LC728" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L729" class="blob-num js-line-number" data-line-number="729"></td>
        <td id="file--LC729" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L730" class="blob-num js-line-number" data-line-number="730"></td>
        <td id="file--LC730" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L731" class="blob-num js-line-number" data-line-number="731"></td>
        <td id="file--LC731" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L732" class="blob-num js-line-number" data-line-number="732"></td>
        <td id="file--LC732" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L733" class="blob-num js-line-number" data-line-number="733"></td>
        <td id="file--LC733" class="blob-code blob-code-inner js-file-line">■ 다음 순열 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L734" class="blob-num js-line-number" data-line-number="734"></td>
        <td id="file--LC734" class="blob-code blob-code-inner js-file-line">1,2,3,4 -&gt; 1,2,4,3 -&gt; 1,3,2,4 이렇게 다음 순열로 변경하는 문제 결국 n!번 횟수를 갖게되는데</td>
      </tr>
      <tr>
        <td id="file--L735" class="blob-num js-line-number" data-line-number="735"></td>
        <td id="file--LC735" class="blob-code blob-code-inner js-file-line">k번째 형태를 구할려면 (n-1)!을 구해서 &#39;k/(n-1)! = 인덱스-1&#39; 과 같으므로 나눈 결과에 +1 해준다음 끌어오면 첫번째 요소를 구할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L736" class="blob-num js-line-number" data-line-number="736"></td>
        <td id="file--LC736" class="blob-code blob-code-inner js-file-line">단, k%(n-1)! == 0 나머지가 0일때는 &#39;k/(n-1)! = 인덱스&#39; 이므로 인덱스 하나 빼줘야한다.</td>
      </tr>
      <tr>
        <td id="file--L737" class="blob-num js-line-number" data-line-number="737"></td>
        <td id="file--LC737" class="blob-code blob-code-inner js-file-line">이 조건을 유지하며 n을 1씩 낮춰주면서 반복하면 k번째 순열을 구할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L738" class="blob-num js-line-number" data-line-number="738"></td>
        <td id="file--LC738" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L739" class="blob-num js-line-number" data-line-number="739"></td>
        <td id="file--LC739" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L740" class="blob-num js-line-number" data-line-number="740"></td>
        <td id="file--LC740" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L741" class="blob-num js-line-number" data-line-number="741"></td>
        <td id="file--LC741" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L742" class="blob-num js-line-number" data-line-number="742"></td>
        <td id="file--LC742" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L743" class="blob-num js-line-number" data-line-number="743"></td>
        <td id="file--LC743" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L744" class="blob-num js-line-number" data-line-number="744"></td>
        <td id="file--LC744" class="blob-code blob-code-inner js-file-line">long long fac(int n)</td>
      </tr>
      <tr>
        <td id="file--L745" class="blob-num js-line-number" data-line-number="745"></td>
        <td id="file--LC745" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L746" class="blob-num js-line-number" data-line-number="746"></td>
        <td id="file--LC746" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L747" class="blob-num js-line-number" data-line-number="747"></td>
        <td id="file--LC747" class="blob-code blob-code-inner js-file-line">    return n&lt;=1 ? 1 : n*fac(n-1);</td>
      </tr>
      <tr>
        <td id="file--L748" class="blob-num js-line-number" data-line-number="748"></td>
        <td id="file--LC748" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L749" class="blob-num js-line-number" data-line-number="749"></td>
        <td id="file--LC749" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L750" class="blob-num js-line-number" data-line-number="750"></td>
        <td id="file--LC750" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; solution(int n, long long k) {</td>
      </tr>
      <tr>
        <td id="file--L751" class="blob-num js-line-number" data-line-number="751"></td>
        <td id="file--LC751" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; answer;</td>
      </tr>
      <tr>
        <td id="file--L752" class="blob-num js-line-number" data-line-number="752"></td>
        <td id="file--LC752" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; nList;</td>
      </tr>
      <tr>
        <td id="file--L753" class="blob-num js-line-number" data-line-number="753"></td>
        <td id="file--LC753" class="blob-code blob-code-inner js-file-line">    long long nSub;</td>
      </tr>
      <tr>
        <td id="file--L754" class="blob-num js-line-number" data-line-number="754"></td>
        <td id="file--LC754" class="blob-code blob-code-inner js-file-line">    long long index;</td>
      </tr>
      <tr>
        <td id="file--L755" class="blob-num js-line-number" data-line-number="755"></td>
        <td id="file--LC755" class="blob-code blob-code-inner js-file-line">    long long mod;</td>
      </tr>
      <tr>
        <td id="file--L756" class="blob-num js-line-number" data-line-number="756"></td>
        <td id="file--LC756" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L757" class="blob-num js-line-number" data-line-number="757"></td>
        <td id="file--LC757" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;n; i++)</td>
      </tr>
      <tr>
        <td id="file--L758" class="blob-num js-line-number" data-line-number="758"></td>
        <td id="file--LC758" class="blob-code blob-code-inner js-file-line">        nList.push_back(i+1);</td>
      </tr>
      <tr>
        <td id="file--L759" class="blob-num js-line-number" data-line-number="759"></td>
        <td id="file--LC759" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L760" class="blob-num js-line-number" data-line-number="760"></td>
        <td id="file--LC760" class="blob-code blob-code-inner js-file-line">    while(n&gt;0)</td>
      </tr>
      <tr>
        <td id="file--L761" class="blob-num js-line-number" data-line-number="761"></td>
        <td id="file--LC761" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L762" class="blob-num js-line-number" data-line-number="762"></td>
        <td id="file--LC762" class="blob-code blob-code-inner js-file-line">        nSub = fac(n-1);</td>
      </tr>
      <tr>
        <td id="file--L763" class="blob-num js-line-number" data-line-number="763"></td>
        <td id="file--LC763" class="blob-code blob-code-inner js-file-line">        index = k/nSub;</td>
      </tr>
      <tr>
        <td id="file--L764" class="blob-num js-line-number" data-line-number="764"></td>
        <td id="file--LC764" class="blob-code blob-code-inner js-file-line">        mod = k%nSub;</td>
      </tr>
      <tr>
        <td id="file--L765" class="blob-num js-line-number" data-line-number="765"></td>
        <td id="file--LC765" class="blob-code blob-code-inner js-file-line">        if(mod==0) { index -= 1; k= nSub; }</td>
      </tr>
      <tr>
        <td id="file--L766" class="blob-num js-line-number" data-line-number="766"></td>
        <td id="file--LC766" class="blob-code blob-code-inner js-file-line">        else k = mod;</td>
      </tr>
      <tr>
        <td id="file--L767" class="blob-num js-line-number" data-line-number="767"></td>
        <td id="file--LC767" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L768" class="blob-num js-line-number" data-line-number="768"></td>
        <td id="file--LC768" class="blob-code blob-code-inner js-file-line">        answer.push_back(nList[index]);</td>
      </tr>
      <tr>
        <td id="file--L769" class="blob-num js-line-number" data-line-number="769"></td>
        <td id="file--LC769" class="blob-code blob-code-inner js-file-line">        nList.erase(nList.begin()+index);</td>
      </tr>
      <tr>
        <td id="file--L770" class="blob-num js-line-number" data-line-number="770"></td>
        <td id="file--LC770" class="blob-code blob-code-inner js-file-line">        n--;</td>
      </tr>
      <tr>
        <td id="file--L771" class="blob-num js-line-number" data-line-number="771"></td>
        <td id="file--LC771" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L772" class="blob-num js-line-number" data-line-number="772"></td>
        <td id="file--LC772" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L773" class="blob-num js-line-number" data-line-number="773"></td>
        <td id="file--LC773" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L774" class="blob-num js-line-number" data-line-number="774"></td>
        <td id="file--LC774" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L775" class="blob-num js-line-number" data-line-number="775"></td>
        <td id="file--LC775" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L776" class="blob-num js-line-number" data-line-number="776"></td>
        <td id="file--LC776" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L777" class="blob-num js-line-number" data-line-number="777"></td>
        <td id="file--LC777" class="blob-code blob-code-inner js-file-line">■ 하노이의 탑 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L778" class="blob-num js-line-number" data-line-number="778"></td>
        <td id="file--LC778" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L779" class="blob-num js-line-number" data-line-number="779"></td>
        <td id="file--LC779" class="blob-code blob-code-inner js-file-line">재귀호출</td>
      </tr>
      <tr>
        <td id="file--L780" class="blob-num js-line-number" data-line-number="780"></td>
        <td id="file--LC780" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L781" class="blob-num js-line-number" data-line-number="781"></td>
        <td id="file--LC781" class="blob-code blob-code-inner js-file-line">1) [1:n-1] 원판을 A에서 B로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L782" class="blob-num js-line-number" data-line-number="782"></td>
        <td id="file--LC782" class="blob-code blob-code-inner js-file-line">    ## 똑같은 과정이 [1:n-2]의 원판에 대해 필요하다. (재귀 호출)</td>
      </tr>
      <tr>
        <td id="file--L783" class="blob-num js-line-number" data-line-number="783"></td>
        <td id="file--LC783" class="blob-code blob-code-inner js-file-line">    1-1) [1:n-2] 원판을 A에서 C로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L784" class="blob-num js-line-number" data-line-number="784"></td>
        <td id="file--LC784" class="blob-code blob-code-inner js-file-line">    1-2) [n-2] 원판을 A에서 B로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L785" class="blob-num js-line-number" data-line-number="785"></td>
        <td id="file--LC785" class="blob-code blob-code-inner js-file-line">    1-3) [1:n-2] 원판을 C에서 B로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L786" class="blob-num js-line-number" data-line-number="786"></td>
        <td id="file--LC786" class="blob-code blob-code-inner js-file-line">2) n 원판을 A에서 C로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L787" class="blob-num js-line-number" data-line-number="787"></td>
        <td id="file--LC787" class="blob-code blob-code-inner js-file-line">3) [1:n-1] 원판을 B에서 C로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L788" class="blob-num js-line-number" data-line-number="788"></td>
        <td id="file--LC788" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L789" class="blob-num js-line-number" data-line-number="789"></td>
        <td id="file--LC789" class="blob-code blob-code-inner js-file-line">hanoi(3, A, B, C)를 호출한 경우를 생각해보자.</td>
      </tr>
      <tr>
        <td id="file--L790" class="blob-num js-line-number" data-line-number="790"></td>
        <td id="file--LC790" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L791" class="blob-num js-line-number" data-line-number="791"></td>
        <td id="file--LC791" class="blob-code blob-code-inner js-file-line">1) hanoi(3, A, B, C) &gt; hanoi(2, A, C, B) &gt; hanoi(1, A, B, C)</td>
      </tr>
      <tr>
        <td id="file--L792" class="blob-num js-line-number" data-line-number="792"></td>
        <td id="file--LC792" class="blob-code blob-code-inner js-file-line">   : 탈출 조건에 의해 &quot;1 원판을 A에서 C로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L793" class="blob-num js-line-number" data-line-number="793"></td>
        <td id="file--LC793" class="blob-code blob-code-inner js-file-line">2) hanoi(3, A, B, C) &gt; hanoi(2, A, C, B)</td>
      </tr>
      <tr>
        <td id="file--L794" class="blob-num js-line-number" data-line-number="794"></td>
        <td id="file--LC794" class="blob-code blob-code-inner js-file-line">   : #2번 과정에 의해 &quot;2 원판을 A에서 B로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L795" class="blob-num js-line-number" data-line-number="795"></td>
        <td id="file--LC795" class="blob-code blob-code-inner js-file-line">3) hanoi(3, A, B, C) &gt; hanoi(2, A, C, B) &gt; hanoi(1, C, A, B)</td>
      </tr>
      <tr>
        <td id="file--L796" class="blob-num js-line-number" data-line-number="796"></td>
        <td id="file--LC796" class="blob-code blob-code-inner js-file-line">   : &quot;1 원판을 C에서 B로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L797" class="blob-num js-line-number" data-line-number="797"></td>
        <td id="file--LC797" class="blob-code blob-code-inner js-file-line">4) hanoi(3, A, B, C)</td>
      </tr>
      <tr>
        <td id="file--L798" class="blob-num js-line-number" data-line-number="798"></td>
        <td id="file--LC798" class="blob-code blob-code-inner js-file-line">   :  #2번 과정에 의해 &quot;3 원판을 A에서 C로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L799" class="blob-num js-line-number" data-line-number="799"></td>
        <td id="file--LC799" class="blob-code blob-code-inner js-file-line">5) hanoi(3, A, B, C) &gt; hanoi(2, B, A, C) &gt; hanoi(1, B, C, A)</td>
      </tr>
      <tr>
        <td id="file--L800" class="blob-num js-line-number" data-line-number="800"></td>
        <td id="file--LC800" class="blob-code blob-code-inner js-file-line">   : &quot;1 원판을 B에서 A로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L801" class="blob-num js-line-number" data-line-number="801"></td>
        <td id="file--LC801" class="blob-code blob-code-inner js-file-line">6) hanoi(3, A, B, C) &gt; hanoi(2, B, A, C)</td>
      </tr>
      <tr>
        <td id="file--L802" class="blob-num js-line-number" data-line-number="802"></td>
        <td id="file--LC802" class="blob-code blob-code-inner js-file-line">   : #2번 과정에 의해 &quot;2 원판을 B에서 C로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L803" class="blob-num js-line-number" data-line-number="803"></td>
        <td id="file--LC803" class="blob-code blob-code-inner js-file-line">7) hanoi(3, A, B, C) &gt; hanoi(2, B, A, C) &gt; hanoi(1, A, B, C)</td>
      </tr>
      <tr>
        <td id="file--L804" class="blob-num js-line-number" data-line-number="804"></td>
        <td id="file--LC804" class="blob-code blob-code-inner js-file-line">   : &quot;1 원판을 A에서 C로 옮긴다.&quot; 출력</td>
      </tr>
      <tr>
        <td id="file--L805" class="blob-num js-line-number" data-line-number="805"></td>
        <td id="file--LC805" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L806" class="blob-num js-line-number" data-line-number="806"></td>
        <td id="file--LC806" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L807" class="blob-num js-line-number" data-line-number="807"></td>
        <td id="file--LC807" class="blob-code blob-code-inner js-file-line">// hanoi 함수 : N개의 원판을 A에서 C로 옮긴다. B를 사용할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L808" class="blob-num js-line-number" data-line-number="808"></td>
        <td id="file--LC808" class="blob-code blob-code-inner js-file-line">hanoi(N, A, B, C) {</td>
      </tr>
      <tr>
        <td id="file--L809" class="blob-num js-line-number" data-line-number="809"></td>
        <td id="file--LC809" class="blob-code blob-code-inner js-file-line">   if( N == 1) {</td>
      </tr>
      <tr>
        <td id="file--L810" class="blob-num js-line-number" data-line-number="810"></td>
        <td id="file--LC810" class="blob-code blob-code-inner js-file-line">      // 원판을 A에서 C로 옮긴다. 탈출 조건으로 작용한다.</td>
      </tr>
      <tr>
        <td id="file--L811" class="blob-num js-line-number" data-line-number="811"></td>
        <td id="file--LC811" class="blob-code blob-code-inner js-file-line">      print &quot;&lt;1&gt; 원판을 &lt;A&gt;에서 &lt;C&gt;로 옮긴다.&quot;</td>
      </tr>
      <tr>
        <td id="file--L812" class="blob-num js-line-number" data-line-number="812"></td>
        <td id="file--LC812" class="blob-code blob-code-inner js-file-line">   } else {</td>
      </tr>
      <tr>
        <td id="file--L813" class="blob-num js-line-number" data-line-number="813"></td>
        <td id="file--LC813" class="blob-code blob-code-inner js-file-line">      //1. [1:N-1] 원판을 A에서 B로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L814" class="blob-num js-line-number" data-line-number="814"></td>
        <td id="file--LC814" class="blob-code blob-code-inner js-file-line">      hanoi(N-1, A, C, B)</td>
      </tr>
      <tr>
        <td id="file--L815" class="blob-num js-line-number" data-line-number="815"></td>
        <td id="file--LC815" class="blob-code blob-code-inner js-file-line">      //2. [N] 원판을 A에서 C로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L816" class="blob-num js-line-number" data-line-number="816"></td>
        <td id="file--LC816" class="blob-code blob-code-inner js-file-line">      print &quot;&lt;N&gt; 원판을 &lt;A&gt;에서 &lt;C&gt;로 옮긴다.&quot;</td>
      </tr>
      <tr>
        <td id="file--L817" class="blob-num js-line-number" data-line-number="817"></td>
        <td id="file--LC817" class="blob-code blob-code-inner js-file-line">      //3. [1:N-1] 원판을 B에서 C로 옮긴다.</td>
      </tr>
      <tr>
        <td id="file--L818" class="blob-num js-line-number" data-line-number="818"></td>
        <td id="file--LC818" class="blob-code blob-code-inner js-file-line">      hanoi(N-1, B, A, C)</td>
      </tr>
      <tr>
        <td id="file--L819" class="blob-num js-line-number" data-line-number="819"></td>
        <td id="file--LC819" class="blob-code blob-code-inner js-file-line">   }</td>
      </tr>
      <tr>
        <td id="file--L820" class="blob-num js-line-number" data-line-number="820"></td>
        <td id="file--LC820" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L821" class="blob-num js-line-number" data-line-number="821"></td>
        <td id="file--LC821" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L822" class="blob-num js-line-number" data-line-number="822"></td>
        <td id="file--LC822" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L823" class="blob-num js-line-number" data-line-number="823"></td>
        <td id="file--LC823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L824" class="blob-num js-line-number" data-line-number="824"></td>
        <td id="file--LC824" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L825" class="blob-num js-line-number" data-line-number="825"></td>
        <td id="file--LC825" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L826" class="blob-num js-line-number" data-line-number="826"></td>
        <td id="file--LC826" class="blob-code blob-code-inner js-file-line">vector&lt;vector&lt;int&gt;&gt; answer;</td>
      </tr>
      <tr>
        <td id="file--L827" class="blob-num js-line-number" data-line-number="827"></td>
        <td id="file--LC827" class="blob-code blob-code-inner js-file-line">int count=0;</td>
      </tr>
      <tr>
        <td id="file--L828" class="blob-num js-line-number" data-line-number="828"></td>
        <td id="file--LC828" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L829" class="blob-num js-line-number" data-line-number="829"></td>
        <td id="file--LC829" class="blob-code blob-code-inner js-file-line">void hanoi(int n, int from, int by, int to);</td>
      </tr>
      <tr>
        <td id="file--L830" class="blob-num js-line-number" data-line-number="830"></td>
        <td id="file--LC830" class="blob-code blob-code-inner js-file-line">void move(int from, int to);</td>
      </tr>
      <tr>
        <td id="file--L831" class="blob-num js-line-number" data-line-number="831"></td>
        <td id="file--LC831" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L832" class="blob-num js-line-number" data-line-number="832"></td>
        <td id="file--LC832" class="blob-code blob-code-inner js-file-line">vector&lt;vector&lt;int&gt;&gt; solution(int n) {</td>
      </tr>
      <tr>
        <td id="file--L833" class="blob-num js-line-number" data-line-number="833"></td>
        <td id="file--LC833" class="blob-code blob-code-inner js-file-line">    hanoi(n,1,2,3);</td>
      </tr>
      <tr>
        <td id="file--L834" class="blob-num js-line-number" data-line-number="834"></td>
        <td id="file--LC834" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L835" class="blob-num js-line-number" data-line-number="835"></td>
        <td id="file--LC835" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L836" class="blob-num js-line-number" data-line-number="836"></td>
        <td id="file--LC836" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L837" class="blob-num js-line-number" data-line-number="837"></td>
        <td id="file--LC837" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L838" class="blob-num js-line-number" data-line-number="838"></td>
        <td id="file--LC838" class="blob-code blob-code-inner js-file-line">void hanoi(int n, int from, int by, int to)</td>
      </tr>
      <tr>
        <td id="file--L839" class="blob-num js-line-number" data-line-number="839"></td>
        <td id="file--LC839" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L840" class="blob-num js-line-number" data-line-number="840"></td>
        <td id="file--LC840" class="blob-code blob-code-inner js-file-line">    if(n==1) move(from, to);</td>
      </tr>
      <tr>
        <td id="file--L841" class="blob-num js-line-number" data-line-number="841"></td>
        <td id="file--LC841" class="blob-code blob-code-inner js-file-line">    else </td>
      </tr>
      <tr>
        <td id="file--L842" class="blob-num js-line-number" data-line-number="842"></td>
        <td id="file--LC842" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L843" class="blob-num js-line-number" data-line-number="843"></td>
        <td id="file--LC843" class="blob-code blob-code-inner js-file-line">        hanoi(n-1, from, to, by);</td>
      </tr>
      <tr>
        <td id="file--L844" class="blob-num js-line-number" data-line-number="844"></td>
        <td id="file--LC844" class="blob-code blob-code-inner js-file-line">        move(from, to);</td>
      </tr>
      <tr>
        <td id="file--L845" class="blob-num js-line-number" data-line-number="845"></td>
        <td id="file--LC845" class="blob-code blob-code-inner js-file-line">        hanoi(n-1, by, from, to);</td>
      </tr>
      <tr>
        <td id="file--L846" class="blob-num js-line-number" data-line-number="846"></td>
        <td id="file--LC846" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L847" class="blob-num js-line-number" data-line-number="847"></td>
        <td id="file--LC847" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L848" class="blob-num js-line-number" data-line-number="848"></td>
        <td id="file--LC848" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L849" class="blob-num js-line-number" data-line-number="849"></td>
        <td id="file--LC849" class="blob-code blob-code-inner js-file-line">void move(int from, int to)</td>
      </tr>
      <tr>
        <td id="file--L850" class="blob-num js-line-number" data-line-number="850"></td>
        <td id="file--LC850" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L851" class="blob-num js-line-number" data-line-number="851"></td>
        <td id="file--LC851" class="blob-code blob-code-inner js-file-line">    answer.push_back(vector&lt;int&gt;());</td>
      </tr>
      <tr>
        <td id="file--L852" class="blob-num js-line-number" data-line-number="852"></td>
        <td id="file--LC852" class="blob-code blob-code-inner js-file-line">    answer[count].push_back(from);</td>
      </tr>
      <tr>
        <td id="file--L853" class="blob-num js-line-number" data-line-number="853"></td>
        <td id="file--LC853" class="blob-code blob-code-inner js-file-line">    answer[count].push_back(to);</td>
      </tr>
      <tr>
        <td id="file--L854" class="blob-num js-line-number" data-line-number="854"></td>
        <td id="file--LC854" class="blob-code blob-code-inner js-file-line">    count += 1;</td>
      </tr>
      <tr>
        <td id="file--L855" class="blob-num js-line-number" data-line-number="855"></td>
        <td id="file--LC855" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L856" class="blob-num js-line-number" data-line-number="856"></td>
        <td id="file--LC856" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L857" class="blob-num js-line-number" data-line-number="857"></td>
        <td id="file--LC857" class="blob-code blob-code-inner js-file-line">■ dp 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L858" class="blob-num js-line-number" data-line-number="858"></td>
        <td id="file--LC858" class="blob-code blob-code-inner js-file-line">거스름돈 알고리즘을 효율성 문제로 통과하지 못했다.</td>
      </tr>
      <tr>
        <td id="file--L859" class="blob-num js-line-number" data-line-number="859"></td>
        <td id="file--LC859" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L860" class="blob-num js-line-number" data-line-number="860"></td>
        <td id="file--LC860" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L861" class="blob-num js-line-number" data-line-number="861"></td>
        <td id="file--LC861" class="blob-code blob-code-inner js-file-line">#define mod 1000000007LL</td>
      </tr>
      <tr>
        <td id="file--L862" class="blob-num js-line-number" data-line-number="862"></td>
        <td id="file--LC862" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L863" class="blob-num js-line-number" data-line-number="863"></td>
        <td id="file--LC863" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L864" class="blob-num js-line-number" data-line-number="864"></td>
        <td id="file--LC864" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L865" class="blob-num js-line-number" data-line-number="865"></td>
        <td id="file--LC865" class="blob-code blob-code-inner js-file-line">long long ableNum = 0;</td>
      </tr>
      <tr>
        <td id="file--L866" class="blob-num js-line-number" data-line-number="866"></td>
        <td id="file--LC866" class="blob-code blob-code-inner js-file-line">int mList = 0;</td>
      </tr>
      <tr>
        <td id="file--L867" class="blob-num js-line-number" data-line-number="867"></td>
        <td id="file--LC867" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; maxMoneyList;</td>
      </tr>
      <tr>
        <td id="file--L868" class="blob-num js-line-number" data-line-number="868"></td>
        <td id="file--LC868" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; moneyValue;</td>
      </tr>
      <tr>
        <td id="file--L869" class="blob-num js-line-number" data-line-number="869"></td>
        <td id="file--LC869" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L870" class="blob-num js-line-number" data-line-number="870"></td>
        <td id="file--LC870" class="blob-code blob-code-inner js-file-line">void ableCount(int totMoney, int idx);</td>
      </tr>
      <tr>
        <td id="file--L871" class="blob-num js-line-number" data-line-number="871"></td>
        <td id="file--LC871" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L872" class="blob-num js-line-number" data-line-number="872"></td>
        <td id="file--LC872" class="blob-code blob-code-inner js-file-line">int solution(int n, vector&lt;int&gt; money) {</td>
      </tr>
      <tr>
        <td id="file--L873" class="blob-num js-line-number" data-line-number="873"></td>
        <td id="file--LC873" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L874" class="blob-num js-line-number" data-line-number="874"></td>
        <td id="file--LC874" class="blob-code blob-code-inner js-file-line">    int totMoney = n;</td>
      </tr>
      <tr>
        <td id="file--L875" class="blob-num js-line-number" data-line-number="875"></td>
        <td id="file--LC875" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L876" class="blob-num js-line-number" data-line-number="876"></td>
        <td id="file--LC876" class="blob-code blob-code-inner js-file-line">    mList = money.size();</td>
      </tr>
      <tr>
        <td id="file--L877" class="blob-num js-line-number" data-line-number="877"></td>
        <td id="file--LC877" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L878" class="blob-num js-line-number" data-line-number="878"></td>
        <td id="file--LC878" class="blob-code blob-code-inner js-file-line">    sort(money.rbegin(), money.rend());</td>
      </tr>
      <tr>
        <td id="file--L879" class="blob-num js-line-number" data-line-number="879"></td>
        <td id="file--LC879" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L880" class="blob-num js-line-number" data-line-number="880"></td>
        <td id="file--LC880" class="blob-code blob-code-inner js-file-line">    moneyValue = money;</td>
      </tr>
      <tr>
        <td id="file--L881" class="blob-num js-line-number" data-line-number="881"></td>
        <td id="file--LC881" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L882" class="blob-num js-line-number" data-line-number="882"></td>
        <td id="file--LC882" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;mList; i++)</td>
      </tr>
      <tr>
        <td id="file--L883" class="blob-num js-line-number" data-line-number="883"></td>
        <td id="file--LC883" class="blob-code blob-code-inner js-file-line">        maxMoneyList.push_back(n/money[i]);</td>
      </tr>
      <tr>
        <td id="file--L884" class="blob-num js-line-number" data-line-number="884"></td>
        <td id="file--LC884" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L885" class="blob-num js-line-number" data-line-number="885"></td>
        <td id="file--LC885" class="blob-code blob-code-inner js-file-line">    for (int i=0; i&lt;mList; i++) {</td>
      </tr>
      <tr>
        <td id="file--L886" class="blob-num js-line-number" data-line-number="886"></td>
        <td id="file--LC886" class="blob-code blob-code-inner js-file-line">        if(i==mList-1) {</td>
      </tr>
      <tr>
        <td id="file--L887" class="blob-num js-line-number" data-line-number="887"></td>
        <td id="file--LC887" class="blob-code blob-code-inner js-file-line">            if(totMoney==maxMoneyList[i]) ableNum++;</td>
      </tr>
      <tr>
        <td id="file--L888" class="blob-num js-line-number" data-line-number="888"></td>
        <td id="file--LC888" class="blob-code blob-code-inner js-file-line">            break;</td>
      </tr>
      <tr>
        <td id="file--L889" class="blob-num js-line-number" data-line-number="889"></td>
        <td id="file--LC889" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L890" class="blob-num js-line-number" data-line-number="890"></td>
        <td id="file--LC890" class="blob-code blob-code-inner js-file-line">        for (int j=1; j&lt;=maxMoneyList[i]; j++) {</td>
      </tr>
      <tr>
        <td id="file--L891" class="blob-num js-line-number" data-line-number="891"></td>
        <td id="file--LC891" class="blob-code blob-code-inner js-file-line">            totMoney -= moneyValue[i]*j;</td>
      </tr>
      <tr>
        <td id="file--L892" class="blob-num js-line-number" data-line-number="892"></td>
        <td id="file--LC892" class="blob-code blob-code-inner js-file-line">            if(totMoney==0) { ableNum++; continue; }</td>
      </tr>
      <tr>
        <td id="file--L893" class="blob-num js-line-number" data-line-number="893"></td>
        <td id="file--LC893" class="blob-code blob-code-inner js-file-line">            else if(totMoney&lt;0) break;</td>
      </tr>
      <tr>
        <td id="file--L894" class="blob-num js-line-number" data-line-number="894"></td>
        <td id="file--LC894" class="blob-code blob-code-inner js-file-line">            ableCount(totMoney, i+1);</td>
      </tr>
      <tr>
        <td id="file--L895" class="blob-num js-line-number" data-line-number="895"></td>
        <td id="file--LC895" class="blob-code blob-code-inner js-file-line">            totMoney = n;</td>
      </tr>
      <tr>
        <td id="file--L896" class="blob-num js-line-number" data-line-number="896"></td>
        <td id="file--LC896" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L897" class="blob-num js-line-number" data-line-number="897"></td>
        <td id="file--LC897" class="blob-code blob-code-inner js-file-line">        totMoney = n;</td>
      </tr>
      <tr>
        <td id="file--L898" class="blob-num js-line-number" data-line-number="898"></td>
        <td id="file--LC898" class="blob-code blob-code-inner js-file-line">        ableNum %= mod;</td>
      </tr>
      <tr>
        <td id="file--L899" class="blob-num js-line-number" data-line-number="899"></td>
        <td id="file--LC899" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L900" class="blob-num js-line-number" data-line-number="900"></td>
        <td id="file--LC900" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L901" class="blob-num js-line-number" data-line-number="901"></td>
        <td id="file--LC901" class="blob-code blob-code-inner js-file-line">    ableNum %= mod;</td>
      </tr>
      <tr>
        <td id="file--L902" class="blob-num js-line-number" data-line-number="902"></td>
        <td id="file--LC902" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L903" class="blob-num js-line-number" data-line-number="903"></td>
        <td id="file--LC903" class="blob-code blob-code-inner js-file-line">    return answer=ableNum;</td>
      </tr>
      <tr>
        <td id="file--L904" class="blob-num js-line-number" data-line-number="904"></td>
        <td id="file--LC904" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L905" class="blob-num js-line-number" data-line-number="905"></td>
        <td id="file--LC905" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L906" class="blob-num js-line-number" data-line-number="906"></td>
        <td id="file--LC906" class="blob-code blob-code-inner js-file-line">void ableCount(int totMoney, int idx)</td>
      </tr>
      <tr>
        <td id="file--L907" class="blob-num js-line-number" data-line-number="907"></td>
        <td id="file--LC907" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L908" class="blob-num js-line-number" data-line-number="908"></td>
        <td id="file--LC908" class="blob-code blob-code-inner js-file-line">    int totMoneyOri = totMoney;</td>
      </tr>
      <tr>
        <td id="file--L909" class="blob-num js-line-number" data-line-number="909"></td>
        <td id="file--LC909" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;maxMoneyList[idx]; i++)</td>
      </tr>
      <tr>
        <td id="file--L910" class="blob-num js-line-number" data-line-number="910"></td>
        <td id="file--LC910" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L911" class="blob-num js-line-number" data-line-number="911"></td>
        <td id="file--LC911" class="blob-code blob-code-inner js-file-line">        totMoney -= moneyValue[idx]*i;</td>
      </tr>
      <tr>
        <td id="file--L912" class="blob-num js-line-number" data-line-number="912"></td>
        <td id="file--LC912" class="blob-code blob-code-inner js-file-line">        if(totMoney==0) { ableNum++; return; }</td>
      </tr>
      <tr>
        <td id="file--L913" class="blob-num js-line-number" data-line-number="913"></td>
        <td id="file--LC913" class="blob-code blob-code-inner js-file-line">        else if(totMoney&lt;0) return;</td>
      </tr>
      <tr>
        <td id="file--L914" class="blob-num js-line-number" data-line-number="914"></td>
        <td id="file--LC914" class="blob-code blob-code-inner js-file-line">        else if(idx!=mList) ableCount(totMoney, idx+1);</td>
      </tr>
      <tr>
        <td id="file--L915" class="blob-num js-line-number" data-line-number="915"></td>
        <td id="file--LC915" class="blob-code blob-code-inner js-file-line">        totMoney = totMoneyOri;</td>
      </tr>
      <tr>
        <td id="file--L916" class="blob-num js-line-number" data-line-number="916"></td>
        <td id="file--LC916" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L917" class="blob-num js-line-number" data-line-number="917"></td>
        <td id="file--LC917" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L918" class="blob-num js-line-number" data-line-number="918"></td>
        <td id="file--LC918" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L919" class="blob-num js-line-number" data-line-number="919"></td>
        <td id="file--LC919" class="blob-code blob-code-inner js-file-line">DP로 풀었더니 가능</td>
      </tr>
      <tr>
        <td id="file--L920" class="blob-num js-line-number" data-line-number="920"></td>
        <td id="file--LC920" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L921" class="blob-num js-line-number" data-line-number="921"></td>
        <td id="file--LC921" class="blob-code blob-code-inner js-file-line">난 큰것 부터 생각했는데 경우의 수 줄여가며 나머지가 없이 딱 맞을 때를 생각했는데,</td>
      </tr>
      <tr>
        <td id="file--L922" class="blob-num js-line-number" data-line-number="922"></td>
        <td id="file--LC922" class="blob-code blob-code-inner js-file-line">작은 것부터 생각해서 나머지 생각 없이 나눠서 더해주는 방식으로 가면되는 것.</td>
      </tr>
      <tr>
        <td id="file--L923" class="blob-num js-line-number" data-line-number="923"></td>
        <td id="file--LC923" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L924" class="blob-num js-line-number" data-line-number="924"></td>
        <td id="file--LC924" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L925" class="blob-num js-line-number" data-line-number="925"></td>
        <td id="file--LC925" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L926" class="blob-num js-line-number" data-line-number="926"></td>
        <td id="file--LC926" class="blob-code blob-code-inner js-file-line">#define mod 1000000007L</td>
      </tr>
      <tr>
        <td id="file--L927" class="blob-num js-line-number" data-line-number="927"></td>
        <td id="file--LC927" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L928" class="blob-num js-line-number" data-line-number="928"></td>
        <td id="file--LC928" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L929" class="blob-num js-line-number" data-line-number="929"></td>
        <td id="file--LC929" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L930" class="blob-num js-line-number" data-line-number="930"></td>
        <td id="file--LC930" class="blob-code blob-code-inner js-file-line">int solution(int n, vector&lt;int&gt; money) {</td>
      </tr>
      <tr>
        <td id="file--L931" class="blob-num js-line-number" data-line-number="931"></td>
        <td id="file--LC931" class="blob-code blob-code-inner js-file-line">    int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L932" class="blob-num js-line-number" data-line-number="932"></td>
        <td id="file--LC932" class="blob-code blob-code-inner js-file-line">    int mSize = money.size();</td>
      </tr>
      <tr>
        <td id="file--L933" class="blob-num js-line-number" data-line-number="933"></td>
        <td id="file--LC933" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L934" class="blob-num js-line-number" data-line-number="934"></td>
        <td id="file--LC934" class="blob-code blob-code-inner js-file-line">    long *dp = new long[n+1];</td>
      </tr>
      <tr>
        <td id="file--L935" class="blob-num js-line-number" data-line-number="935"></td>
        <td id="file--LC935" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L936" class="blob-num js-line-number" data-line-number="936"></td>
        <td id="file--LC936" class="blob-code blob-code-inner js-file-line">    sort(money.begin(), money.end());</td>
      </tr>
      <tr>
        <td id="file--L937" class="blob-num js-line-number" data-line-number="937"></td>
        <td id="file--LC937" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L938" class="blob-num js-line-number" data-line-number="938"></td>
        <td id="file--LC938" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;=n; i++)</td>
      </tr>
      <tr>
        <td id="file--L939" class="blob-num js-line-number" data-line-number="939"></td>
        <td id="file--LC939" class="blob-code blob-code-inner js-file-line">        dp[i] = (i%money[0]==0) ? 1 : 0 ;</td>
      </tr>
      <tr>
        <td id="file--L940" class="blob-num js-line-number" data-line-number="940"></td>
        <td id="file--LC940" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L941" class="blob-num js-line-number" data-line-number="941"></td>
        <td id="file--LC941" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;mSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L942" class="blob-num js-line-number" data-line-number="942"></td>
        <td id="file--LC942" class="blob-code blob-code-inner js-file-line">        for(int j=money[i]; j&lt;=n; j++)</td>
      </tr>
      <tr>
        <td id="file--L943" class="blob-num js-line-number" data-line-number="943"></td>
        <td id="file--LC943" class="blob-code blob-code-inner js-file-line">            dp[j] += dp[j-money[i]];</td>
      </tr>
      <tr>
        <td id="file--L944" class="blob-num js-line-number" data-line-number="944"></td>
        <td id="file--LC944" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L945" class="blob-num js-line-number" data-line-number="945"></td>
        <td id="file--LC945" class="blob-code blob-code-inner js-file-line">    return answer= (int)(dp[n] % mod);</td>
      </tr>
      <tr>
        <td id="file--L946" class="blob-num js-line-number" data-line-number="946"></td>
        <td id="file--LC946" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L947" class="blob-num js-line-number" data-line-number="947"></td>
        <td id="file--LC947" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L948" class="blob-num js-line-number" data-line-number="948"></td>
        <td id="file--LC948" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L949" class="blob-num js-line-number" data-line-number="949"></td>
        <td id="file--LC949" class="blob-code blob-code-inner js-file-line">■ 원의 교집합 구하기 (NumberOfDiscIntersections)</td>
      </tr>
      <tr>
        <td id="file--L950" class="blob-num js-line-number" data-line-number="950"></td>
        <td id="file--LC950" class="blob-code blob-code-inner js-file-line">평면 상의 디스크들의 접점의 수를 구하라</td>
      </tr>
      <tr>
        <td id="file--L951" class="blob-num js-line-number" data-line-number="951"></td>
        <td id="file--LC951" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L952" class="blob-num js-line-number" data-line-number="952"></td>
        <td id="file--LC952" class="blob-code blob-code-inner js-file-line">가장 단순하게 각 디스크의 Left/Right가 다른 디스크의 Left, Right 사이에 포함되는 지 비교했다.</td>
      </tr>
      <tr>
        <td id="file--L953" class="blob-num js-line-number" data-line-number="953"></td>
        <td id="file--LC953" class="blob-code blob-code-inner js-file-line">당연하게도 O(N^2)의 복잡도로는 O(N * lg(N))의 성능 테스트를 통과할 수 없었다.</td>
      </tr>
      <tr>
        <td id="file--L954" class="blob-num js-line-number" data-line-number="954"></td>
        <td id="file--LC954" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L955" class="blob-num js-line-number" data-line-number="955"></td>
        <td id="file--LC955" class="blob-code blob-code-inner js-file-line">Left와 Right가 각각 정렬되어 있을 때, 가장 작은 Right(O 마크)보다</td>
      </tr>
      <tr>
        <td id="file--L956" class="blob-num js-line-number" data-line-number="956"></td>
        <td id="file--LC956" class="blob-code blob-code-inner js-file-line">작은 Left(V 마크)들은 반드시 가장 작은 Right(O 마크)보다 큰 Right를 갖는다. 즉, 접점을 갖는다.</td>
      </tr>
      <tr>
        <td id="file--L957" class="blob-num js-line-number" data-line-number="957"></td>
        <td id="file--LC957" class="blob-code blob-code-inner js-file-line">O 마크의 Right가 가장 작으니까 당연히 나머지 Right들은 그보다 크다.</td>
      </tr>
      <tr>
        <td id="file--L958" class="blob-num js-line-number" data-line-number="958"></td>
        <td id="file--LC958" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L959" class="blob-num js-line-number" data-line-number="959"></td>
        <td id="file--LC959" class="blob-code blob-code-inner js-file-line">이 작업을 각 Right마다 새로 하는 것이 아니라 Accumulate하게 진행한다.</td>
      </tr>
      <tr>
        <td id="file--L960" class="blob-num js-line-number" data-line-number="960"></td>
        <td id="file--LC960" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L961" class="blob-num js-line-number" data-line-number="961"></td>
        <td id="file--LC961" class="blob-code blob-code-inner js-file-line">R &gt; L 인 L의 수(current)를 구한다.</td>
      </tr>
      <tr>
        <td id="file--L962" class="blob-num js-line-number" data-line-number="962"></td>
        <td id="file--LC962" class="blob-code blob-code-inner js-file-line">–current;</td>
      </tr>
      <tr>
        <td id="file--L963" class="blob-num js-line-number" data-line-number="963"></td>
        <td id="file--LC963" class="blob-code blob-code-inner js-file-line">current는 반드시 자기 자신을 포함한다.</td>
      </tr>
      <tr>
        <td id="file--L964" class="blob-num js-line-number" data-line-number="964"></td>
        <td id="file--LC964" class="blob-code blob-code-inner js-file-line">또한 다음 R에서 겹치지 않을 수 있는 경우의 수를 제거한다.</td>
      </tr>
      <tr>
        <td id="file--L965" class="blob-num js-line-number" data-line-number="965"></td>
        <td id="file--LC965" class="blob-code blob-code-inner js-file-line">current는 초기화하지 않고 계속해서 사용한다.</td>
      </tr>
      <tr>
        <td id="file--L966" class="blob-num js-line-number" data-line-number="966"></td>
        <td id="file--LC966" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L967" class="blob-num js-line-number" data-line-number="967"></td>
        <td id="file--LC967" class="blob-code blob-code-inner js-file-line">[코드]</td>
      </tr>
      <tr>
        <td id="file--L968" class="blob-num js-line-number" data-line-number="968"></td>
        <td id="file--LC968" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L969" class="blob-num js-line-number" data-line-number="969"></td>
        <td id="file--LC969" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L970" class="blob-num js-line-number" data-line-number="970"></td>
        <td id="file--LC970" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L971" class="blob-num js-line-number" data-line-number="971"></td>
        <td id="file--LC971" class="blob-code blob-code-inner js-file-line">int solution(vector&lt;int&gt; &amp;A) </td>
      </tr>
      <tr>
        <td id="file--L972" class="blob-num js-line-number" data-line-number="972"></td>
        <td id="file--LC972" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L973" class="blob-num js-line-number" data-line-number="973"></td>
        <td id="file--LC973" class="blob-code blob-code-inner js-file-line">	unsigned int N = A.size();</td>
      </tr>
      <tr>
        <td id="file--L974" class="blob-num js-line-number" data-line-number="974"></td>
        <td id="file--LC974" class="blob-code blob-code-inner js-file-line">	std::vector&lt;long long&gt;left(N), right(N);</td>
      </tr>
      <tr>
        <td id="file--L975" class="blob-num js-line-number" data-line-number="975"></td>
        <td id="file--LC975" class="blob-code blob-code-inner js-file-line">    // 계산되는 값들의 타입을 맞춰주도록 한다</td>
      </tr>
      <tr>
        <td id="file--L976" class="blob-num js-line-number" data-line-number="976"></td>
        <td id="file--LC976" class="blob-code blob-code-inner js-file-line">	for (unsigned long long i = 0; i &lt; N; ++i)</td>
      </tr>
      <tr>
        <td id="file--L977" class="blob-num js-line-number" data-line-number="977"></td>
        <td id="file--LC977" class="blob-code blob-code-inner js-file-line">	{</td>
      </tr>
      <tr>
        <td id="file--L978" class="blob-num js-line-number" data-line-number="978"></td>
        <td id="file--LC978" class="blob-code blob-code-inner js-file-line">		left[i] = i - A[i];</td>
      </tr>
      <tr>
        <td id="file--L979" class="blob-num js-line-number" data-line-number="979"></td>
        <td id="file--LC979" class="blob-code blob-code-inner js-file-line">		right[i] = i + A[i];</td>
      </tr>
      <tr>
        <td id="file--L980" class="blob-num js-line-number" data-line-number="980"></td>
        <td id="file--LC980" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L981" class="blob-num js-line-number" data-line-number="981"></td>
        <td id="file--LC981" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L982" class="blob-num js-line-number" data-line-number="982"></td>
        <td id="file--LC982" class="blob-code blob-code-inner js-file-line">	std::sort(left.begin(), left.end());</td>
      </tr>
      <tr>
        <td id="file--L983" class="blob-num js-line-number" data-line-number="983"></td>
        <td id="file--LC983" class="blob-code blob-code-inner js-file-line">	std::sort(right.begin(), right.end());</td>
      </tr>
      <tr>
        <td id="file--L984" class="blob-num js-line-number" data-line-number="984"></td>
        <td id="file--LC984" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L985" class="blob-num js-line-number" data-line-number="985"></td>
        <td id="file--LC985" class="blob-code blob-code-inner js-file-line">	long long result{}, current{};</td>
      </tr>
      <tr>
        <td id="file--L986" class="blob-num js-line-number" data-line-number="986"></td>
        <td id="file--LC986" class="blob-code blob-code-inner js-file-line">	unsigned long long lIndex{}, rIndex{};</td>
      </tr>
      <tr>
        <td id="file--L987" class="blob-num js-line-number" data-line-number="987"></td>
        <td id="file--LC987" class="blob-code blob-code-inner js-file-line">	for (auto i = 0; i &lt; N; ++i)</td>
      </tr>
      <tr>
        <td id="file--L988" class="blob-num js-line-number" data-line-number="988"></td>
        <td id="file--LC988" class="blob-code blob-code-inner js-file-line">	{</td>
      </tr>
      <tr>
        <td id="file--L989" class="blob-num js-line-number" data-line-number="989"></td>
        <td id="file--LC989" class="blob-code blob-code-inner js-file-line">		while (lIndex &lt; N &amp;&amp; left[lIndex] &lt;= right[rIndex])</td>
      </tr>
      <tr>
        <td id="file--L990" class="blob-num js-line-number" data-line-number="990"></td>
        <td id="file--LC990" class="blob-code blob-code-inner js-file-line">		{</td>
      </tr>
      <tr>
        <td id="file--L991" class="blob-num js-line-number" data-line-number="991"></td>
        <td id="file--LC991" class="blob-code blob-code-inner js-file-line">		    ++current;</td>
      </tr>
      <tr>
        <td id="file--L992" class="blob-num js-line-number" data-line-number="992"></td>
        <td id="file--LC992" class="blob-code blob-code-inner js-file-line">			++lIndex;</td>
      </tr>
      <tr>
        <td id="file--L993" class="blob-num js-line-number" data-line-number="993"></td>
        <td id="file--LC993" class="blob-code blob-code-inner js-file-line">		}</td>
      </tr>
      <tr>
        <td id="file--L994" class="blob-num js-line-number" data-line-number="994"></td>
        <td id="file--LC994" class="blob-code blob-code-inner js-file-line">		--current;</td>
      </tr>
      <tr>
        <td id="file--L995" class="blob-num js-line-number" data-line-number="995"></td>
        <td id="file--LC995" class="blob-code blob-code-inner js-file-line">		result += current;</td>
      </tr>
      <tr>
        <td id="file--L996" class="blob-num js-line-number" data-line-number="996"></td>
        <td id="file--LC996" class="blob-code blob-code-inner js-file-line">		++rIndex;</td>
      </tr>
      <tr>
        <td id="file--L997" class="blob-num js-line-number" data-line-number="997"></td>
        <td id="file--LC997" class="blob-code blob-code-inner js-file-line">        std::cout &lt;&lt; current &lt;&lt; &quot; &quot;;</td>
      </tr>
      <tr>
        <td id="file--L998" class="blob-num js-line-number" data-line-number="998"></td>
        <td id="file--LC998" class="blob-code blob-code-inner js-file-line">		if (result &gt; 10000000)</td>
      </tr>
      <tr>
        <td id="file--L999" class="blob-num js-line-number" data-line-number="999"></td>
        <td id="file--LC999" class="blob-code blob-code-inner js-file-line">			return -1;</td>
      </tr>
      <tr>
        <td id="file--L1000" class="blob-num js-line-number" data-line-number="1000"></td>
        <td id="file--LC1000" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L1001" class="blob-num js-line-number" data-line-number="1001"></td>
        <td id="file--LC1001" class="blob-code blob-code-inner js-file-line">	return result;</td>
      </tr>
      <tr>
        <td id="file--L1002" class="blob-num js-line-number" data-line-number="1002"></td>
        <td id="file--LC1002" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1003" class="blob-num js-line-number" data-line-number="1003"></td>
        <td id="file--LC1003" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1004" class="blob-num js-line-number" data-line-number="1004"></td>
        <td id="file--LC1004" class="blob-code blob-code-inner js-file-line">■ 카탈란 수 (Catalan number) 알고리즘 binomial = 조합</td>
      </tr>
      <tr>
        <td id="file--L1005" class="blob-num js-line-number" data-line-number="1005"></td>
        <td id="file--LC1005" class="blob-code blob-code-inner js-file-line">오일러가 &quot;(n+2)-각형을 n개의 삼각형으로 나눌 수 있는 경우의 수&quot;를 세는 문제를 제안하면서 처음 나타났다.</td>
      </tr>
      <tr>
        <td id="file--L1006" class="blob-num js-line-number" data-line-number="1006"></td>
        <td id="file--LC1006" class="blob-code blob-code-inner js-file-line">벨기에의 수학자 카탈란의 이름을 따서 정해졌다.</td>
      </tr>
      <tr>
        <td id="file--L1007" class="blob-num js-line-number" data-line-number="1007"></td>
        <td id="file--LC1007" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1008" class="blob-num js-line-number" data-line-number="1008"></td>
        <td id="file--LC1008" class="blob-code blob-code-inner js-file-line">x = binomial(bin, 2*n, n) - binomial(bin, 2*n, n+1) </td>
      </tr>
      <tr>
        <td id="file--L1009" class="blob-num js-line-number" data-line-number="1009"></td>
        <td id="file--LC1009" class="blob-code blob-code-inner js-file-line">0이상의 n에대해서 x= (2n)!/n!(n+1)! </td>
      </tr>
      <tr>
        <td id="file--L1010" class="blob-num js-line-number" data-line-number="1010"></td>
        <td id="file--LC1010" class="blob-code blob-code-inner js-file-line">m.factorial(2*n) / (m.factorial(n+1) * m.factorial(n))</td>
      </tr>
      <tr>
        <td id="file--L1011" class="blob-num js-line-number" data-line-number="1011"></td>
        <td id="file--LC1011" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1012" class="blob-num js-line-number" data-line-number="1012"></td>
        <td id="file--LC1012" class="blob-code blob-code-inner js-file-line">1, 1, 2, 5, 14, 42, 132, 429, 1430, 4862, 16796 ... </td>
      </tr>
      <tr>
        <td id="file--L1013" class="blob-num js-line-number" data-line-number="1013"></td>
        <td id="file--LC1013" class="blob-code blob-code-inner js-file-line">0번째 부터</td>
      </tr>
      <tr>
        <td id="file--L1014" class="blob-num js-line-number" data-line-number="1014"></td>
        <td id="file--LC1014" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1015" class="blob-num js-line-number" data-line-number="1015"></td>
        <td id="file--LC1015" class="blob-code blob-code-inner js-file-line">- 괄호의 개수구하기 문제</td>
      </tr>
      <tr>
        <td id="file--L1016" class="blob-num js-line-number" data-line-number="1016"></td>
        <td id="file--LC1016" class="blob-code blob-code-inner js-file-line">- 최적의 길 개수구하기</td>
      </tr>
      <tr>
        <td id="file--L1017" class="blob-num js-line-number" data-line-number="1017"></td>
        <td id="file--LC1017" class="blob-code blob-code-inner js-file-line">- 산만들기</td>
      </tr>
      <tr>
        <td id="file--L1018" class="blob-num js-line-number" data-line-number="1018"></td>
        <td id="file--LC1018" class="blob-code blob-code-inner js-file-line">- 대각선 피해가기</td>
      </tr>
      <tr>
        <td id="file--L1019" class="blob-num js-line-number" data-line-number="1019"></td>
        <td id="file--LC1019" class="blob-code blob-code-inner js-file-line">- 다각형을삼각형으로 나누기</td>
      </tr>
      <tr>
        <td id="file--L1020" class="blob-num js-line-number" data-line-number="1020"></td>
        <td id="file--LC1020" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1021" class="blob-num js-line-number" data-line-number="1021"></td>
        <td id="file--LC1021" class="blob-code blob-code-inner js-file-line">long[][] dp = new long[31][31];</td>
      </tr>
      <tr>
        <td id="file--L1022" class="blob-num js-line-number" data-line-number="1022"></td>
        <td id="file--LC1022" class="blob-code blob-code-inner js-file-line">for(int i=0;i&lt;=30;i++)</td>
      </tr>
      <tr>
        <td id="file--L1023" class="blob-num js-line-number" data-line-number="1023"></td>
        <td id="file--LC1023" class="blob-code blob-code-inner js-file-line">dp[i][0]=1;</td>
      </tr>
      <tr>
        <td id="file--L1024" class="blob-num js-line-number" data-line-number="1024"></td>
        <td id="file--LC1024" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1025" class="blob-num js-line-number" data-line-number="1025"></td>
        <td id="file--LC1025" class="blob-code blob-code-inner js-file-line">for(int i=1;i&lt;=30;i++)</td>
      </tr>
      <tr>
        <td id="file--L1026" class="blob-num js-line-number" data-line-number="1026"></td>
        <td id="file--LC1026" class="blob-code blob-code-inner js-file-line">for(int j=1;j&lt;=i;j++)</td>
      </tr>
      <tr>
        <td id="file--L1027" class="blob-num js-line-number" data-line-number="1027"></td>
        <td id="file--LC1027" class="blob-code blob-code-inner js-file-line">dp[i][j]=dp[i][j-1]+dp[i-1][j];</td>
      </tr>
      <tr>
        <td id="file--L1028" class="blob-num js-line-number" data-line-number="1028"></td>
        <td id="file--LC1028" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1029" class="blob-num js-line-number" data-line-number="1029"></td>
        <td id="file--LC1029" class="blob-code blob-code-inner js-file-line">결과</td>
      </tr>
      <tr>
        <td id="file--L1030" class="blob-num js-line-number" data-line-number="1030"></td>
        <td id="file--LC1030" class="blob-code blob-code-inner js-file-line">1: 1 </td>
      </tr>
      <tr>
        <td id="file--L1031" class="blob-num js-line-number" data-line-number="1031"></td>
        <td id="file--LC1031" class="blob-code blob-code-inner js-file-line">2: 1 2 </td>
      </tr>
      <tr>
        <td id="file--L1032" class="blob-num js-line-number" data-line-number="1032"></td>
        <td id="file--LC1032" class="blob-code blob-code-inner js-file-line">3: 1 3 5 </td>
      </tr>
      <tr>
        <td id="file--L1033" class="blob-num js-line-number" data-line-number="1033"></td>
        <td id="file--LC1033" class="blob-code blob-code-inner js-file-line">4: 1 4 9 14 </td>
      </tr>
      <tr>
        <td id="file--L1034" class="blob-num js-line-number" data-line-number="1034"></td>
        <td id="file--LC1034" class="blob-code blob-code-inner js-file-line">5: 1 5 14 28 42 </td>
      </tr>
      <tr>
        <td id="file--L1035" class="blob-num js-line-number" data-line-number="1035"></td>
        <td id="file--LC1035" class="blob-code blob-code-inner js-file-line">6: 1 6 20 48 90 132 </td>
      </tr>
      <tr>
        <td id="file--L1036" class="blob-num js-line-number" data-line-number="1036"></td>
        <td id="file--LC1036" class="blob-code blob-code-inner js-file-line">7: 1 7 27 75 165 297 429 </td>
      </tr>
      <tr>
        <td id="file--L1037" class="blob-num js-line-number" data-line-number="1037"></td>
        <td id="file--LC1037" class="blob-code blob-code-inner js-file-line">8: 1 8 35 110 275 572 1001 1430 </td>
      </tr>
      <tr>
        <td id="file--L1038" class="blob-num js-line-number" data-line-number="1038"></td>
        <td id="file--LC1038" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1039" class="blob-num js-line-number" data-line-number="1039"></td>
        <td id="file--LC1039" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1040" class="blob-num js-line-number" data-line-number="1040"></td>
        <td id="file--LC1040" class="blob-code blob-code-inner js-file-line">long[] dp = new long[31]</td>
      </tr>
      <tr>
        <td id="file--L1041" class="blob-num js-line-number" data-line-number="1041"></td>
        <td id="file--LC1041" class="blob-code blob-code-inner js-file-line">for(f[1]=1,i=2;i&lt;=30;i++)</td>
      </tr>
      <tr>
        <td id="file--L1042" class="blob-num js-line-number" data-line-number="1042"></td>
        <td id="file--LC1042" class="blob-code blob-code-inner js-file-line">f[i]=(f[i-1]*(4i-2))/(i+1);</td>
      </tr>
      <tr>
        <td id="file--L1043" class="blob-num js-line-number" data-line-number="1043"></td>
        <td id="file--LC1043" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1044" class="blob-num js-line-number" data-line-number="1044"></td>
        <td id="file--LC1044" class="blob-code blob-code-inner js-file-line">결과</td>
      </tr>
      <tr>
        <td id="file--L1045" class="blob-num js-line-number" data-line-number="1045"></td>
        <td id="file--LC1045" class="blob-code blob-code-inner js-file-line">1 2 5 14 42 132 429 1430 4862 . . . . .</td>
      </tr>
      <tr>
        <td id="file--L1046" class="blob-num js-line-number" data-line-number="1046"></td>
        <td id="file--LC1046" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1047" class="blob-num js-line-number" data-line-number="1047"></td>
        <td id="file--LC1047" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1048" class="blob-num js-line-number" data-line-number="1048"></td>
        <td id="file--LC1048" class="blob-code blob-code-inner js-file-line">for (int i = 1;i&lt;=n;i++){</td>
      </tr>
      <tr>
        <td id="file--L1049" class="blob-num js-line-number" data-line-number="1049"></td>
        <td id="file--LC1049" class="blob-code blob-code-inner js-file-line">    dp[i] = dp[i-1]*((4*i-2) / (i+1));</td>
      </tr>
      <tr>
        <td id="file--L1050" class="blob-num js-line-number" data-line-number="1050"></td>
        <td id="file--LC1050" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1051" class="blob-num js-line-number" data-line-number="1051"></td>
        <td id="file--LC1051" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1052" class="blob-num js-line-number" data-line-number="1052"></td>
        <td id="file--LC1052" class="blob-code blob-code-inner js-file-line">http://blog.epthy.com/catalan-number/</td>
      </tr>
      <tr>
        <td id="file--L1053" class="blob-num js-line-number" data-line-number="1053"></td>
        <td id="file--LC1053" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1054" class="blob-num js-line-number" data-line-number="1054"></td>
        <td id="file--LC1054" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1055" class="blob-num js-line-number" data-line-number="1055"></td>
        <td id="file--LC1055" class="blob-code blob-code-inner js-file-line">■ 선입선출</td>
      </tr>
      <tr>
        <td id="file--L1056" class="blob-num js-line-number" data-line-number="1056"></td>
        <td id="file--LC1056" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1057" class="blob-num js-line-number" data-line-number="1057"></td>
        <td id="file--LC1057" class="blob-code blob-code-inner js-file-line">-코어 비용의 LCM을 구해서 최대 그 범위안에서 for문 돌려도 효율성 문제에서 걸린다.</td>
      </tr>
      <tr>
        <td id="file--L1058" class="blob-num js-line-number" data-line-number="1058"></td>
        <td id="file--LC1058" class="blob-code blob-code-inner js-file-line">LCM이 n보다 클 경우 무의미하고 더 상황만 악화시키기 때문..</td>
      </tr>
      <tr>
        <td id="file--L1059" class="blob-num js-line-number" data-line-number="1059"></td>
        <td id="file--LC1059" class="blob-code blob-code-inner js-file-line">파라메트릭 서치 =&gt; 최적화 문제(문제의 상황을 만족하는 특정 변수의 최솟값, 최댓값을 구하는 문제)를 결정 문제로 바꾸어 푸는 것</td>
      </tr>
      <tr>
        <td id="file--L1060" class="blob-num js-line-number" data-line-number="1060"></td>
        <td id="file--LC1060" class="blob-code blob-code-inner js-file-line">바이너리 서치(이분 탐색)와 비슷한 것, 결과값을 미리 찍어놓고 이 결과가 올바른지 확인하는 방법.</td>
      </tr>
      <tr>
        <td id="file--L1061" class="blob-num js-line-number" data-line-number="1061"></td>
        <td id="file--LC1061" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1062" class="blob-num js-line-number" data-line-number="1062"></td>
        <td id="file--LC1062" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L1063" class="blob-num js-line-number" data-line-number="1063"></td>
        <td id="file--LC1063" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L1064" class="blob-num js-line-number" data-line-number="1064"></td>
        <td id="file--LC1064" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1065" class="blob-num js-line-number" data-line-number="1065"></td>
        <td id="file--LC1065" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1066" class="blob-num js-line-number" data-line-number="1066"></td>
        <td id="file--LC1066" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1067" class="blob-num js-line-number" data-line-number="1067"></td>
        <td id="file--LC1067" class="blob-code blob-code-inner js-file-line">int gcd(int a, int b) {</td>
      </tr>
      <tr>
        <td id="file--L1068" class="blob-num js-line-number" data-line-number="1068"></td>
        <td id="file--LC1068" class="blob-code blob-code-inner js-file-line">    return b ? gcd(b, a%b) : a;</td>
      </tr>
      <tr>
        <td id="file--L1069" class="blob-num js-line-number" data-line-number="1069"></td>
        <td id="file--LC1069" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1070" class="blob-num js-line-number" data-line-number="1070"></td>
        <td id="file--LC1070" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1071" class="blob-num js-line-number" data-line-number="1071"></td>
        <td id="file--LC1071" class="blob-code blob-code-inner js-file-line">int lcm(int a, int b) {</td>
      </tr>
      <tr>
        <td id="file--L1072" class="blob-num js-line-number" data-line-number="1072"></td>
        <td id="file--LC1072" class="blob-code blob-code-inner js-file-line">    if(b&gt;a) a ^= b ^= a ^= b;</td>
      </tr>
      <tr>
        <td id="file--L1073" class="blob-num js-line-number" data-line-number="1073"></td>
        <td id="file--LC1073" class="blob-code blob-code-inner js-file-line">    return a * b / gcd(a, b);</td>
      </tr>
      <tr>
        <td id="file--L1074" class="blob-num js-line-number" data-line-number="1074"></td>
        <td id="file--LC1074" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1075" class="blob-num js-line-number" data-line-number="1075"></td>
        <td id="file--LC1075" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1076" class="blob-num js-line-number" data-line-number="1076"></td>
        <td id="file--LC1076" class="blob-code blob-code-inner js-file-line">int solution(int n, vector&lt;int&gt; cores) {</td>
      </tr>
      <tr>
        <td id="file--L1077" class="blob-num js-line-number" data-line-number="1077"></td>
        <td id="file--LC1077" class="blob-code blob-code-inner js-file-line">    int answer = cores[0];</td>
      </tr>
      <tr>
        <td id="file--L1078" class="blob-num js-line-number" data-line-number="1078"></td>
        <td id="file--LC1078" class="blob-code blob-code-inner js-file-line">    short cSize = cores.size();</td>
      </tr>
      <tr>
        <td id="file--L1079" class="blob-num js-line-number" data-line-number="1079"></td>
        <td id="file--LC1079" class="blob-code blob-code-inner js-file-line">    unsigned int timer = 0;</td>
      </tr>
      <tr>
        <td id="file--L1080" class="blob-num js-line-number" data-line-number="1080"></td>
        <td id="file--LC1080" class="blob-code blob-code-inner js-file-line">    int coresLCM = cores[0];</td>
      </tr>
      <tr>
        <td id="file--L1081" class="blob-num js-line-number" data-line-number="1081"></td>
        <td id="file--LC1081" class="blob-code blob-code-inner js-file-line">    int LCMperWork = 0;</td>
      </tr>
      <tr>
        <td id="file--L1082" class="blob-num js-line-number" data-line-number="1082"></td>
        <td id="file--LC1082" class="blob-code blob-code-inner js-file-line">    int i;</td>
      </tr>
      <tr>
        <td id="file--L1083" class="blob-num js-line-number" data-line-number="1083"></td>
        <td id="file--LC1083" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1084" class="blob-num js-line-number" data-line-number="1084"></td>
        <td id="file--LC1084" class="blob-code blob-code-inner js-file-line">    if(n==0) return answer;</td>
      </tr>
      <tr>
        <td id="file--L1085" class="blob-num js-line-number" data-line-number="1085"></td>
        <td id="file--LC1085" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1086" class="blob-num js-line-number" data-line-number="1086"></td>
        <td id="file--LC1086" class="blob-code blob-code-inner js-file-line">    for(i=1; i&lt;cSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L1087" class="blob-num js-line-number" data-line-number="1087"></td>
        <td id="file--LC1087" class="blob-code blob-code-inner js-file-line">        coresLCM = lcm(coresLCM, cores[i]);</td>
      </tr>
      <tr>
        <td id="file--L1088" class="blob-num js-line-number" data-line-number="1088"></td>
        <td id="file--LC1088" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1089" class="blob-num js-line-number" data-line-number="1089"></td>
        <td id="file--LC1089" class="blob-code blob-code-inner js-file-line">    for(i=0; i&lt;cSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L1090" class="blob-num js-line-number" data-line-number="1090"></td>
        <td id="file--LC1090" class="blob-code blob-code-inner js-file-line">        LCMperWork += coresLCM/cores[i];</td>
      </tr>
      <tr>
        <td id="file--L1091" class="blob-num js-line-number" data-line-number="1091"></td>
        <td id="file--LC1091" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1092" class="blob-num js-line-number" data-line-number="1092"></td>
        <td id="file--LC1092" class="blob-code blob-code-inner js-file-line">    if(n%LCMperWork==0) n=LCMperWork;</td>
      </tr>
      <tr>
        <td id="file--L1093" class="blob-num js-line-number" data-line-number="1093"></td>
        <td id="file--LC1093" class="blob-code blob-code-inner js-file-line">    else n%=LCMperWork;</td>
      </tr>
      <tr>
        <td id="file--L1094" class="blob-num js-line-number" data-line-number="1094"></td>
        <td id="file--LC1094" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1095" class="blob-num js-line-number" data-line-number="1095"></td>
        <td id="file--LC1095" class="blob-code blob-code-inner js-file-line">    cout&lt;&lt;LCMperWork&lt;&lt;endl;</td>
      </tr>
      <tr>
        <td id="file--L1096" class="blob-num js-line-number" data-line-number="1096"></td>
        <td id="file--LC1096" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1097" class="blob-num js-line-number" data-line-number="1097"></td>
        <td id="file--LC1097" class="blob-code blob-code-inner js-file-line">    while(n&gt;0)</td>
      </tr>
      <tr>
        <td id="file--L1098" class="blob-num js-line-number" data-line-number="1098"></td>
        <td id="file--LC1098" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1099" class="blob-num js-line-number" data-line-number="1099"></td>
        <td id="file--LC1099" class="blob-code blob-code-inner js-file-line">        for(i=0; i&lt;cSize; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1100" class="blob-num js-line-number" data-line-number="1100"></td>
        <td id="file--LC1100" class="blob-code blob-code-inner js-file-line">            if(timer%cores[i] == 0) { </td>
      </tr>
      <tr>
        <td id="file--L1101" class="blob-num js-line-number" data-line-number="1101"></td>
        <td id="file--LC1101" class="blob-code blob-code-inner js-file-line">                if(--n==0) { answer=i+1; break; }</td>
      </tr>
      <tr>
        <td id="file--L1102" class="blob-num js-line-number" data-line-number="1102"></td>
        <td id="file--LC1102" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1103" class="blob-num js-line-number" data-line-number="1103"></td>
        <td id="file--LC1103" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1104" class="blob-num js-line-number" data-line-number="1104"></td>
        <td id="file--LC1104" class="blob-code blob-code-inner js-file-line">        timer ++;</td>
      </tr>
      <tr>
        <td id="file--L1105" class="blob-num js-line-number" data-line-number="1105"></td>
        <td id="file--LC1105" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1106" class="blob-num js-line-number" data-line-number="1106"></td>
        <td id="file--LC1106" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1107" class="blob-num js-line-number" data-line-number="1107"></td>
        <td id="file--LC1107" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L1108" class="blob-num js-line-number" data-line-number="1108"></td>
        <td id="file--LC1108" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1109" class="blob-num js-line-number" data-line-number="1109"></td>
        <td id="file--LC1109" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1110" class="blob-num js-line-number" data-line-number="1110"></td>
        <td id="file--LC1110" class="blob-code blob-code-inner js-file-line">수정 코드</td>
      </tr>
      <tr>
        <td id="file--L1111" class="blob-num js-line-number" data-line-number="1111"></td>
        <td id="file--LC1111" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1112" class="blob-num js-line-number" data-line-number="1112"></td>
        <td id="file--LC1112" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1113" class="blob-num js-line-number" data-line-number="1113"></td>
        <td id="file--LC1113" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L1114" class="blob-num js-line-number" data-line-number="1114"></td>
        <td id="file--LC1114" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L1115" class="blob-num js-line-number" data-line-number="1115"></td>
        <td id="file--LC1115" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1116" class="blob-num js-line-number" data-line-number="1116"></td>
        <td id="file--LC1116" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1117" class="blob-num js-line-number" data-line-number="1117"></td>
        <td id="file--LC1117" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1118" class="blob-num js-line-number" data-line-number="1118"></td>
        <td id="file--LC1118" class="blob-code blob-code-inner js-file-line">int gcd(int a, int b) {</td>
      </tr>
      <tr>
        <td id="file--L1119" class="blob-num js-line-number" data-line-number="1119"></td>
        <td id="file--LC1119" class="blob-code blob-code-inner js-file-line">    return b ? gcd(b, a%b) : a;</td>
      </tr>
      <tr>
        <td id="file--L1120" class="blob-num js-line-number" data-line-number="1120"></td>
        <td id="file--LC1120" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1121" class="blob-num js-line-number" data-line-number="1121"></td>
        <td id="file--LC1121" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1122" class="blob-num js-line-number" data-line-number="1122"></td>
        <td id="file--LC1122" class="blob-code blob-code-inner js-file-line">int lcm(int a, int b) {</td>
      </tr>
      <tr>
        <td id="file--L1123" class="blob-num js-line-number" data-line-number="1123"></td>
        <td id="file--LC1123" class="blob-code blob-code-inner js-file-line">    if(b&gt;a) a ^= b ^= a ^= b;</td>
      </tr>
      <tr>
        <td id="file--L1124" class="blob-num js-line-number" data-line-number="1124"></td>
        <td id="file--LC1124" class="blob-code blob-code-inner js-file-line">    return a * b / gcd(a, b);</td>
      </tr>
      <tr>
        <td id="file--L1125" class="blob-num js-line-number" data-line-number="1125"></td>
        <td id="file--LC1125" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1126" class="blob-num js-line-number" data-line-number="1126"></td>
        <td id="file--LC1126" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1127" class="blob-num js-line-number" data-line-number="1127"></td>
        <td id="file--LC1127" class="blob-code blob-code-inner js-file-line">int solution(int n, vector&lt;int&gt; cores) {</td>
      </tr>
      <tr>
        <td id="file--L1128" class="blob-num js-line-number" data-line-number="1128"></td>
        <td id="file--LC1128" class="blob-code blob-code-inner js-file-line">    int answer = cores[0];</td>
      </tr>
      <tr>
        <td id="file--L1129" class="blob-num js-line-number" data-line-number="1129"></td>
        <td id="file--LC1129" class="blob-code blob-code-inner js-file-line">    short cSize = cores.size();</td>
      </tr>
      <tr>
        <td id="file--L1130" class="blob-num js-line-number" data-line-number="1130"></td>
        <td id="file--LC1130" class="blob-code blob-code-inner js-file-line">    unsigned int timer = 0;</td>
      </tr>
      <tr>
        <td id="file--L1131" class="blob-num js-line-number" data-line-number="1131"></td>
        <td id="file--LC1131" class="blob-code blob-code-inner js-file-line">    int coresLCM = cores[0];</td>
      </tr>
      <tr>
        <td id="file--L1132" class="blob-num js-line-number" data-line-number="1132"></td>
        <td id="file--LC1132" class="blob-code blob-code-inner js-file-line">    int LCMperWork = 0;</td>
      </tr>
      <tr>
        <td id="file--L1133" class="blob-num js-line-number" data-line-number="1133"></td>
        <td id="file--LC1133" class="blob-code blob-code-inner js-file-line">    int i;</td>
      </tr>
      <tr>
        <td id="file--L1134" class="blob-num js-line-number" data-line-number="1134"></td>
        <td id="file--LC1134" class="blob-code blob-code-inner js-file-line">    int j;</td>
      </tr>
      <tr>
        <td id="file--L1135" class="blob-num js-line-number" data-line-number="1135"></td>
        <td id="file--LC1135" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; sortedCores;</td>
      </tr>
      <tr>
        <td id="file--L1136" class="blob-num js-line-number" data-line-number="1136"></td>
        <td id="file--LC1136" class="blob-code blob-code-inner js-file-line">    unsigned int passTime =0;</td>
      </tr>
      <tr>
        <td id="file--L1137" class="blob-num js-line-number" data-line-number="1137"></td>
        <td id="file--LC1137" class="blob-code blob-code-inner js-file-line">    unsigned int preCoreperWork = 0;</td>
      </tr>
      <tr>
        <td id="file--L1138" class="blob-num js-line-number" data-line-number="1138"></td>
        <td id="file--LC1138" class="blob-code blob-code-inner js-file-line">    unsigned int CoreperWork = 0;</td>
      </tr>
      <tr>
        <td id="file--L1139" class="blob-num js-line-number" data-line-number="1139"></td>
        <td id="file--LC1139" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1140" class="blob-num js-line-number" data-line-number="1140"></td>
        <td id="file--LC1140" class="blob-code blob-code-inner js-file-line">    sortedCores = cores;</td>
      </tr>
      <tr>
        <td id="file--L1141" class="blob-num js-line-number" data-line-number="1141"></td>
        <td id="file--LC1141" class="blob-code blob-code-inner js-file-line">    sort(sortedCores.rbegin(), sortedCores.rend());</td>
      </tr>
      <tr>
        <td id="file--L1142" class="blob-num js-line-number" data-line-number="1142"></td>
        <td id="file--LC1142" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1143" class="blob-num js-line-number" data-line-number="1143"></td>
        <td id="file--LC1143" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1144" class="blob-num js-line-number" data-line-number="1144"></td>
        <td id="file--LC1144" class="blob-code blob-code-inner js-file-line">    if(n==0) return answer;</td>
      </tr>
      <tr>
        <td id="file--L1145" class="blob-num js-line-number" data-line-number="1145"></td>
        <td id="file--LC1145" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1146" class="blob-num js-line-number" data-line-number="1146"></td>
        <td id="file--LC1146" class="blob-code blob-code-inner js-file-line">    for(i=1; i&lt;cSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L1147" class="blob-num js-line-number" data-line-number="1147"></td>
        <td id="file--LC1147" class="blob-code blob-code-inner js-file-line">        coresLCM = lcm(coresLCM, cores[i]);</td>
      </tr>
      <tr>
        <td id="file--L1148" class="blob-num js-line-number" data-line-number="1148"></td>
        <td id="file--LC1148" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1149" class="blob-num js-line-number" data-line-number="1149"></td>
        <td id="file--LC1149" class="blob-code blob-code-inner js-file-line">    for(i=0; i&lt;cSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L1150" class="blob-num js-line-number" data-line-number="1150"></td>
        <td id="file--LC1150" class="blob-code blob-code-inner js-file-line">        LCMperWork += coresLCM/cores[i];</td>
      </tr>
      <tr>
        <td id="file--L1151" class="blob-num js-line-number" data-line-number="1151"></td>
        <td id="file--LC1151" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1152" class="blob-num js-line-number" data-line-number="1152"></td>
        <td id="file--LC1152" class="blob-code blob-code-inner js-file-line">    if(n%LCMperWork==0) n=LCMperWork;</td>
      </tr>
      <tr>
        <td id="file--L1153" class="blob-num js-line-number" data-line-number="1153"></td>
        <td id="file--LC1153" class="blob-code blob-code-inner js-file-line">    else n%=LCMperWork;</td>
      </tr>
      <tr>
        <td id="file--L1154" class="blob-num js-line-number" data-line-number="1154"></td>
        <td id="file--LC1154" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1155" class="blob-num js-line-number" data-line-number="1155"></td>
        <td id="file--LC1155" class="blob-code blob-code-inner js-file-line">    for(i=0; i&lt;cSize; i++)</td>
      </tr>
      <tr>
        <td id="file--L1156" class="blob-num js-line-number" data-line-number="1156"></td>
        <td id="file--LC1156" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1157" class="blob-num js-line-number" data-line-number="1157"></td>
        <td id="file--LC1157" class="blob-code blob-code-inner js-file-line">        while(CoreperWork&lt;n)</td>
      </tr>
      <tr>
        <td id="file--L1158" class="blob-num js-line-number" data-line-number="1158"></td>
        <td id="file--LC1158" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L1159" class="blob-num js-line-number" data-line-number="1159"></td>
        <td id="file--LC1159" class="blob-code blob-code-inner js-file-line">            preCoreperWork = CoreperWork;</td>
      </tr>
      <tr>
        <td id="file--L1160" class="blob-num js-line-number" data-line-number="1160"></td>
        <td id="file--LC1160" class="blob-code blob-code-inner js-file-line">            CoreperWork=0;</td>
      </tr>
      <tr>
        <td id="file--L1161" class="blob-num js-line-number" data-line-number="1161"></td>
        <td id="file--LC1161" class="blob-code blob-code-inner js-file-line">            passTime += sortedCores[i];</td>
      </tr>
      <tr>
        <td id="file--L1162" class="blob-num js-line-number" data-line-number="1162"></td>
        <td id="file--LC1162" class="blob-code blob-code-inner js-file-line">            for(j=0; j&lt;cSize; j++)</td>
      </tr>
      <tr>
        <td id="file--L1163" class="blob-num js-line-number" data-line-number="1163"></td>
        <td id="file--LC1163" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="file--L1164" class="blob-num js-line-number" data-line-number="1164"></td>
        <td id="file--LC1164" class="blob-code blob-code-inner js-file-line">                CoreperWork += passTime/cores[j];</td>
      </tr>
      <tr>
        <td id="file--L1165" class="blob-num js-line-number" data-line-number="1165"></td>
        <td id="file--LC1165" class="blob-code blob-code-inner js-file-line">                if(passTime%cores[j]!=0) CoreperWork++;</td>
      </tr>
      <tr>
        <td id="file--L1166" class="blob-num js-line-number" data-line-number="1166"></td>
        <td id="file--LC1166" class="blob-code blob-code-inner js-file-line">                if(CoreperWork&gt;=n) break;</td>
      </tr>
      <tr>
        <td id="file--L1167" class="blob-num js-line-number" data-line-number="1167"></td>
        <td id="file--LC1167" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1168" class="blob-num js-line-number" data-line-number="1168"></td>
        <td id="file--LC1168" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1169" class="blob-num js-line-number" data-line-number="1169"></td>
        <td id="file--LC1169" class="blob-code blob-code-inner js-file-line">        CoreperWork = preCoreperWork;</td>
      </tr>
      <tr>
        <td id="file--L1170" class="blob-num js-line-number" data-line-number="1170"></td>
        <td id="file--LC1170" class="blob-code blob-code-inner js-file-line">        passTime -= sortedCores[i];</td>
      </tr>
      <tr>
        <td id="file--L1171" class="blob-num js-line-number" data-line-number="1171"></td>
        <td id="file--LC1171" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1172" class="blob-num js-line-number" data-line-number="1172"></td>
        <td id="file--LC1172" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1173" class="blob-num js-line-number" data-line-number="1173"></td>
        <td id="file--LC1173" class="blob-code blob-code-inner js-file-line">    timer = passTime;</td>
      </tr>
      <tr>
        <td id="file--L1174" class="blob-num js-line-number" data-line-number="1174"></td>
        <td id="file--LC1174" class="blob-code blob-code-inner js-file-line">    n -= CoreperWork;</td>
      </tr>
      <tr>
        <td id="file--L1175" class="blob-num js-line-number" data-line-number="1175"></td>
        <td id="file--LC1175" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1176" class="blob-num js-line-number" data-line-number="1176"></td>
        <td id="file--LC1176" class="blob-code blob-code-inner js-file-line">    while(n&gt;0)</td>
      </tr>
      <tr>
        <td id="file--L1177" class="blob-num js-line-number" data-line-number="1177"></td>
        <td id="file--LC1177" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1178" class="blob-num js-line-number" data-line-number="1178"></td>
        <td id="file--LC1178" class="blob-code blob-code-inner js-file-line">        for(i=0; i&lt;cSize; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1179" class="blob-num js-line-number" data-line-number="1179"></td>
        <td id="file--LC1179" class="blob-code blob-code-inner js-file-line">            if(timer%cores[i] == 0) { </td>
      </tr>
      <tr>
        <td id="file--L1180" class="blob-num js-line-number" data-line-number="1180"></td>
        <td id="file--LC1180" class="blob-code blob-code-inner js-file-line">                if(--n==0) { answer=i+1; break; }</td>
      </tr>
      <tr>
        <td id="file--L1181" class="blob-num js-line-number" data-line-number="1181"></td>
        <td id="file--LC1181" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1182" class="blob-num js-line-number" data-line-number="1182"></td>
        <td id="file--LC1182" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1183" class="blob-num js-line-number" data-line-number="1183"></td>
        <td id="file--LC1183" class="blob-code blob-code-inner js-file-line">        timer ++;</td>
      </tr>
      <tr>
        <td id="file--L1184" class="blob-num js-line-number" data-line-number="1184"></td>
        <td id="file--LC1184" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1185" class="blob-num js-line-number" data-line-number="1185"></td>
        <td id="file--LC1185" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1186" class="blob-num js-line-number" data-line-number="1186"></td>
        <td id="file--LC1186" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L1187" class="blob-num js-line-number" data-line-number="1187"></td>
        <td id="file--LC1187" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1188" class="blob-num js-line-number" data-line-number="1188"></td>
        <td id="file--LC1188" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1189" class="blob-num js-line-number" data-line-number="1189"></td>
        <td id="file--LC1189" class="blob-code blob-code-inner js-file-line">■ 백트래킹 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L1190" class="blob-num js-line-number" data-line-number="1190"></td>
        <td id="file--LC1190" class="blob-code blob-code-inner js-file-line">백트렉킹이란, 특정 노드에서 유망성(promising)을 점검하고,</td>
      </tr>
      <tr>
        <td id="file--L1191" class="blob-num js-line-number" data-line-number="1191"></td>
        <td id="file--LC1191" class="blob-code blob-code-inner js-file-line">유망하지 않다면 그 노드의 부모로 돌아가서(Backtracking) 다음 노드에 대한 검색을 계속하게 되는 절차입니다.</td>
      </tr>
      <tr>
        <td id="file--L1192" class="blob-num js-line-number" data-line-number="1192"></td>
        <td id="file--LC1192" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1193" class="blob-num js-line-number" data-line-number="1193"></td>
        <td id="file--LC1193" class="blob-code blob-code-inner js-file-line">이처럼 백트렉킹 알고리즘은 전수조사 방법중 하나인 깊이우선탐색으로 시작합니다.</td>
      </tr>
      <tr>
        <td id="file--L1194" class="blob-num js-line-number" data-line-number="1194"></td>
        <td id="file--LC1194" class="blob-code blob-code-inner js-file-line">그리고 각 노드에서 유망하지 않은 노드들은 탐색 하지 않고 (이를 가지치기 Pruning 라고 합니다) 유망한 노드에 대해서만 탐색을 합니다.</td>
      </tr>
      <tr>
        <td id="file--L1195" class="blob-num js-line-number" data-line-number="1195"></td>
        <td id="file--LC1195" class="blob-code blob-code-inner js-file-line">즉 순서는 이렇게 진행됩니다.</td>
      </tr>
      <tr>
        <td id="file--L1196" class="blob-num js-line-number" data-line-number="1196"></td>
        <td id="file--LC1196" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1197" class="blob-num js-line-number" data-line-number="1197"></td>
        <td id="file--LC1197" class="blob-code blob-code-inner js-file-line">처음 깊이 우선 탐색을 시작합니다.</td>
      </tr>
      <tr>
        <td id="file--L1198" class="blob-num js-line-number" data-line-number="1198"></td>
        <td id="file--LC1198" class="blob-code blob-code-inner js-file-line">각 노드가 유망한지 검사합니다.</td>
      </tr>
      <tr>
        <td id="file--L1199" class="blob-num js-line-number" data-line-number="1199"></td>
        <td id="file--LC1199" class="blob-code blob-code-inner js-file-line">만약 유망하다면 탐색을 계속합니다.</td>
      </tr>
      <tr>
        <td id="file--L1200" class="blob-num js-line-number" data-line-number="1200"></td>
        <td id="file--LC1200" class="blob-code blob-code-inner js-file-line">만약 유망하지 않다면 그의 부모 노드로 돌아가서 탐색을 계속합니다.(백트렉킹)</td>
      </tr>
      <tr>
        <td id="file--L1201" class="blob-num js-line-number" data-line-number="1201"></td>
        <td id="file--LC1201" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1202" class="blob-num js-line-number" data-line-number="1202"></td>
        <td id="file--LC1202" class="blob-code blob-code-inner js-file-line">이와같은 방법을 이용하면 깊이우선탐색보다 검색하는 경우의 수를 줄일 수 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L1203" class="blob-num js-line-number" data-line-number="1203"></td>
        <td id="file--LC1203" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1204" class="blob-num js-line-number" data-line-number="1204"></td>
        <td id="file--LC1204" class="blob-code blob-code-inner js-file-line">n-queen 문제</td>
      </tr>
      <tr>
        <td id="file--L1205" class="blob-num js-line-number" data-line-number="1205"></td>
        <td id="file--LC1205" class="blob-code blob-code-inner js-file-line">체스판의 첫 칸부터 시작한다.</td>
      </tr>
      <tr>
        <td id="file--L1206" class="blob-num js-line-number" data-line-number="1206"></td>
        <td id="file--LC1206" class="blob-code blob-code-inner js-file-line">체스판에 Queen을 놓을 때 해당 칸이 놓을 수 있는지를 체크한다.</td>
      </tr>
      <tr>
        <td id="file--L1207" class="blob-num js-line-number" data-line-number="1207"></td>
        <td id="file--LC1207" class="blob-code blob-code-inner js-file-line">첫 Queen이라면 모든 칸에 놓을 수 있기 때문에 (0, 0) 칸에 놓았다고 가정하고 시작하자.</td>
      </tr>
      <tr>
        <td id="file--L1208" class="blob-num js-line-number" data-line-number="1208"></td>
        <td id="file--LC1208" class="blob-code blob-code-inner js-file-line">만약 놓을 수 있다면?</td>
      </tr>
      <tr>
        <td id="file--L1209" class="blob-num js-line-number" data-line-number="1209"></td>
        <td id="file--LC1209" class="blob-code blob-code-inner js-file-line">해당 칸에 Queen을 놓자.</td>
      </tr>
      <tr>
        <td id="file--L1210" class="blob-num js-line-number" data-line-number="1210"></td>
        <td id="file--LC1210" class="blob-code blob-code-inner js-file-line">Queen을 놓은 자리가 체스판의 마지막 줄이 아니라면 다음 줄에 Queen을 놓기 위해 2번 작업으로 돌아가 다시 체크한다.</td>
      </tr>
      <tr>
        <td id="file--L1211" class="blob-num js-line-number" data-line-number="1211"></td>
        <td id="file--LC1211" class="blob-code blob-code-inner js-file-line">Queen을 놓고 다음 줄로 넘어가는 이유는 Queen을 놓은 그 줄에는 다른 Queen을 놓을 필요가 없기 때문에 확인할 필요가 없기 때문이다.</td>
      </tr>
      <tr>
        <td id="file--L1212" class="blob-num js-line-number" data-line-number="1212"></td>
        <td id="file--LC1212" class="blob-code blob-code-inner js-file-line">만약 마지막 줄이라면 지금까지 놓은 자리는 N-Queen 문제의 답이 된다.</td>
      </tr>
      <tr>
        <td id="file--L1213" class="blob-num js-line-number" data-line-number="1213"></td>
        <td id="file--LC1213" class="blob-code blob-code-inner js-file-line">체스판의 모든 케이스에 대해서 확인했다면 정답이 되는 케이스 건수를 확인하면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1214" class="blob-num js-line-number" data-line-number="1214"></td>
        <td id="file--LC1214" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1215" class="blob-num js-line-number" data-line-number="1215"></td>
        <td id="file--LC1215" class="blob-code blob-code-inner js-file-line">코드를 보면 좀 더 쉽게 느껴질 수 있다. 메모리 공간을 절약하기 위해 체스판을 2차원 배열이 아닌 1차원 배열을 사용하였다.</td>
      </tr>
      <tr>
        <td id="file--L1216" class="blob-num js-line-number" data-line-number="1216"></td>
        <td id="file--LC1216" class="blob-code blob-code-inner js-file-line">아래 코드는 구현부 중 중요한 역할을 하는 2개의 메서드이다.</td>
      </tr>
      <tr>
        <td id="file--L1217" class="blob-num js-line-number" data-line-number="1217"></td>
        <td id="file--LC1217" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1218" class="blob-num js-line-number" data-line-number="1218"></td>
        <td id="file--LC1218" class="blob-code blob-code-inner js-file-line">private void placeQueens(int board[], int h) {</td>
      </tr>
      <tr>
        <td id="file--L1219" class="blob-num js-line-number" data-line-number="1219"></td>
        <td id="file--LC1219" class="blob-code blob-code-inner js-file-line">    for (int idx = 0; idx &lt; board.length; idx++) {</td>
      </tr>
      <tr>
        <td id="file--L1220" class="blob-num js-line-number" data-line-number="1220"></td>
        <td id="file--LC1220" class="blob-code blob-code-inner js-file-line">        if (canPlaceQueen(board, h, idx)) {</td>
      </tr>
      <tr>
        <td id="file--L1221" class="blob-num js-line-number" data-line-number="1221"></td>
        <td id="file--LC1221" class="blob-code blob-code-inner js-file-line">            board[h] = idx;</td>
      </tr>
      <tr>
        <td id="file--L1222" class="blob-num js-line-number" data-line-number="1222"></td>
        <td id="file--LC1222" class="blob-code blob-code-inner js-file-line">            if (h == board.length - 1) {</td>
      </tr>
      <tr>
        <td id="file--L1223" class="blob-num js-line-number" data-line-number="1223"></td>
        <td id="file--LC1223" class="blob-code blob-code-inner js-file-line">                resultCount++;</td>
      </tr>
      <tr>
        <td id="file--L1224" class="blob-num js-line-number" data-line-number="1224"></td>
        <td id="file--LC1224" class="blob-code blob-code-inner js-file-line">                printBoard(board);</td>
      </tr>
      <tr>
        <td id="file--L1225" class="blob-num js-line-number" data-line-number="1225"></td>
        <td id="file--LC1225" class="blob-code blob-code-inner js-file-line">            } else {</td>
      </tr>
      <tr>
        <td id="file--L1226" class="blob-num js-line-number" data-line-number="1226"></td>
        <td id="file--LC1226" class="blob-code blob-code-inner js-file-line">                placeQueens(board, h + 1);</td>
      </tr>
      <tr>
        <td id="file--L1227" class="blob-num js-line-number" data-line-number="1227"></td>
        <td id="file--LC1227" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1228" class="blob-num js-line-number" data-line-number="1228"></td>
        <td id="file--LC1228" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1229" class="blob-num js-line-number" data-line-number="1229"></td>
        <td id="file--LC1229" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1230" class="blob-num js-line-number" data-line-number="1230"></td>
        <td id="file--LC1230" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1231" class="blob-num js-line-number" data-line-number="1231"></td>
        <td id="file--LC1231" class="blob-code blob-code-inner js-file-line">private boolean canPlaceQueen(int[] board, int h, int v) {</td>
      </tr>
      <tr>
        <td id="file--L1232" class="blob-num js-line-number" data-line-number="1232"></td>
        <td id="file--LC1232" class="blob-code blob-code-inner js-file-line">    int size = board.length;</td>
      </tr>
      <tr>
        <td id="file--L1233" class="blob-num js-line-number" data-line-number="1233"></td>
        <td id="file--LC1233" class="blob-code blob-code-inner js-file-line">    for (int idx = 0; idx &lt; h; idx++) {</td>
      </tr>
      <tr>
        <td id="file--L1234" class="blob-num js-line-number" data-line-number="1234"></td>
        <td id="file--LC1234" class="blob-code blob-code-inner js-file-line">        if (board[idx] == v) {  //같은 라인에 놓인 경우</td>
      </tr>
      <tr>
        <td id="file--L1235" class="blob-num js-line-number" data-line-number="1235"></td>
        <td id="file--LC1235" class="blob-code blob-code-inner js-file-line">            return false;</td>
      </tr>
      <tr>
        <td id="file--L1236" class="blob-num js-line-number" data-line-number="1236"></td>
        <td id="file--LC1236" class="blob-code blob-code-inner js-file-line">        } else if (Math.abs(idx - h) == Math.abs(board[idx] - v)) {  //대각선 라인에 놓인 경우</td>
      </tr>
      <tr>
        <td id="file--L1237" class="blob-num js-line-number" data-line-number="1237"></td>
        <td id="file--LC1237" class="blob-code blob-code-inner js-file-line">            return false;</td>
      </tr>
      <tr>
        <td id="file--L1238" class="blob-num js-line-number" data-line-number="1238"></td>
        <td id="file--LC1238" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1239" class="blob-num js-line-number" data-line-number="1239"></td>
        <td id="file--LC1239" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1240" class="blob-num js-line-number" data-line-number="1240"></td>
        <td id="file--LC1240" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1241" class="blob-num js-line-number" data-line-number="1241"></td>
        <td id="file--LC1241" class="blob-code blob-code-inner js-file-line">    return true;</td>
      </tr>
      <tr>
        <td id="file--L1242" class="blob-num js-line-number" data-line-number="1242"></td>
        <td id="file--LC1242" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1243" class="blob-num js-line-number" data-line-number="1243"></td>
        <td id="file--LC1243" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1244" class="blob-num js-line-number" data-line-number="1244"></td>
        <td id="file--LC1244" class="blob-code blob-code-inner js-file-line">placeQueen(): Queen을 놓는 시도</td>
      </tr>
      <tr>
        <td id="file--L1245" class="blob-num js-line-number" data-line-number="1245"></td>
        <td id="file--LC1245" class="blob-code blob-code-inner js-file-line">canPlaceQueen(): Queen을 해당 칸에 놓을 수 있는지 확인</td>
      </tr>
      <tr>
        <td id="file--L1246" class="blob-num js-line-number" data-line-number="1246"></td>
        <td id="file--LC1246" class="blob-code blob-code-inner js-file-line">board[h] = idx: (h, idx)에 Queen을 놓는 작업</td>
      </tr>
      <tr>
        <td id="file--L1247" class="blob-num js-line-number" data-line-number="1247"></td>
        <td id="file--LC1247" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1248" class="blob-num js-line-number" data-line-number="1248"></td>
        <td id="file--LC1248" class="blob-code blob-code-inner js-file-line">내 코드</td>
      </tr>
      <tr>
        <td id="file--L1249" class="blob-num js-line-number" data-line-number="1249"></td>
        <td id="file--LC1249" class="blob-code blob-code-inner js-file-line">#include &lt;cmath&gt;</td>
      </tr>
      <tr>
        <td id="file--L1250" class="blob-num js-line-number" data-line-number="1250"></td>
        <td id="file--LC1250" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L1251" class="blob-num js-line-number" data-line-number="1251"></td>
        <td id="file--LC1251" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1252" class="blob-num js-line-number" data-line-number="1252"></td>
        <td id="file--LC1252" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1253" class="blob-num js-line-number" data-line-number="1253"></td>
        <td id="file--LC1253" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1254" class="blob-num js-line-number" data-line-number="1254"></td>
        <td id="file--LC1254" class="blob-code blob-code-inner js-file-line">int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L1255" class="blob-num js-line-number" data-line-number="1255"></td>
        <td id="file--LC1255" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1256" class="blob-num js-line-number" data-line-number="1256"></td>
        <td id="file--LC1256" class="blob-code blob-code-inner js-file-line">bool isCanPlace(vector&lt;int&gt;&amp; bd, int row, int col);</td>
      </tr>
      <tr>
        <td id="file--L1257" class="blob-num js-line-number" data-line-number="1257"></td>
        <td id="file--LC1257" class="blob-code blob-code-inner js-file-line">void placeQueen(vector&lt;int&gt;&amp; bd, int row);</td>
      </tr>
      <tr>
        <td id="file--L1258" class="blob-num js-line-number" data-line-number="1258"></td>
        <td id="file--LC1258" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1259" class="blob-num js-line-number" data-line-number="1259"></td>
        <td id="file--LC1259" class="blob-code blob-code-inner js-file-line">int solution(int n) {</td>
      </tr>
      <tr>
        <td id="file--L1260" class="blob-num js-line-number" data-line-number="1260"></td>
        <td id="file--LC1260" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; board(n, n+1);</td>
      </tr>
      <tr>
        <td id="file--L1261" class="blob-num js-line-number" data-line-number="1261"></td>
        <td id="file--LC1261" class="blob-code blob-code-inner js-file-line">    int bSize = board.size();</td>
      </tr>
      <tr>
        <td id="file--L1262" class="blob-num js-line-number" data-line-number="1262"></td>
        <td id="file--LC1262" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1263" class="blob-num js-line-number" data-line-number="1263"></td>
        <td id="file--LC1263" class="blob-code blob-code-inner js-file-line">    placeQueen(board, 0);</td>
      </tr>
      <tr>
        <td id="file--L1264" class="blob-num js-line-number" data-line-number="1264"></td>
        <td id="file--LC1264" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1265" class="blob-num js-line-number" data-line-number="1265"></td>
        <td id="file--LC1265" class="blob-code blob-code-inner js-file-line">    return answer;</td>
      </tr>
      <tr>
        <td id="file--L1266" class="blob-num js-line-number" data-line-number="1266"></td>
        <td id="file--LC1266" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1267" class="blob-num js-line-number" data-line-number="1267"></td>
        <td id="file--LC1267" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1268" class="blob-num js-line-number" data-line-number="1268"></td>
        <td id="file--LC1268" class="blob-code blob-code-inner js-file-line">bool isCanPlace(vector&lt;int&gt;&amp; bd, int row, int col) {</td>
      </tr>
      <tr>
        <td id="file--L1269" class="blob-num js-line-number" data-line-number="1269"></td>
        <td id="file--LC1269" class="blob-code blob-code-inner js-file-line">    int bSize = bd.size();</td>
      </tr>
      <tr>
        <td id="file--L1270" class="blob-num js-line-number" data-line-number="1270"></td>
        <td id="file--LC1270" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1271" class="blob-num js-line-number" data-line-number="1271"></td>
        <td id="file--LC1271" class="blob-code blob-code-inner js-file-line">    for(int parentRow = 0; parentRow &lt; row; parentRow++) {</td>
      </tr>
      <tr>
        <td id="file--L1272" class="blob-num js-line-number" data-line-number="1272"></td>
        <td id="file--LC1272" class="blob-code blob-code-inner js-file-line">        if(bd[parentRow] == col) return false;</td>
      </tr>
      <tr>
        <td id="file--L1273" class="blob-num js-line-number" data-line-number="1273"></td>
        <td id="file--LC1273" class="blob-code blob-code-inner js-file-line">        else if(abs(parentRow-row)== abs(bd[parentRow]-col)) return false;</td>
      </tr>
      <tr>
        <td id="file--L1274" class="blob-num js-line-number" data-line-number="1274"></td>
        <td id="file--LC1274" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1275" class="blob-num js-line-number" data-line-number="1275"></td>
        <td id="file--LC1275" class="blob-code blob-code-inner js-file-line">    return true;</td>
      </tr>
      <tr>
        <td id="file--L1276" class="blob-num js-line-number" data-line-number="1276"></td>
        <td id="file--LC1276" class="blob-code blob-code-inner js-file-line">} </td>
      </tr>
      <tr>
        <td id="file--L1277" class="blob-num js-line-number" data-line-number="1277"></td>
        <td id="file--LC1277" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1278" class="blob-num js-line-number" data-line-number="1278"></td>
        <td id="file--LC1278" class="blob-code blob-code-inner js-file-line">void placeQueen(vector&lt;int&gt;&amp; bd, int row) {</td>
      </tr>
      <tr>
        <td id="file--L1279" class="blob-num js-line-number" data-line-number="1279"></td>
        <td id="file--LC1279" class="blob-code blob-code-inner js-file-line">    int bSize = bd.size(); </td>
      </tr>
      <tr>
        <td id="file--L1280" class="blob-num js-line-number" data-line-number="1280"></td>
        <td id="file--LC1280" class="blob-code blob-code-inner js-file-line">    for(int col = 0; col &lt; bSize; col++) {</td>
      </tr>
      <tr>
        <td id="file--L1281" class="blob-num js-line-number" data-line-number="1281"></td>
        <td id="file--LC1281" class="blob-code blob-code-inner js-file-line">        if(isCanPlace(bd, row, col)) {</td>
      </tr>
      <tr>
        <td id="file--L1282" class="blob-num js-line-number" data-line-number="1282"></td>
        <td id="file--LC1282" class="blob-code blob-code-inner js-file-line">            bd[row] = col;</td>
      </tr>
      <tr>
        <td id="file--L1283" class="blob-num js-line-number" data-line-number="1283"></td>
        <td id="file--LC1283" class="blob-code blob-code-inner js-file-line">            if(row == bSize-1) { answer++; return; }</td>
      </tr>
      <tr>
        <td id="file--L1284" class="blob-num js-line-number" data-line-number="1284"></td>
        <td id="file--LC1284" class="blob-code blob-code-inner js-file-line">            else placeQueen(bd, row+1);</td>
      </tr>
      <tr>
        <td id="file--L1285" class="blob-num js-line-number" data-line-number="1285"></td>
        <td id="file--LC1285" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1286" class="blob-num js-line-number" data-line-number="1286"></td>
        <td id="file--LC1286" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1287" class="blob-num js-line-number" data-line-number="1287"></td>
        <td id="file--LC1287" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1288" class="blob-num js-line-number" data-line-number="1288"></td>
        <td id="file--LC1288" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1289" class="blob-num js-line-number" data-line-number="1289"></td>
        <td id="file--LC1289" class="blob-code blob-code-inner js-file-line">■ 최소 연쇄행렬곱셈 알고리즘 Minimum Multiplication</td>
      </tr>
      <tr>
        <td id="file--L1290" class="blob-num js-line-number" data-line-number="1290"></td>
        <td id="file--LC1290" class="blob-code blob-code-inner js-file-line">행렬 곱셈에는 결합 법칙이 성립함으로 행렬 A, B, C, D가 있다고 할 때,</td>
      </tr>
      <tr>
        <td id="file--L1291" class="blob-num js-line-number" data-line-number="1291"></td>
        <td id="file--LC1291" class="blob-code blob-code-inner js-file-line">A × (B × C) × D 이런식으로 곱해도 결과값에는 영향을 주지 않는 다는 말이다.</td>
      </tr>
      <tr>
        <td id="file--L1292" class="blob-num js-line-number" data-line-number="1292"></td>
        <td id="file--LC1292" class="blob-code blob-code-inner js-file-line">하지만 A × B × C × D 로 계산 해서 풀었을 때와 A × ((B × C) × D) 이렇게 풀었을 때 중간에 곱셈을 하는 횟수가 달라진다.</td>
      </tr>
      <tr>
        <td id="file--L1293" class="blob-num js-line-number" data-line-number="1293"></td>
        <td id="file--LC1293" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1294" class="blob-num js-line-number" data-line-number="1294"></td>
        <td id="file--LC1294" class="blob-code blob-code-inner js-file-line">예를 들어 다음과 같은 행렬이 있다고 할 때</td>
      </tr>
      <tr>
        <td id="file--L1295" class="blob-num js-line-number" data-line-number="1295"></td>
        <td id="file--LC1295" class="blob-code blob-code-inner js-file-line">        A   ×   B    ×   C    ×   D</td>
      </tr>
      <tr>
        <td id="file--L1296" class="blob-num js-line-number" data-line-number="1296"></td>
        <td id="file--LC1296" class="blob-code blob-code-inner js-file-line">      20×2     2×30     30×12    12×8</td>
      </tr>
      <tr>
        <td id="file--L1297" class="blob-num js-line-number" data-line-number="1297"></td>
        <td id="file--LC1297" class="blob-code blob-code-inner js-file-line">결합법칙에 의해서 나올 수 있는 경우를 살펴보면 다음과 같아진다.</td>
      </tr>
      <tr>
        <td id="file--L1298" class="blob-num js-line-number" data-line-number="1298"></td>
        <td id="file--LC1298" class="blob-code blob-code-inner js-file-line">A(B(CD))   30 × 12 × 8 +  2  × 30 × 8 + 20 ×  2 × 8   = 3,680</td>
      </tr>
      <tr>
        <td id="file--L1299" class="blob-num js-line-number" data-line-number="1299"></td>
        <td id="file--LC1299" class="blob-code blob-code-inner js-file-line">(AB)(CD)   20 ×  2 ×30 + 30 × 12 × 8 + 20 × 30 × 8   = 8,880</td>
      </tr>
      <tr>
        <td id="file--L1300" class="blob-num js-line-number" data-line-number="1300"></td>
        <td id="file--LC1300" class="blob-code blob-code-inner js-file-line">A((BC)D)    2 × 30 × 12 +  2 × 12 × 8 + 20 × 2 × 8    = 1,232</td>
      </tr>
      <tr>
        <td id="file--L1301" class="blob-num js-line-number" data-line-number="1301"></td>
        <td id="file--LC1301" class="blob-code blob-code-inner js-file-line">((AB)C)D   20 × 2 × 30 + 20 × 30 × 12  + 20 × 12 × 8 = 10,320</td>
      </tr>
      <tr>
        <td id="file--L1302" class="blob-num js-line-number" data-line-number="1302"></td>
        <td id="file--LC1302" class="blob-code blob-code-inner js-file-line">(A(BC)D     2 × 30 × 12 + 20 × 2 × 12 + 20 × 12 × 8   = 3,120</td>
      </tr>
      <tr>
        <td id="file--L1303" class="blob-num js-line-number" data-line-number="1303"></td>
        <td id="file--LC1303" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1304" class="blob-num js-line-number" data-line-number="1304"></td>
        <td id="file--LC1304" class="blob-code blob-code-inner js-file-line">연쇄 행렬 곱셈의 구현의 핵심은 부분수열(subsequence) 을 이용하는 것이다.</td>
      </tr>
      <tr>
        <td id="file--L1305" class="blob-num js-line-number" data-line-number="1305"></td>
        <td id="file--LC1305" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1306" class="blob-num js-line-number" data-line-number="1306"></td>
        <td id="file--LC1306" class="blob-code blob-code-inner js-file-line">간략히 설명한다면, 다음과 같다.</td>
      </tr>
      <tr>
        <td id="file--L1307" class="blob-num js-line-number" data-line-number="1307"></td>
        <td id="file--LC1307" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1308" class="blob-num js-line-number" data-line-number="1308"></td>
        <td id="file--LC1308" class="blob-code blob-code-inner js-file-line">전체 행렬에 있어, 2개의 부분수열로 분리한다.</td>
      </tr>
      <tr>
        <td id="file--L1309" class="blob-num js-line-number" data-line-number="1309"></td>
        <td id="file--LC1309" class="blob-code blob-code-inner js-file-line">각 부분수열에 있어, 최소 비용을 구한 후 합쳐준다.</td>
      </tr>
      <tr>
        <td id="file--L1310" class="blob-num js-line-number" data-line-number="1310"></td>
        <td id="file--LC1310" class="blob-code blob-code-inner js-file-line">분리할 수 있을 때까지 부분수열의 길이를 늘려주면서 이 과정을 반복한다.</td>
      </tr>
      <tr>
        <td id="file--L1311" class="blob-num js-line-number" data-line-number="1311"></td>
        <td id="file--LC1311" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1312" class="blob-num js-line-number" data-line-number="1312"></td>
        <td id="file--LC1312" class="blob-code blob-code-inner js-file-line">연쇄 행렬 곱셈의 점화식은 다음과 같다.</td>
      </tr>
      <tr>
        <td id="file--L1313" class="blob-num js-line-number" data-line-number="1313"></td>
        <td id="file--LC1313" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1314" class="blob-num js-line-number" data-line-number="1314"></td>
        <td id="file--LC1314" class="blob-code blob-code-inner js-file-line">m[i][j] = 행렬 i번에서 j번까지의 최소 비용, d = 행렬 크기</td>
      </tr>
      <tr>
        <td id="file--L1315" class="blob-num js-line-number" data-line-number="1315"></td>
        <td id="file--LC1315" class="blob-code blob-code-inner js-file-line">=&gt; m[i][j] = m[i][k] + m[k + 1][j] + d[i - 1] + d[k] + d[j]</td>
      </tr>
      <tr>
        <td id="file--L1316" class="blob-num js-line-number" data-line-number="1316"></td>
        <td id="file--LC1316" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1317" class="blob-num js-line-number" data-line-number="1317"></td>
        <td id="file--LC1317" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1318" class="blob-num js-line-number" data-line-number="1318"></td>
        <td id="file--LC1318" class="blob-code blob-code-inner js-file-line">// Matrix A[i] has dimension dims[i-1] x dims[i] for i = 1..n</td>
      </tr>
      <tr>
        <td id="file--L1319" class="blob-num js-line-number" data-line-number="1319"></td>
        <td id="file--LC1319" class="blob-code blob-code-inner js-file-line">MatrixChainOrder(int dims[])</td>
      </tr>
      <tr>
        <td id="file--L1320" class="blob-num js-line-number" data-line-number="1320"></td>
        <td id="file--LC1320" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L1321" class="blob-num js-line-number" data-line-number="1321"></td>
        <td id="file--LC1321" class="blob-code blob-code-inner js-file-line">    // length[dims] = n + 1</td>
      </tr>
      <tr>
        <td id="file--L1322" class="blob-num js-line-number" data-line-number="1322"></td>
        <td id="file--LC1322" class="blob-code blob-code-inner js-file-line">    n = dims.length - 1;</td>
      </tr>
      <tr>
        <td id="file--L1323" class="blob-num js-line-number" data-line-number="1323"></td>
        <td id="file--LC1323" class="blob-code blob-code-inner js-file-line">    // m[i,j] = Minimum number of scalar multiplications (i.e., cost)</td>
      </tr>
      <tr>
        <td id="file--L1324" class="blob-num js-line-number" data-line-number="1324"></td>
        <td id="file--LC1324" class="blob-code blob-code-inner js-file-line">    // needed to compute the matrix A[i]A[i+1]...A[j] = A[i..j]</td>
      </tr>
      <tr>
        <td id="file--L1325" class="blob-num js-line-number" data-line-number="1325"></td>
        <td id="file--LC1325" class="blob-code blob-code-inner js-file-line">    // The cost is zero when multiplying one matrix</td>
      </tr>
      <tr>
        <td id="file--L1326" class="blob-num js-line-number" data-line-number="1326"></td>
        <td id="file--LC1326" class="blob-code blob-code-inner js-file-line">    for (i = 1; i &lt;= n; i++)</td>
      </tr>
      <tr>
        <td id="file--L1327" class="blob-num js-line-number" data-line-number="1327"></td>
        <td id="file--LC1327" class="blob-code blob-code-inner js-file-line">        m[i, i] = 0;</td>
      </tr>
      <tr>
        <td id="file--L1328" class="blob-num js-line-number" data-line-number="1328"></td>
        <td id="file--LC1328" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1329" class="blob-num js-line-number" data-line-number="1329"></td>
        <td id="file--LC1329" class="blob-code blob-code-inner js-file-line">    for (len = 2; len &lt;= n; len++) { // Subsequence lengths</td>
      </tr>
      <tr>
        <td id="file--L1330" class="blob-num js-line-number" data-line-number="1330"></td>
        <td id="file--LC1330" class="blob-code blob-code-inner js-file-line">        for (i = 1; i &lt;= n - len + 1; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1331" class="blob-num js-line-number" data-line-number="1331"></td>
        <td id="file--LC1331" class="blob-code blob-code-inner js-file-line">            j = i + len - 1;</td>
      </tr>
      <tr>
        <td id="file--L1332" class="blob-num js-line-number" data-line-number="1332"></td>
        <td id="file--LC1332" class="blob-code blob-code-inner js-file-line">            m[i, j] = MAXINT;</td>
      </tr>
      <tr>
        <td id="file--L1333" class="blob-num js-line-number" data-line-number="1333"></td>
        <td id="file--LC1333" class="blob-code blob-code-inner js-file-line">            for (k = i; k &lt;= j - 1; k++) {</td>
      </tr>
      <tr>
        <td id="file--L1334" class="blob-num js-line-number" data-line-number="1334"></td>
        <td id="file--LC1334" class="blob-code blob-code-inner js-file-line">                cost = m[i, k] + m[k+1, j] + dims[i-1]*dims[k]*dims[j];</td>
      </tr>
      <tr>
        <td id="file--L1335" class="blob-num js-line-number" data-line-number="1335"></td>
        <td id="file--LC1335" class="blob-code blob-code-inner js-file-line">                if (cost &lt; m[i, j]) {</td>
      </tr>
      <tr>
        <td id="file--L1336" class="blob-num js-line-number" data-line-number="1336"></td>
        <td id="file--LC1336" class="blob-code blob-code-inner js-file-line">                    m[i, j] = cost;</td>
      </tr>
      <tr>
        <td id="file--L1337" class="blob-num js-line-number" data-line-number="1337"></td>
        <td id="file--LC1337" class="blob-code blob-code-inner js-file-line">                    s[i, j] = k; // Index of the subsequence split that achieved minimal cost</td>
      </tr>
      <tr>
        <td id="file--L1338" class="blob-num js-line-number" data-line-number="1338"></td>
        <td id="file--LC1338" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="file--L1339" class="blob-num js-line-number" data-line-number="1339"></td>
        <td id="file--LC1339" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1340" class="blob-num js-line-number" data-line-number="1340"></td>
        <td id="file--LC1340" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1341" class="blob-num js-line-number" data-line-number="1341"></td>
        <td id="file--LC1341" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1342" class="blob-num js-line-number" data-line-number="1342"></td>
        <td id="file--LC1342" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1343" class="blob-num js-line-number" data-line-number="1343"></td>
        <td id="file--LC1343" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1344" class="blob-num js-line-number" data-line-number="1344"></td>
        <td id="file--LC1344" class="blob-code blob-code-inner js-file-line">시간복잡도는 O(n^3) 이 된다.</td>
      </tr>
      <tr>
        <td id="file--L1345" class="blob-num js-line-number" data-line-number="1345"></td>
        <td id="file--LC1345" class="blob-code blob-code-inner js-file-line">실제로 동작하는 것을 보면 쉽게 이해할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L1346" class="blob-num js-line-number" data-line-number="1346"></td>
        <td id="file--LC1346" class="blob-code blob-code-inner js-file-line">행렬 A, B, C, D 가 주어졌을 때 다음과 같다.</td>
      </tr>
      <tr>
        <td id="file--L1347" class="blob-num js-line-number" data-line-number="1347"></td>
        <td id="file--LC1347" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1348" class="blob-num js-line-number" data-line-number="1348"></td>
        <td id="file--LC1348" class="blob-code blob-code-inner js-file-line">m[1][2] = 행렬 A~B</td>
      </tr>
      <tr>
        <td id="file--L1349" class="blob-num js-line-number" data-line-number="1349"></td>
        <td id="file--LC1349" class="blob-code blob-code-inner js-file-line">m[2][3] = 행렬 B~C</td>
      </tr>
      <tr>
        <td id="file--L1350" class="blob-num js-line-number" data-line-number="1350"></td>
        <td id="file--LC1350" class="blob-code blob-code-inner js-file-line">m[3][4] = 행렬 C~D</td>
      </tr>
      <tr>
        <td id="file--L1351" class="blob-num js-line-number" data-line-number="1351"></td>
        <td id="file--LC1351" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1352" class="blob-num js-line-number" data-line-number="1352"></td>
        <td id="file--LC1352" class="blob-code blob-code-inner js-file-line">m[1][3] = 행렬 A~C, m[1][1] + m[2][2] + ....</td>
      </tr>
      <tr>
        <td id="file--L1353" class="blob-num js-line-number" data-line-number="1353"></td>
        <td id="file--LC1353" class="blob-code blob-code-inner js-file-line">m[1][3] = 행렬 A~C, m[1][2] + m[3][3] + ....</td>
      </tr>
      <tr>
        <td id="file--L1354" class="blob-num js-line-number" data-line-number="1354"></td>
        <td id="file--LC1354" class="blob-code blob-code-inner js-file-line">m[2][4] = 행렬 B~D, m[2][1] + m[2][4] + ....</td>
      </tr>
      <tr>
        <td id="file--L1355" class="blob-num js-line-number" data-line-number="1355"></td>
        <td id="file--LC1355" class="blob-code blob-code-inner js-file-line">m[2][4] = 행렬 B~D, m[2][2] + m[3][4] + ....</td>
      </tr>
      <tr>
        <td id="file--L1356" class="blob-num js-line-number" data-line-number="1356"></td>
        <td id="file--LC1356" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1357" class="blob-num js-line-number" data-line-number="1357"></td>
        <td id="file--LC1357" class="blob-code blob-code-inner js-file-line">m[1][4] = 행렬 A~D, m[1][1] + m[2][4] + ....</td>
      </tr>
      <tr>
        <td id="file--L1358" class="blob-num js-line-number" data-line-number="1358"></td>
        <td id="file--LC1358" class="blob-code blob-code-inner js-file-line">m[1][4] = 행렬 A~D, m[1][2] + m[3][4] + ....</td>
      </tr>
      <tr>
        <td id="file--L1359" class="blob-num js-line-number" data-line-number="1359"></td>
        <td id="file--LC1359" class="blob-code blob-code-inner js-file-line">m[1][4] = 행렬 A~D, m[1][3] + m[4][4] + ....</td>
      </tr>
      <tr>
        <td id="file--L1360" class="blob-num js-line-number" data-line-number="1360"></td>
        <td id="file--LC1360" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1361" class="blob-num js-line-number" data-line-number="1361"></td>
        <td id="file--LC1361" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1362" class="blob-num js-line-number" data-line-number="1362"></td>
        <td id="file--LC1362" class="blob-code blob-code-inner js-file-line">[구현방법 1]</td>
      </tr>
      <tr>
        <td id="file--L1363" class="blob-num js-line-number" data-line-number="1363"></td>
        <td id="file--LC1363" class="blob-code blob-code-inner js-file-line">#include&lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L1364" class="blob-num js-line-number" data-line-number="1364"></td>
        <td id="file--LC1364" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1365" class="blob-num js-line-number" data-line-number="1365"></td>
        <td id="file--LC1365" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1366" class="blob-num js-line-number" data-line-number="1366"></td>
        <td id="file--LC1366" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1367" class="blob-num js-line-number" data-line-number="1367"></td>
        <td id="file--LC1367" class="blob-code blob-code-inner js-file-line">#define MIN(A, B) ((A)&gt;(B)?(B):(A))</td>
      </tr>
      <tr>
        <td id="file--L1368" class="blob-num js-line-number" data-line-number="1368"></td>
        <td id="file--LC1368" class="blob-code blob-code-inner js-file-line">#define MAX_VALUE 9999999</td>
      </tr>
      <tr>
        <td id="file--L1369" class="blob-num js-line-number" data-line-number="1369"></td>
        <td id="file--LC1369" class="blob-code blob-code-inner js-file-line">#define MAX_SIZE 101</td>
      </tr>
      <tr>
        <td id="file--L1370" class="blob-num js-line-number" data-line-number="1370"></td>
        <td id="file--LC1370" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1371" class="blob-num js-line-number" data-line-number="1371"></td>
        <td id="file--LC1371" class="blob-code blob-code-inner js-file-line">int M[MAX_SIZE][MAX_SIZE];</td>
      </tr>
      <tr>
        <td id="file--L1372" class="blob-num js-line-number" data-line-number="1372"></td>
        <td id="file--LC1372" class="blob-code blob-code-inner js-file-line">int d[MAX_SIZE];</td>
      </tr>
      <tr>
        <td id="file--L1373" class="blob-num js-line-number" data-line-number="1373"></td>
        <td id="file--LC1373" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1374" class="blob-num js-line-number" data-line-number="1374"></td>
        <td id="file--LC1374" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L1375" class="blob-num js-line-number" data-line-number="1375"></td>
        <td id="file--LC1375" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L1376" class="blob-num js-line-number" data-line-number="1376"></td>
        <td id="file--LC1376" class="blob-code blob-code-inner js-file-line">    int size = 4;</td>
      </tr>
      <tr>
        <td id="file--L1377" class="blob-num js-line-number" data-line-number="1377"></td>
        <td id="file--LC1377" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1378" class="blob-num js-line-number" data-line-number="1378"></td>
        <td id="file--LC1378" class="blob-code blob-code-inner js-file-line">    d[0] = 20, d[1] = 1, d[2] = 30, d[3] = 10, d[4] = 10;</td>
      </tr>
      <tr>
        <td id="file--L1379" class="blob-num js-line-number" data-line-number="1379"></td>
        <td id="file--LC1379" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1380" class="blob-num js-line-number" data-line-number="1380"></td>
        <td id="file--LC1380" class="blob-code blob-code-inner js-file-line">    for (int diagonal = 0; diagonal &lt; size; diagonal++)</td>
      </tr>
      <tr>
        <td id="file--L1381" class="blob-num js-line-number" data-line-number="1381"></td>
        <td id="file--LC1381" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1382" class="blob-num js-line-number" data-line-number="1382"></td>
        <td id="file--LC1382" class="blob-code blob-code-inner js-file-line">        for (int i = 1; i &lt;= size - diagonal; i++)</td>
      </tr>
      <tr>
        <td id="file--L1383" class="blob-num js-line-number" data-line-number="1383"></td>
        <td id="file--LC1383" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L1384" class="blob-num js-line-number" data-line-number="1384"></td>
        <td id="file--LC1384" class="blob-code blob-code-inner js-file-line">            int j = i + diagonal;</td>
      </tr>
      <tr>
        <td id="file--L1385" class="blob-num js-line-number" data-line-number="1385"></td>
        <td id="file--LC1385" class="blob-code blob-code-inner js-file-line">            if (j == i)</td>
      </tr>
      <tr>
        <td id="file--L1386" class="blob-num js-line-number" data-line-number="1386"></td>
        <td id="file--LC1386" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="file--L1387" class="blob-num js-line-number" data-line-number="1387"></td>
        <td id="file--LC1387" class="blob-code blob-code-inner js-file-line">                M[i][j] = 0;</td>
      </tr>
      <tr>
        <td id="file--L1388" class="blob-num js-line-number" data-line-number="1388"></td>
        <td id="file--LC1388" class="blob-code blob-code-inner js-file-line">                continue;</td>
      </tr>
      <tr>
        <td id="file--L1389" class="blob-num js-line-number" data-line-number="1389"></td>
        <td id="file--LC1389" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1390" class="blob-num js-line-number" data-line-number="1390"></td>
        <td id="file--LC1390" class="blob-code blob-code-inner js-file-line">            M[i][j] = MAX_VALUE;</td>
      </tr>
      <tr>
        <td id="file--L1391" class="blob-num js-line-number" data-line-number="1391"></td>
        <td id="file--LC1391" class="blob-code blob-code-inner js-file-line">            for (int k = i; k &lt;= j - 1; k++)</td>
      </tr>
      <tr>
        <td id="file--L1392" class="blob-num js-line-number" data-line-number="1392"></td>
        <td id="file--LC1392" class="blob-code blob-code-inner js-file-line">                M[i][j] = MIN(M[i][j], M[i][k] + M[k + 1][j] + d[i - 1] * d[k] * d[j]);</td>
      </tr>
      <tr>
        <td id="file--L1393" class="blob-num js-line-number" data-line-number="1393"></td>
        <td id="file--LC1393" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1394" class="blob-num js-line-number" data-line-number="1394"></td>
        <td id="file--LC1394" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1395" class="blob-num js-line-number" data-line-number="1395"></td>
        <td id="file--LC1395" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1396" class="blob-num js-line-number" data-line-number="1396"></td>
        <td id="file--LC1396" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1397" class="blob-num js-line-number" data-line-number="1397"></td>
        <td id="file--LC1397" class="blob-code blob-code-inner js-file-line">    /*결과 출력*/</td>
      </tr>
      <tr>
        <td id="file--L1398" class="blob-num js-line-number" data-line-number="1398"></td>
        <td id="file--LC1398" class="blob-code blob-code-inner js-file-line">    cout &lt;&lt; M[1][size] &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L1399" class="blob-num js-line-number" data-line-number="1399"></td>
        <td id="file--LC1399" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= size; i++)</td>
      </tr>
      <tr>
        <td id="file--L1400" class="blob-num js-line-number" data-line-number="1400"></td>
        <td id="file--LC1400" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1401" class="blob-num js-line-number" data-line-number="1401"></td>
        <td id="file--LC1401" class="blob-code blob-code-inner js-file-line">        for (int j = 1; j &lt;= size; j++)</td>
      </tr>
      <tr>
        <td id="file--L1402" class="blob-num js-line-number" data-line-number="1402"></td>
        <td id="file--LC1402" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L1403" class="blob-num js-line-number" data-line-number="1403"></td>
        <td id="file--LC1403" class="blob-code blob-code-inner js-file-line">            cout &lt;&lt; M[i][j] &lt;&lt; &quot; &quot;;</td>
      </tr>
      <tr>
        <td id="file--L1404" class="blob-num js-line-number" data-line-number="1404"></td>
        <td id="file--LC1404" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1405" class="blob-num js-line-number" data-line-number="1405"></td>
        <td id="file--LC1405" class="blob-code blob-code-inner js-file-line">        cout &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L1406" class="blob-num js-line-number" data-line-number="1406"></td>
        <td id="file--LC1406" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1407" class="blob-num js-line-number" data-line-number="1407"></td>
        <td id="file--LC1407" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L1408" class="blob-num js-line-number" data-line-number="1408"></td>
        <td id="file--LC1408" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1409" class="blob-num js-line-number" data-line-number="1409"></td>
        <td id="file--LC1409" class="blob-code blob-code-inner js-file-line">Colored by Color Scripter</td>
      </tr>
      <tr>
        <td id="file--L1410" class="blob-num js-line-number" data-line-number="1410"></td>
        <td id="file--LC1410" class="blob-code blob-code-inner js-file-line">cs</td>
      </tr>
      <tr>
        <td id="file--L1411" class="blob-num js-line-number" data-line-number="1411"></td>
        <td id="file--LC1411" class="blob-code blob-code-inner js-file-line">(line 18) for (int diagonal = 0; diagonal &lt; size; diagonal++)</td>
      </tr>
      <tr>
        <td id="file--L1412" class="blob-num js-line-number" data-line-number="1412"></td>
        <td id="file--LC1412" class="blob-code blob-code-inner js-file-line">  -&gt;  구하려는 행렬 사이즈만큼 반복한다.</td>
      </tr>
      <tr>
        <td id="file--L1413" class="blob-num js-line-number" data-line-number="1413"></td>
        <td id="file--LC1413" class="blob-code blob-code-inner js-file-line">(line 20) for (int i = 1; i &lt;= size - diagonal; i++)</td>
      </tr>
      <tr>
        <td id="file--L1414" class="blob-num js-line-number" data-line-number="1414"></td>
        <td id="file--LC1414" class="blob-code blob-code-inner js-file-line">  -&gt; i값은 상단 1부터 시작, 반복하는 횟수가 1씩 감소한다.</td>
      </tr>
      <tr>
        <td id="file--L1415" class="blob-num js-line-number" data-line-number="1415"></td>
        <td id="file--LC1415" class="blob-code blob-code-inner js-file-line">(line 22) int j = i + diagonal;</td>
      </tr>
      <tr>
        <td id="file--L1416" class="blob-num js-line-number" data-line-number="1416"></td>
        <td id="file--LC1416" class="blob-code blob-code-inner js-file-line"> -&gt; j값은 우측으로 diagnonal만큼 반복할때마다 이동한다.</td>
      </tr>
      <tr>
        <td id="file--L1417" class="blob-num js-line-number" data-line-number="1417"></td>
        <td id="file--LC1417" class="blob-code blob-code-inner js-file-line">(line 23~25) if (j == i) </td>
      </tr>
      <tr>
        <td id="file--L1418" class="blob-num js-line-number" data-line-number="1418"></td>
        <td id="file--LC1418" class="blob-code blob-code-inner js-file-line"> -&gt; i와 j가 같을 경우 M[i][j] = 0</td>
      </tr>
      <tr>
        <td id="file--L1419" class="blob-num js-line-number" data-line-number="1419"></td>
        <td id="file--LC1419" class="blob-code blob-code-inner js-file-line">(line 28~30) </td>
      </tr>
      <tr>
        <td id="file--L1420" class="blob-num js-line-number" data-line-number="1420"></td>
        <td id="file--LC1420" class="blob-code blob-code-inner js-file-line"> -&gt; k=i~j-1만큼 반복하며, 공식을 적용하여 M[i][j]에 들어갈 곱의 최소값을 구한다.</td>
      </tr>
      <tr>
        <td id="file--L1421" class="blob-num js-line-number" data-line-number="1421"></td>
        <td id="file--LC1421" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1422" class="blob-num js-line-number" data-line-number="1422"></td>
        <td id="file--LC1422" class="blob-code blob-code-inner js-file-line">[구현방법 2]</td>
      </tr>
      <tr>
        <td id="file--L1423" class="blob-num js-line-number" data-line-number="1423"></td>
        <td id="file--LC1423" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L1424" class="blob-num js-line-number" data-line-number="1424"></td>
        <td id="file--LC1424" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1425" class="blob-num js-line-number" data-line-number="1425"></td>
        <td id="file--LC1425" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1426" class="blob-num js-line-number" data-line-number="1426"></td>
        <td id="file--LC1426" class="blob-code blob-code-inner js-file-line">int ChainedMatrix(int arr[], int n)</td>
      </tr>
      <tr>
        <td id="file--L1427" class="blob-num js-line-number" data-line-number="1427"></td>
        <td id="file--LC1427" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L1428" class="blob-num js-line-number" data-line-number="1428"></td>
        <td id="file--LC1428" class="blob-code blob-code-inner js-file-line">    int** DP;</td>
      </tr>
      <tr>
        <td id="file--L1429" class="blob-num js-line-number" data-line-number="1429"></td>
        <td id="file--LC1429" class="blob-code blob-code-inner js-file-line">    int i, j, k, L;</td>
      </tr>
      <tr>
        <td id="file--L1430" class="blob-num js-line-number" data-line-number="1430"></td>
        <td id="file--LC1430" class="blob-code blob-code-inner js-file-line">    int tmp;</td>
      </tr>
      <tr>
        <td id="file--L1431" class="blob-num js-line-number" data-line-number="1431"></td>
        <td id="file--LC1431" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1432" class="blob-num js-line-number" data-line-number="1432"></td>
        <td id="file--LC1432" class="blob-code blob-code-inner js-file-line">    DP = new int*[n];</td>
      </tr>
      <tr>
        <td id="file--L1433" class="blob-num js-line-number" data-line-number="1433"></td>
        <td id="file--LC1433" class="blob-code blob-code-inner js-file-line">    for (i = 0; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L1434" class="blob-num js-line-number" data-line-number="1434"></td>
        <td id="file--LC1434" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1435" class="blob-num js-line-number" data-line-number="1435"></td>
        <td id="file--LC1435" class="blob-code blob-code-inner js-file-line">        DP[i] = new int[n];</td>
      </tr>
      <tr>
        <td id="file--L1436" class="blob-num js-line-number" data-line-number="1436"></td>
        <td id="file--LC1436" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1437" class="blob-num js-line-number" data-line-number="1437"></td>
        <td id="file--LC1437" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1438" class="blob-num js-line-number" data-line-number="1438"></td>
        <td id="file--LC1438" class="blob-code blob-code-inner js-file-line">    for (i = 1; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L1439" class="blob-num js-line-number" data-line-number="1439"></td>
        <td id="file--LC1439" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1440" class="blob-num js-line-number" data-line-number="1440"></td>
        <td id="file--LC1440" class="blob-code blob-code-inner js-file-line">        DP[i][i] = 0;</td>
      </tr>
      <tr>
        <td id="file--L1441" class="blob-num js-line-number" data-line-number="1441"></td>
        <td id="file--LC1441" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1442" class="blob-num js-line-number" data-line-number="1442"></td>
        <td id="file--LC1442" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1443" class="blob-num js-line-number" data-line-number="1443"></td>
        <td id="file--LC1443" class="blob-code blob-code-inner js-file-line">    for (i = 1; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L1444" class="blob-num js-line-number" data-line-number="1444"></td>
        <td id="file--LC1444" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1445" class="blob-num js-line-number" data-line-number="1445"></td>
        <td id="file--LC1445" class="blob-code blob-code-inner js-file-line">        for (j = 1; j &lt; n - i; j++)</td>
      </tr>
      <tr>
        <td id="file--L1446" class="blob-num js-line-number" data-line-number="1446"></td>
        <td id="file--LC1446" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L1447" class="blob-num js-line-number" data-line-number="1447"></td>
        <td id="file--LC1447" class="blob-code blob-code-inner js-file-line">            k = i + j;</td>
      </tr>
      <tr>
        <td id="file--L1448" class="blob-num js-line-number" data-line-number="1448"></td>
        <td id="file--LC1448" class="blob-code blob-code-inner js-file-line">            DP[j][k] = INT32_MAX;</td>
      </tr>
      <tr>
        <td id="file--L1449" class="blob-num js-line-number" data-line-number="1449"></td>
        <td id="file--LC1449" class="blob-code blob-code-inner js-file-line">            for (L = j; L &lt;= k - 1; L++)</td>
      </tr>
      <tr>
        <td id="file--L1450" class="blob-num js-line-number" data-line-number="1450"></td>
        <td id="file--LC1450" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="file--L1451" class="blob-num js-line-number" data-line-number="1451"></td>
        <td id="file--LC1451" class="blob-code blob-code-inner js-file-line">                tmp = DP[j][L] + DP[L + 1][k] + arr[j - 1] * arr[L] * arr[k];</td>
      </tr>
      <tr>
        <td id="file--L1452" class="blob-num js-line-number" data-line-number="1452"></td>
        <td id="file--LC1452" class="blob-code blob-code-inner js-file-line">                if (tmp &lt; DP[j][k])</td>
      </tr>
      <tr>
        <td id="file--L1453" class="blob-num js-line-number" data-line-number="1453"></td>
        <td id="file--LC1453" class="blob-code blob-code-inner js-file-line">                {</td>
      </tr>
      <tr>
        <td id="file--L1454" class="blob-num js-line-number" data-line-number="1454"></td>
        <td id="file--LC1454" class="blob-code blob-code-inner js-file-line">                    DP[j][k] = tmp;</td>
      </tr>
      <tr>
        <td id="file--L1455" class="blob-num js-line-number" data-line-number="1455"></td>
        <td id="file--LC1455" class="blob-code blob-code-inner js-file-line">                    //cout &lt;&lt; tmp &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L1456" class="blob-num js-line-number" data-line-number="1456"></td>
        <td id="file--LC1456" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="file--L1457" class="blob-num js-line-number" data-line-number="1457"></td>
        <td id="file--LC1457" class="blob-code blob-code-inner js-file-line">                cout &lt;&lt; tmp &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L1458" class="blob-num js-line-number" data-line-number="1458"></td>
        <td id="file--LC1458" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1459" class="blob-num js-line-number" data-line-number="1459"></td>
        <td id="file--LC1459" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1460" class="blob-num js-line-number" data-line-number="1460"></td>
        <td id="file--LC1460" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1461" class="blob-num js-line-number" data-line-number="1461"></td>
        <td id="file--LC1461" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1462" class="blob-num js-line-number" data-line-number="1462"></td>
        <td id="file--LC1462" class="blob-code blob-code-inner js-file-line">    return DP[1][n - 1];</td>
      </tr>
      <tr>
        <td id="file--L1463" class="blob-num js-line-number" data-line-number="1463"></td>
        <td id="file--LC1463" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1464" class="blob-num js-line-number" data-line-number="1464"></td>
        <td id="file--LC1464" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1465" class="blob-num js-line-number" data-line-number="1465"></td>
        <td id="file--LC1465" class="blob-code blob-code-inner js-file-line">int main(void)</td>
      </tr>
      <tr>
        <td id="file--L1466" class="blob-num js-line-number" data-line-number="1466"></td>
        <td id="file--LC1466" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L1467" class="blob-num js-line-number" data-line-number="1467"></td>
        <td id="file--LC1467" class="blob-code blob-code-inner js-file-line">    int arr[] = { 10,20,7,5,30 };</td>
      </tr>
      <tr>
        <td id="file--L1468" class="blob-num js-line-number" data-line-number="1468"></td>
        <td id="file--LC1468" class="blob-code blob-code-inner js-file-line">    int n;</td>
      </tr>
      <tr>
        <td id="file--L1469" class="blob-num js-line-number" data-line-number="1469"></td>
        <td id="file--LC1469" class="blob-code blob-code-inner js-file-line">    n = sizeof(arr) / sizeof(int);</td>
      </tr>
      <tr>
        <td id="file--L1470" class="blob-num js-line-number" data-line-number="1470"></td>
        <td id="file--LC1470" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1471" class="blob-num js-line-number" data-line-number="1471"></td>
        <td id="file--LC1471" class="blob-code blob-code-inner js-file-line">    cout &lt;&lt; ChainedMatrix(arr, sizeof(arr) / sizeof(int)) &lt;&lt; endl;</td>
      </tr>
      <tr>
        <td id="file--L1472" class="blob-num js-line-number" data-line-number="1472"></td>
        <td id="file--LC1472" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1473" class="blob-num js-line-number" data-line-number="1473"></td>
        <td id="file--LC1473" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1474" class="blob-num js-line-number" data-line-number="1474"></td>
        <td id="file--LC1474" class="blob-code blob-code-inner js-file-line">http://egloos.zum.com/sakuragis/v/3322692</td>
      </tr>
      <tr>
        <td id="file--L1475" class="blob-num js-line-number" data-line-number="1475"></td>
        <td id="file--LC1475" class="blob-code blob-code-inner js-file-line">http://debuglog.tistory.com/76</td>
      </tr>
      <tr>
        <td id="file--L1476" class="blob-num js-line-number" data-line-number="1476"></td>
        <td id="file--LC1476" class="blob-code blob-code-inner js-file-line">http://twinparadox.tistory.com/183</td>
      </tr>
      <tr>
        <td id="file--L1477" class="blob-num js-line-number" data-line-number="1477"></td>
        <td id="file--LC1477" class="blob-code blob-code-inner js-file-line">http://huiyu.tistory.com/entry/DP-%EC%97%B0%EC%87%84%ED%96%89%EB%A0%AC-%EC%B5%9C%EC%86%8C%EA%B3%B1%EC%85%88-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98</td>
      </tr>
      <tr>
        <td id="file--L1478" class="blob-num js-line-number" data-line-number="1478"></td>
        <td id="file--LC1478" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1479" class="blob-num js-line-number" data-line-number="1479"></td>
        <td id="file--LC1479" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1480" class="blob-num js-line-number" data-line-number="1480"></td>
        <td id="file--LC1480" class="blob-code blob-code-inner js-file-line">■ 인덱스 트리</td>
      </tr>
      <tr>
        <td id="file--L1481" class="blob-num js-line-number" data-line-number="1481"></td>
        <td id="file--LC1481" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1482" class="blob-num js-line-number" data-line-number="1482"></td>
        <td id="file--LC1482" class="blob-code blob-code-inner js-file-line">date[] 배열의 값들을 리프노드로 하는 이진 트리를  구성하면 그 것이 바로 인덱스 트리이다.</td>
      </tr>
      <tr>
        <td id="file--L1483" class="blob-num js-line-number" data-line-number="1483"></td>
        <td id="file--LC1483" class="blob-code blob-code-inner js-file-line">그러면 이 인덱스 트리를 구성할 때는 배열으로 구현하면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1484" class="blob-num js-line-number" data-line-number="1484"></td>
        <td id="file--LC1484" class="blob-code blob-code-inner js-file-line">트리를 배열로 구성하려면 한가지 조건만 알면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1485" class="blob-num js-line-number" data-line-number="1485"></td>
        <td id="file--LC1485" class="blob-code blob-code-inner js-file-line">그 것은 바로 tree[x]의 자식노드는 이진트리이기 때문에 tree[2*x], tree[2*x+1] 이고 tree[y]의 부모노드는 tree[y/2]라는 점이다.</td>
      </tr>
      <tr>
        <td id="file--L1486" class="blob-num js-line-number" data-line-number="1486"></td>
        <td id="file--LC1486" class="blob-code blob-code-inner js-file-line">그렇다면 date[] 배열의 갯수를 N이라고 하자. 그러면 tree의 크기는 얼마나 잡아야 할까?</td>
      </tr>
      <tr>
        <td id="file--L1487" class="blob-num js-line-number" data-line-number="1487"></td>
        <td id="file--LC1487" class="blob-code blob-code-inner js-file-line">N의 갯수가 딱 2^x개 라면(완전이진트리를 만들 수 있다면) 2^(x+1)개를 잡으면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1488" class="blob-num js-line-number" data-line-number="1488"></td>
        <td id="file--LC1488" class="blob-code blob-code-inner js-file-line">왜냐하면 리프노드들의 부모노드의 갯수는 (2^x)-1개 이기 때문이다.</td>
      </tr>
      <tr>
        <td id="file--L1489" class="blob-num js-line-number" data-line-number="1489"></td>
        <td id="file--LC1489" class="blob-code blob-code-inner js-file-line">즉, 2^(x+1)개면 인덱스 0를 안 쓴다고 하여도 리프노드와 부모노드들을 모두 포함할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L1490" class="blob-num js-line-number" data-line-number="1490"></td>
        <td id="file--LC1490" class="blob-code blob-code-inner js-file-line">만약 N의 갯수가 2^x &lt; N &lt;= 2^(x+1) 이라면 배열을 2^(x+2)개를 잡아야 한다.</td>
      </tr>
      <tr>
        <td id="file--L1491" class="blob-num js-line-number" data-line-number="1491"></td>
        <td id="file--LC1491" class="blob-code blob-code-inner js-file-line">잘 이해가 안된다면 그냥 max(N)*4로 배열 크기를 잡아버리면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1492" class="blob-num js-line-number" data-line-number="1492"></td>
        <td id="file--LC1492" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1493" class="blob-num js-line-number" data-line-number="1493"></td>
        <td id="file--LC1493" class="blob-code blob-code-inner js-file-line">결국 인덱스 트리를 사용하는 경우는 주어진 data 배열에서 구간 대표 값을 여러 구간에 대하여 계속해서 구해야 하고</td>
      </tr>
      <tr>
        <td id="file--L1494" class="blob-num js-line-number" data-line-number="1494"></td>
        <td id="file--LC1494" class="blob-code blob-code-inner js-file-line">data 배열이 계속해서 변경 될 때 사용한다.</td>
      </tr>
      <tr>
        <td id="file--L1495" class="blob-num js-line-number" data-line-number="1495"></td>
        <td id="file--LC1495" class="blob-code blob-code-inner js-file-line">아래코드는 구간합을 구하는 코드이다.</td>
      </tr>
      <tr>
        <td id="file--L1496" class="blob-num js-line-number" data-line-number="1496"></td>
        <td id="file--LC1496" class="blob-code blob-code-inner js-file-line">각 리프노드에는 update할 때마다 1씩 들어가게 된다.</td>
      </tr>
      <tr>
        <td id="file--L1497" class="blob-num js-line-number" data-line-number="1497"></td>
        <td id="file--LC1497" class="blob-code blob-code-inner js-file-line">아래코드는 재귀 방식으로 구현되어 있고 </td>
      </tr>
      <tr>
        <td id="file--L1498" class="blob-num js-line-number" data-line-number="1498"></td>
        <td id="file--LC1498" class="blob-code blob-code-inner js-file-line">재귀로 구현한 코드는 3가지만 고려하면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1499" class="blob-num js-line-number" data-line-number="1499"></td>
        <td id="file--LC1499" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1500" class="blob-num js-line-number" data-line-number="1500"></td>
        <td id="file--LC1500" class="blob-code blob-code-inner js-file-line">1. 구하고자하는 구간과 현재 구간이 하나도 겹치지 않을 때</td>
      </tr>
      <tr>
        <td id="file--L1501" class="blob-num js-line-number" data-line-number="1501"></td>
        <td id="file--LC1501" class="blob-code blob-code-inner js-file-line">2. 구하고자하는 구간에 현재 구간이 완전이 포함될 때</td>
      </tr>
      <tr>
        <td id="file--L1502" class="blob-num js-line-number" data-line-number="1502"></td>
        <td id="file--LC1502" class="blob-code blob-code-inner js-file-line">3. 구하고자하는 구간과 현재 구간이 겹쳐 있을 때</td>
      </tr>
      <tr>
        <td id="file--L1503" class="blob-num js-line-number" data-line-number="1503"></td>
        <td id="file--LC1503" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1504" class="blob-num js-line-number" data-line-number="1504"></td>
        <td id="file--LC1504" class="blob-code blob-code-inner js-file-line">[구현1]</td>
      </tr>
      <tr>
        <td id="file--L1505" class="blob-num js-line-number" data-line-number="1505"></td>
        <td id="file--LC1505" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L1506" class="blob-num js-line-number" data-line-number="1506"></td>
        <td id="file--LC1506" class="blob-code blob-code-inner js-file-line">#include &lt;cstring&gt;</td>
      </tr>
      <tr>
        <td id="file--L1507" class="blob-num js-line-number" data-line-number="1507"></td>
        <td id="file--LC1507" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1508" class="blob-num js-line-number" data-line-number="1508"></td>
        <td id="file--LC1508" class="blob-code blob-code-inner js-file-line">int N, M;</td>
      </tr>
      <tr>
        <td id="file--L1509" class="blob-num js-line-number" data-line-number="1509"></td>
        <td id="file--LC1509" class="blob-code blob-code-inner js-file-line">int arr[100001];</td>
      </tr>
      <tr>
        <td id="file--L1510" class="blob-num js-line-number" data-line-number="1510"></td>
        <td id="file--LC1510" class="blob-code blob-code-inner js-file-line">int inv[100001];</td>
      </tr>
      <tr>
        <td id="file--L1511" class="blob-num js-line-number" data-line-number="1511"></td>
        <td id="file--LC1511" class="blob-code blob-code-inner js-file-line">int tree[400001];</td>
      </tr>
      <tr>
        <td id="file--L1512" class="blob-num js-line-number" data-line-number="1512"></td>
        <td id="file--LC1512" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1513" class="blob-num js-line-number" data-line-number="1513"></td>
        <td id="file--LC1513" class="blob-code blob-code-inner js-file-line">//(루트노드, 구하고자하는 범위, 현재 범위)</td>
      </tr>
      <tr>
        <td id="file--L1514" class="blob-num js-line-number" data-line-number="1514"></td>
        <td id="file--LC1514" class="blob-code blob-code-inner js-file-line">int get(int node, int left, int right, int start, int end){</td>
      </tr>
      <tr>
        <td id="file--L1515" class="blob-num js-line-number" data-line-number="1515"></td>
        <td id="file--LC1515" class="blob-code blob-code-inner js-file-line">    //구하고자하는 구간과 현재 구간이 하나도 겹치지 않을 때</td>
      </tr>
      <tr>
        <td id="file--L1516" class="blob-num js-line-number" data-line-number="1516"></td>
        <td id="file--LC1516" class="blob-code blob-code-inner js-file-line">	if (end&lt;left || start&gt;right) return 0;</td>
      </tr>
      <tr>
        <td id="file--L1517" class="blob-num js-line-number" data-line-number="1517"></td>
        <td id="file--LC1517" class="blob-code blob-code-inner js-file-line">    //구하고자하는 구간에 현재 구간이 완전이 포함될 때</td>
      </tr>
      <tr>
        <td id="file--L1518" class="blob-num js-line-number" data-line-number="1518"></td>
        <td id="file--LC1518" class="blob-code blob-code-inner js-file-line">	if (left &lt;= start &amp;&amp; end &lt;= right) return tree[node];</td>
      </tr>
      <tr>
        <td id="file--L1519" class="blob-num js-line-number" data-line-number="1519"></td>
        <td id="file--LC1519" class="blob-code blob-code-inner js-file-line">    //구하고자하는 구간과 현재 구간이 겹쳐 있을 때</td>
      </tr>
      <tr>
        <td id="file--L1520" class="blob-num js-line-number" data-line-number="1520"></td>
        <td id="file--LC1520" class="blob-code blob-code-inner js-file-line">	return get(node * 2, left, right, start, (end + start) / 2) +</td>
      </tr>
      <tr>
        <td id="file--L1521" class="blob-num js-line-number" data-line-number="1521"></td>
        <td id="file--LC1521" class="blob-code blob-code-inner js-file-line">		get(node * 2 + 1, left, right, ((start + end) / 2) + 1, end);</td>
      </tr>
      <tr>
        <td id="file--L1522" class="blob-num js-line-number" data-line-number="1522"></td>
        <td id="file--LC1522" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1523" class="blob-num js-line-number" data-line-number="1523"></td>
        <td id="file--LC1523" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1524" class="blob-num js-line-number" data-line-number="1524"></td>
        <td id="file--LC1524" class="blob-code blob-code-inner js-file-line">//(루트노드, 업데이트할 리프노드, 현재 범위)</td>
      </tr>
      <tr>
        <td id="file--L1525" class="blob-num js-line-number" data-line-number="1525"></td>
        <td id="file--LC1525" class="blob-code blob-code-inner js-file-line">void update(int node, int num, int start, int end){</td>
      </tr>
      <tr>
        <td id="file--L1526" class="blob-num js-line-number" data-line-number="1526"></td>
        <td id="file--LC1526" class="blob-code blob-code-inner js-file-line">    //구하고자하는 구간과 현재 구간이 하나도 겹치지 않을 때</td>
      </tr>
      <tr>
        <td id="file--L1527" class="blob-num js-line-number" data-line-number="1527"></td>
        <td id="file--LC1527" class="blob-code blob-code-inner js-file-line">	if (num &lt; start || end &lt; num) return;</td>
      </tr>
      <tr>
        <td id="file--L1528" class="blob-num js-line-number" data-line-number="1528"></td>
        <td id="file--LC1528" class="blob-code blob-code-inner js-file-line">    //구하고자하는 구간에 현재 구간이 완전이 포함될 때</td>
      </tr>
      <tr>
        <td id="file--L1529" class="blob-num js-line-number" data-line-number="1529"></td>
        <td id="file--LC1529" class="blob-code blob-code-inner js-file-line">	if (start == end) {</td>
      </tr>
      <tr>
        <td id="file--L1530" class="blob-num js-line-number" data-line-number="1530"></td>
        <td id="file--LC1530" class="blob-code blob-code-inner js-file-line">		tree[node] = 1;</td>
      </tr>
      <tr>
        <td id="file--L1531" class="blob-num js-line-number" data-line-number="1531"></td>
        <td id="file--LC1531" class="blob-code blob-code-inner js-file-line">		return;</td>
      </tr>
      <tr>
        <td id="file--L1532" class="blob-num js-line-number" data-line-number="1532"></td>
        <td id="file--LC1532" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L1533" class="blob-num js-line-number" data-line-number="1533"></td>
        <td id="file--LC1533" class="blob-code blob-code-inner js-file-line">    //구하고자하는 구간과 현재 구간이 겹쳐 있을 때</td>
      </tr>
      <tr>
        <td id="file--L1534" class="blob-num js-line-number" data-line-number="1534"></td>
        <td id="file--LC1534" class="blob-code blob-code-inner js-file-line">	update(node * 2, num, start, (end + start) / 2);</td>
      </tr>
      <tr>
        <td id="file--L1535" class="blob-num js-line-number" data-line-number="1535"></td>
        <td id="file--LC1535" class="blob-code blob-code-inner js-file-line">	update(node * 2 + 1, num, ((start + end) / 2) + 1, end);</td>
      </tr>
      <tr>
        <td id="file--L1536" class="blob-num js-line-number" data-line-number="1536"></td>
        <td id="file--LC1536" class="blob-code blob-code-inner js-file-line">	tree[node]++;</td>
      </tr>
      <tr>
        <td id="file--L1537" class="blob-num js-line-number" data-line-number="1537"></td>
        <td id="file--LC1537" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1538" class="blob-num js-line-number" data-line-number="1538"></td>
        <td id="file--LC1538" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1539" class="blob-num js-line-number" data-line-number="1539"></td>
        <td id="file--LC1539" class="blob-code blob-code-inner js-file-line">int main(){</td>
      </tr>
      <tr>
        <td id="file--L1540" class="blob-num js-line-number" data-line-number="1540"></td>
        <td id="file--LC1540" class="blob-code blob-code-inner js-file-line">	scanf(&quot;%d&quot;, &amp;N);</td>
      </tr>
      <tr>
        <td id="file--L1541" class="blob-num js-line-number" data-line-number="1541"></td>
        <td id="file--LC1541" class="blob-code blob-code-inner js-file-line">	while (N--){</td>
      </tr>
      <tr>
        <td id="file--L1542" class="blob-num js-line-number" data-line-number="1542"></td>
        <td id="file--LC1542" class="blob-code blob-code-inner js-file-line">		scanf(&quot;%d&quot;, &amp;M);</td>
      </tr>
      <tr>
        <td id="file--L1543" class="blob-num js-line-number" data-line-number="1543"></td>
        <td id="file--LC1543" class="blob-code blob-code-inner js-file-line">		memset(tree, 0, sizeof(tree));</td>
      </tr>
      <tr>
        <td id="file--L1544" class="blob-num js-line-number" data-line-number="1544"></td>
        <td id="file--LC1544" class="blob-code blob-code-inner js-file-line">		for (int i = 1; i &lt;= M; i++){</td>
      </tr>
      <tr>
        <td id="file--L1545" class="blob-num js-line-number" data-line-number="1545"></td>
        <td id="file--LC1545" class="blob-code blob-code-inner js-file-line">			scanf(&quot;%d&quot;, &amp;arr[i]);</td>
      </tr>
      <tr>
        <td id="file--L1546" class="blob-num js-line-number" data-line-number="1546"></td>
        <td id="file--LC1546" class="blob-code blob-code-inner js-file-line">		}</td>
      </tr>
      <tr>
        <td id="file--L1547" class="blob-num js-line-number" data-line-number="1547"></td>
        <td id="file--LC1547" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1548" class="blob-num js-line-number" data-line-number="1548"></td>
        <td id="file--LC1548" class="blob-code blob-code-inner js-file-line">		for (int i = 1; i &lt;= M; i++){</td>
      </tr>
      <tr>
        <td id="file--L1549" class="blob-num js-line-number" data-line-number="1549"></td>
        <td id="file--LC1549" class="blob-code blob-code-inner js-file-line">			int tmp;</td>
      </tr>
      <tr>
        <td id="file--L1550" class="blob-num js-line-number" data-line-number="1550"></td>
        <td id="file--LC1550" class="blob-code blob-code-inner js-file-line">			scanf(&quot;%d&quot;, &amp;tmp);</td>
      </tr>
      <tr>
        <td id="file--L1551" class="blob-num js-line-number" data-line-number="1551"></td>
        <td id="file--LC1551" class="blob-code blob-code-inner js-file-line">			inv[tmp] = i;</td>
      </tr>
      <tr>
        <td id="file--L1552" class="blob-num js-line-number" data-line-number="1552"></td>
        <td id="file--LC1552" class="blob-code blob-code-inner js-file-line">		}</td>
      </tr>
      <tr>
        <td id="file--L1553" class="blob-num js-line-number" data-line-number="1553"></td>
        <td id="file--LC1553" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1554" class="blob-num js-line-number" data-line-number="1554"></td>
        <td id="file--LC1554" class="blob-code blob-code-inner js-file-line">		long long sum = 0;</td>
      </tr>
      <tr>
        <td id="file--L1555" class="blob-num js-line-number" data-line-number="1555"></td>
        <td id="file--LC1555" class="blob-code blob-code-inner js-file-line">		for (int i = 1; i &lt;= M; i++){</td>
      </tr>
      <tr>
        <td id="file--L1556" class="blob-num js-line-number" data-line-number="1556"></td>
        <td id="file--LC1556" class="blob-code blob-code-inner js-file-line">			int now = inv[arr[i]];</td>
      </tr>
      <tr>
        <td id="file--L1557" class="blob-num js-line-number" data-line-number="1557"></td>
        <td id="file--LC1557" class="blob-code blob-code-inner js-file-line">			sum += get(1, now+1, M, 1, M);</td>
      </tr>
      <tr>
        <td id="file--L1558" class="blob-num js-line-number" data-line-number="1558"></td>
        <td id="file--LC1558" class="blob-code blob-code-inner js-file-line">			update(1, now, 1, M);</td>
      </tr>
      <tr>
        <td id="file--L1559" class="blob-num js-line-number" data-line-number="1559"></td>
        <td id="file--LC1559" class="blob-code blob-code-inner js-file-line">		}</td>
      </tr>
      <tr>
        <td id="file--L1560" class="blob-num js-line-number" data-line-number="1560"></td>
        <td id="file--LC1560" class="blob-code blob-code-inner js-file-line">		printf(&quot;%lld\n&quot;, sum);</td>
      </tr>
      <tr>
        <td id="file--L1561" class="blob-num js-line-number" data-line-number="1561"></td>
        <td id="file--LC1561" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L1562" class="blob-num js-line-number" data-line-number="1562"></td>
        <td id="file--LC1562" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1563" class="blob-num js-line-number" data-line-number="1563"></td>
        <td id="file--LC1563" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1564" class="blob-num js-line-number" data-line-number="1564"></td>
        <td id="file--LC1564" class="blob-code blob-code-inner js-file-line">■ 부분합(Prefix Sums) 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L1565" class="blob-num js-line-number" data-line-number="1565"></td>
        <td id="file--LC1565" class="blob-code blob-code-inner js-file-line">여기서 느낀점은 부분합을 구할때 부분적인 합을 누적시키므로 DP와 비슷하다는 점</td>
      </tr>
      <tr>
        <td id="file--L1566" class="blob-num js-line-number" data-line-number="1566"></td>
        <td id="file--LC1566" class="blob-code blob-code-inner js-file-line">sub[0]=a[0]</td>
      </tr>
      <tr>
        <td id="file--L1567" class="blob-num js-line-number" data-line-number="1567"></td>
        <td id="file--LC1567" class="blob-code blob-code-inner js-file-line">+</td>
      </tr>
      <tr>
        <td id="file--L1568" class="blob-num js-line-number" data-line-number="1568"></td>
        <td id="file--LC1568" class="blob-code blob-code-inner js-file-line">sub[1]=sub[0]+a[1] </td>
      </tr>
      <tr>
        <td id="file--L1569" class="blob-num js-line-number" data-line-number="1569"></td>
        <td id="file--LC1569" class="blob-code blob-code-inner js-file-line">sub[2]=sub[1]+a[2]</td>
      </tr>
      <tr>
        <td id="file--L1570" class="blob-num js-line-number" data-line-number="1570"></td>
        <td id="file--LC1570" class="blob-code blob-code-inner js-file-line">이런식으로 구해가면된다.</td>
      </tr>
      <tr>
        <td id="file--L1571" class="blob-num js-line-number" data-line-number="1571"></td>
        <td id="file--LC1571" class="blob-code blob-code-inner js-file-line">나중에 2-4, 3-10 이렇게 범위를 구하는 쿼리가 나오면 sub[4]-sub[1]= 2-4 이렇게 2번의 참조로 값을 구할 수 있으므로 효과적이다.</td>
      </tr>
      <tr>
        <td id="file--L1572" class="blob-num js-line-number" data-line-number="1572"></td>
        <td id="file--LC1572" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1573" class="blob-num js-line-number" data-line-number="1573"></td>
        <td id="file--LC1573" class="blob-code blob-code-inner js-file-line">부분 평균 문제가 있었는데 평균의 수학적인 법칙으로</td>
      </tr>
      <tr>
        <td id="file--L1574" class="blob-num js-line-number" data-line-number="1574"></td>
        <td id="file--LC1574" class="blob-code blob-code-inner js-file-line">부분평균의 최솟값을 구하려면 길이가 2짜리 부분집합과 3짜리의 최소값만 고려하면 된다는 점이였다.</td>
      </tr>
      <tr>
        <td id="file--L1575" class="blob-num js-line-number" data-line-number="1575"></td>
        <td id="file--LC1575" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1576" class="blob-num js-line-number" data-line-number="1576"></td>
        <td id="file--LC1576" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1577" class="blob-num js-line-number" data-line-number="1577"></td>
        <td id="file--LC1577" class="blob-code blob-code-inner js-file-line">■ 자카드 유사 (카카오 블라인드 테스트) Union 합집합, Intersection 교집합 구하기</td>
      </tr>
      <tr>
        <td id="file--L1578" class="blob-num js-line-number" data-line-number="1578"></td>
        <td id="file--LC1578" class="blob-code blob-code-inner js-file-line">문자열 두개 일때 AB -&gt; 숫자로 표현해서 카운트 시켜 구하는 방법 알파벳은 26개 A-&gt; 0 Z -&gt;25 0~675로 표현 가능 총 개수는 676</td>
      </tr>
      <tr>
        <td id="file--L1579" class="blob-num js-line-number" data-line-number="1579"></td>
        <td id="file--LC1579" class="blob-code blob-code-inner js-file-line">int cal(string s) {</td>
      </tr>
      <tr>
        <td id="file--L1580" class="blob-num js-line-number" data-line-number="1580"></td>
        <td id="file--LC1580" class="blob-code blob-code-inner js-file-line">    return 26 * (s[0] - &#39;A&#39;) + s[1] - &#39;A&#39;;</td>
      </tr>
      <tr>
        <td id="file--L1581" class="blob-num js-line-number" data-line-number="1581"></td>
        <td id="file--LC1581" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1582" class="blob-num js-line-number" data-line-number="1582"></td>
        <td id="file--LC1582" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1583" class="blob-num js-line-number" data-line-number="1583"></td>
        <td id="file--LC1583" class="blob-code blob-code-inner js-file-line">    int count1[676] = { 0, };</td>
      </tr>
      <tr>
        <td id="file--L1584" class="blob-num js-line-number" data-line-number="1584"></td>
        <td id="file--LC1584" class="blob-code blob-code-inner js-file-line">    int count2[676] = { 0, };</td>
      </tr>
      <tr>
        <td id="file--L1585" class="blob-num js-line-number" data-line-number="1585"></td>
        <td id="file--LC1585" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; s1.size(); i++) {</td>
      </tr>
      <tr>
        <td id="file--L1586" class="blob-num js-line-number" data-line-number="1586"></td>
        <td id="file--LC1586" class="blob-code blob-code-inner js-file-line">        count1[cal(s1[i])]++;</td>
      </tr>
      <tr>
        <td id="file--L1587" class="blob-num js-line-number" data-line-number="1587"></td>
        <td id="file--LC1587" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1588" class="blob-num js-line-number" data-line-number="1588"></td>
        <td id="file--LC1588" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; s2.size(); i++) {</td>
      </tr>
      <tr>
        <td id="file--L1589" class="blob-num js-line-number" data-line-number="1589"></td>
        <td id="file--LC1589" class="blob-code blob-code-inner js-file-line">        count2[cal(s2[i])]++;</td>
      </tr>
      <tr>
        <td id="file--L1590" class="blob-num js-line-number" data-line-number="1590"></td>
        <td id="file--LC1590" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1591" class="blob-num js-line-number" data-line-number="1591"></td>
        <td id="file--LC1591" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1592" class="blob-num js-line-number" data-line-number="1592"></td>
        <td id="file--LC1592" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1593" class="blob-num js-line-number" data-line-number="1593"></td>
        <td id="file--LC1593" class="blob-code blob-code-inner js-file-line">  int Union = 0, intersection = 0;</td>
      </tr>
      <tr>
        <td id="file--L1594" class="blob-num js-line-number" data-line-number="1594"></td>
        <td id="file--LC1594" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; 676; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1595" class="blob-num js-line-number" data-line-number="1595"></td>
        <td id="file--LC1595" class="blob-code blob-code-inner js-file-line">        if (count1[i] &gt; 0 || count2[i] &gt; 0) { //합집합</td>
      </tr>
      <tr>
        <td id="file--L1596" class="blob-num js-line-number" data-line-number="1596"></td>
        <td id="file--LC1596" class="blob-code blob-code-inner js-file-line">            Union += max(count1[i], count2[i]);</td>
      </tr>
      <tr>
        <td id="file--L1597" class="blob-num js-line-number" data-line-number="1597"></td>
        <td id="file--LC1597" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1598" class="blob-num js-line-number" data-line-number="1598"></td>
        <td id="file--LC1598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1599" class="blob-num js-line-number" data-line-number="1599"></td>
        <td id="file--LC1599" class="blob-code blob-code-inner js-file-line">        if (count1[i] &gt; 0 &amp;&amp; count2[i] &gt; 0) { //교집합</td>
      </tr>
      <tr>
        <td id="file--L1600" class="blob-num js-line-number" data-line-number="1600"></td>
        <td id="file--LC1600" class="blob-code blob-code-inner js-file-line">            intersection += min(count1[i], count2[i]);</td>
      </tr>
      <tr>
        <td id="file--L1601" class="blob-num js-line-number" data-line-number="1601"></td>
        <td id="file--LC1601" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1602" class="blob-num js-line-number" data-line-number="1602"></td>
        <td id="file--LC1602" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1603" class="blob-num js-line-number" data-line-number="1603"></td>
        <td id="file--LC1603" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1604" class="blob-num js-line-number" data-line-number="1604"></td>
        <td id="file--LC1604" class="blob-code blob-code-inner js-file-line">같은 문자열의 최대를 더하면 합집합, 최소를 더하면 교집합</td>
      </tr>
      <tr>
        <td id="file--L1605" class="blob-num js-line-number" data-line-number="1605"></td>
        <td id="file--LC1605" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1606" class="blob-num js-line-number" data-line-number="1606"></td>
        <td id="file--LC1606" class="blob-code blob-code-inner js-file-line">■ Trie 알고리즘 (자료구조) 트리기반의 자료구조 자동완성 시 유용</td>
      </tr>
      <tr>
        <td id="file--L1607" class="blob-num js-line-number" data-line-number="1607"></td>
        <td id="file--LC1607" class="blob-code blob-code-inner js-file-line">사용 용도 : 여러 개의 문자열 (ex. 문서파일) 에서 많은 양의 텍스트정보를 빠르고 효율적으로 검색하기 위해 사용.</td>
      </tr>
      <tr>
        <td id="file--L1608" class="blob-num js-line-number" data-line-number="1608"></td>
        <td id="file--LC1608" class="blob-code blob-code-inner js-file-line">retrieval 에 유용하다고 하여 Fredkin이 Trie 라고 명명함.</td>
      </tr>
      <tr>
        <td id="file--L1609" class="blob-num js-line-number" data-line-number="1609"></td>
        <td id="file--LC1609" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1610" class="blob-num js-line-number" data-line-number="1610"></td>
        <td id="file--LC1610" class="blob-code blob-code-inner js-file-line">문자열에서 이진검색트리를 사용한다면 문자열의 최대 길이가 M이라면 O(MlogN)의 시간 복잡도</td>
      </tr>
      <tr>
        <td id="file--L1611" class="blob-num js-line-number" data-line-number="1611"></td>
        <td id="file--LC1611" class="blob-code blob-code-inner js-file-line">문자열에서의 검색을 개선하기 위하여 트라이를 이용하여 O(M)의 시간만에 원하는 문자열을 검색가능</td>
      </tr>
      <tr>
        <td id="file--L1612" class="blob-num js-line-number" data-line-number="1612"></td>
        <td id="file--LC1612" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1613" class="blob-num js-line-number" data-line-number="1613"></td>
        <td id="file--LC1613" class="blob-code blob-code-inner js-file-line">1) 자식 노드가 1개이며, 그 문자열이 $인 경우 (문자열 전체를 다 입력했을 때)</td>
      </tr>
      <tr>
        <td id="file--L1614" class="blob-num js-line-number" data-line-number="1614"></td>
        <td id="file--LC1614" class="blob-code blob-code-inner js-file-line">2) 자식 노드가 1개이며, 그 문자열이 추가된 횟수가 1인 경우(이 문자열 이후로는 오직 1번만 추가되었음을 의미)</td>
      </tr>
      <tr>
        <td id="file--L1615" class="blob-num js-line-number" data-line-number="1615"></td>
        <td id="file--LC1615" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1616" class="blob-num js-line-number" data-line-number="1616"></td>
        <td id="file--LC1616" class="blob-code blob-code-inner js-file-line">트라이 예) {&quot;AE&quot; , &quot;ATV&quot;, &quot;ATES&quot;, &quot;ATEV&quot;, &quot;DE&quot; ,&quot;DC&quot;} </td>
      </tr>
      <tr>
        <td id="file--L1617" class="blob-num js-line-number" data-line-number="1617"></td>
        <td id="file--LC1617" class="blob-code blob-code-inner js-file-line">		[ ]</td>
      </tr>
      <tr>
        <td id="file--L1618" class="blob-num js-line-number" data-line-number="1618"></td>
        <td id="file--LC1618" class="blob-code blob-code-inner js-file-line">	[A]		[D]</td>
      </tr>
      <tr>
        <td id="file--L1619" class="blob-num js-line-number" data-line-number="1619"></td>
        <td id="file--LC1619" class="blob-code blob-code-inner js-file-line">  [AE]      [AT]    [DE]      [DC]	</td>
      </tr>
      <tr>
        <td id="file--L1620" class="blob-num js-line-number" data-line-number="1620"></td>
        <td id="file--LC1620" class="blob-code blob-code-inner js-file-line">        [ATE]  [ATV]</td>
      </tr>
      <tr>
        <td id="file--L1621" class="blob-num js-line-number" data-line-number="1621"></td>
        <td id="file--LC1621" class="blob-code blob-code-inner js-file-line">    [ATES][ATEV]</td>
      </tr>
      <tr>
        <td id="file--L1622" class="blob-num js-line-number" data-line-number="1622"></td>
        <td id="file--LC1622" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1623" class="blob-num js-line-number" data-line-number="1623"></td>
        <td id="file--LC1623" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1624" class="blob-num js-line-number" data-line-number="1624"></td>
        <td id="file--LC1624" class="blob-code blob-code-inner js-file-line">[구현방법1]</td>
      </tr>
      <tr>
        <td id="file--L1625" class="blob-num js-line-number" data-line-number="1625"></td>
        <td id="file--LC1625" class="blob-code blob-code-inner js-file-line">struct Trie {</td>
      </tr>
      <tr>
        <td id="file--L1626" class="blob-num js-line-number" data-line-number="1626"></td>
        <td id="file--LC1626" class="blob-code blob-code-inner js-file-line">    bool finish;    //끝나는 지점을 표시해줌</td>
      </tr>
      <tr>
        <td id="file--L1627" class="blob-num js-line-number" data-line-number="1627"></td>
        <td id="file--LC1627" class="blob-code blob-code-inner js-file-line">    Trie* next[26];    //26가지 알파벳에 대한 트라이</td>
      </tr>
      <tr>
        <td id="file--L1628" class="blob-num js-line-number" data-line-number="1628"></td>
        <td id="file--LC1628" class="blob-code blob-code-inner js-file-line">    Trie() : finish(false) {</td>
      </tr>
      <tr>
        <td id="file--L1629" class="blob-num js-line-number" data-line-number="1629"></td>
        <td id="file--LC1629" class="blob-code blob-code-inner js-file-line">        memset(next, 0, sizeof(next));</td>
      </tr>
      <tr>
        <td id="file--L1630" class="blob-num js-line-number" data-line-number="1630"></td>
        <td id="file--LC1630" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1631" class="blob-num js-line-number" data-line-number="1631"></td>
        <td id="file--LC1631" class="blob-code blob-code-inner js-file-line">    ~Trie() {</td>
      </tr>
      <tr>
        <td id="file--L1632" class="blob-num js-line-number" data-line-number="1632"></td>
        <td id="file--LC1632" class="blob-code blob-code-inner js-file-line">        for (int i = 0; i &lt; 26; i++)</td>
      </tr>
      <tr>
        <td id="file--L1633" class="blob-num js-line-number" data-line-number="1633"></td>
        <td id="file--LC1633" class="blob-code blob-code-inner js-file-line">            if (next[i])</td>
      </tr>
      <tr>
        <td id="file--L1634" class="blob-num js-line-number" data-line-number="1634"></td>
        <td id="file--LC1634" class="blob-code blob-code-inner js-file-line">                delete next[i];</td>
      </tr>
      <tr>
        <td id="file--L1635" class="blob-num js-line-number" data-line-number="1635"></td>
        <td id="file--LC1635" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1636" class="blob-num js-line-number" data-line-number="1636"></td>
        <td id="file--LC1636" class="blob-code blob-code-inner js-file-line">    void insert(const char* key) {</td>
      </tr>
      <tr>
        <td id="file--L1637" class="blob-num js-line-number" data-line-number="1637"></td>
        <td id="file--LC1637" class="blob-code blob-code-inner js-file-line">        if (*key == &#39;\0&#39;)</td>
      </tr>
      <tr>
        <td id="file--L1638" class="blob-num js-line-number" data-line-number="1638"></td>
        <td id="file--LC1638" class="blob-code blob-code-inner js-file-line">            finish = true;    //문자열이 끝나는 지점일 경우 표시</td>
      </tr>
      <tr>
        <td id="file--L1639" class="blob-num js-line-number" data-line-number="1639"></td>
        <td id="file--LC1639" class="blob-code blob-code-inner js-file-line">        else {</td>
      </tr>
      <tr>
        <td id="file--L1640" class="blob-num js-line-number" data-line-number="1640"></td>
        <td id="file--LC1640" class="blob-code blob-code-inner js-file-line">            int curr = *key - &#39;A&#39;;</td>
      </tr>
      <tr>
        <td id="file--L1641" class="blob-num js-line-number" data-line-number="1641"></td>
        <td id="file--LC1641" class="blob-code blob-code-inner js-file-line">            if (next[curr] == NULL)</td>
      </tr>
      <tr>
        <td id="file--L1642" class="blob-num js-line-number" data-line-number="1642"></td>
        <td id="file--LC1642" class="blob-code blob-code-inner js-file-line">                next[curr] = new Trie();    //탐색이 처음되는 지점일 경우 동적할당</td>
      </tr>
      <tr>
        <td id="file--L1643" class="blob-num js-line-number" data-line-number="1643"></td>
        <td id="file--LC1643" class="blob-code blob-code-inner js-file-line">            next[curr]-&gt;insert(key + 1);    //다음 문자 삽입</td>
      </tr>
      <tr>
        <td id="file--L1644" class="blob-num js-line-number" data-line-number="1644"></td>
        <td id="file--LC1644" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1645" class="blob-num js-line-number" data-line-number="1645"></td>
        <td id="file--LC1645" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1646" class="blob-num js-line-number" data-line-number="1646"></td>
        <td id="file--LC1646" class="blob-code blob-code-inner js-file-line">    Trie* find(const char* key) {</td>
      </tr>
      <tr>
        <td id="file--L1647" class="blob-num js-line-number" data-line-number="1647"></td>
        <td id="file--LC1647" class="blob-code blob-code-inner js-file-line">        if (*key == &#39;\0&#39;)return this;//문자열이 끝나는 위치를 반환</td>
      </tr>
      <tr>
        <td id="file--L1648" class="blob-num js-line-number" data-line-number="1648"></td>
        <td id="file--LC1648" class="blob-code blob-code-inner js-file-line">        int curr = *key - &#39;A&#39;;</td>
      </tr>
      <tr>
        <td id="file--L1649" class="blob-num js-line-number" data-line-number="1649"></td>
        <td id="file--LC1649" class="blob-code blob-code-inner js-file-line">        if (next[curr] == NULL)return NULL;//찾는 값이 존재하지 않음</td>
      </tr>
      <tr>
        <td id="file--L1650" class="blob-num js-line-number" data-line-number="1650"></td>
        <td id="file--LC1650" class="blob-code blob-code-inner js-file-line">        return next[curr]-&gt;find(key + 1); //다음 문자를 탐색</td>
      </tr>
      <tr>
        <td id="file--L1651" class="blob-num js-line-number" data-line-number="1651"></td>
        <td id="file--LC1651" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1652" class="blob-num js-line-number" data-line-number="1652"></td>
        <td id="file--LC1652" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="file--L1653" class="blob-num js-line-number" data-line-number="1653"></td>
        <td id="file--LC1653" class="blob-code blob-code-inner js-file-line">출처: http://jason9319.tistory.com/129?category=670441 [ACM-ICPC 상 탈 사람]</td>
      </tr>
      <tr>
        <td id="file--L1654" class="blob-num js-line-number" data-line-number="1654"></td>
        <td id="file--LC1654" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1655" class="blob-num js-line-number" data-line-number="1655"></td>
        <td id="file--LC1655" class="blob-code blob-code-inner js-file-line">[구현방법2]    </td>
      </tr>
      <tr>
        <td id="file--L1656" class="blob-num js-line-number" data-line-number="1656"></td>
        <td id="file--LC1656" class="blob-code blob-code-inner js-file-line">class Trie</td>
      </tr>
      <tr>
        <td id="file--L1657" class="blob-num js-line-number" data-line-number="1657"></td>
        <td id="file--LC1657" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L1658" class="blob-num js-line-number" data-line-number="1658"></td>
        <td id="file--LC1658" class="blob-code blob-code-inner js-file-line">public:</td>
      </tr>
      <tr>
        <td id="file--L1659" class="blob-num js-line-number" data-line-number="1659"></td>
        <td id="file--LC1659" class="blob-code blob-code-inner js-file-line">    set&lt;char&gt; words;</td>
      </tr>
      <tr>
        <td id="file--L1660" class="blob-num js-line-number" data-line-number="1660"></td>
        <td id="file--LC1660" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; cnt;</td>
      </tr>
      <tr>
        <td id="file--L1661" class="blob-num js-line-number" data-line-number="1661"></td>
        <td id="file--LC1661" class="blob-code blob-code-inner js-file-line">    Trie() { cnt.resize(26); }</td>
      </tr>
      <tr>
        <td id="file--L1662" class="blob-num js-line-number" data-line-number="1662"></td>
        <td id="file--LC1662" class="blob-code blob-code-inner js-file-line">};</td>
      </tr>
      <tr>
        <td id="file--L1663" class="blob-num js-line-number" data-line-number="1663"></td>
        <td id="file--LC1663" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1664" class="blob-num js-line-number" data-line-number="1664"></td>
        <td id="file--LC1664" class="blob-code blob-code-inner js-file-line">long long solve(vector&lt;string&gt; words)</td>
      </tr>
      <tr>
        <td id="file--L1665" class="blob-num js-line-number" data-line-number="1665"></td>
        <td id="file--LC1665" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L1666" class="blob-num js-line-number" data-line-number="1666"></td>
        <td id="file--LC1666" class="blob-code blob-code-inner js-file-line">    map&lt;int, map&lt;char, Trie&gt; &gt; trie;</td>
      </tr>
      <tr>
        <td id="file--L1667" class="blob-num js-line-number" data-line-number="1667"></td>
        <td id="file--LC1667" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1668" class="blob-num js-line-number" data-line-number="1668"></td>
        <td id="file--LC1668" class="blob-code blob-code-inner js-file-line">    for (auto word : words)</td>
      </tr>
      <tr>
        <td id="file--L1669" class="blob-num js-line-number" data-line-number="1669"></td>
        <td id="file--LC1669" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1670" class="blob-num js-line-number" data-line-number="1670"></td>
        <td id="file--LC1670" class="blob-code blob-code-inner js-file-line">        word += &#39;$&#39;;</td>
      </tr>
      <tr>
        <td id="file--L1671" class="blob-num js-line-number" data-line-number="1671"></td>
        <td id="file--LC1671" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1672" class="blob-num js-line-number" data-line-number="1672"></td>
        <td id="file--LC1672" class="blob-code blob-code-inner js-file-line">        int st = 0;</td>
      </tr>
      <tr>
        <td id="file--L1673" class="blob-num js-line-number" data-line-number="1673"></td>
        <td id="file--LC1673" class="blob-code blob-code-inner js-file-line">	</td>
      </tr>
      <tr>
        <td id="file--L1674" class="blob-num js-line-number" data-line-number="1674"></td>
        <td id="file--LC1674" class="blob-code blob-code-inner js-file-line">        for (int i=0; i&lt;word.length() -1; i++)</td>
      </tr>
      <tr>
        <td id="file--L1675" class="blob-num js-line-number" data-line-number="1675"></td>
        <td id="file--LC1675" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L1676" class="blob-num js-line-number" data-line-number="1676"></td>
        <td id="file--LC1676" class="blob-code blob-code-inner js-file-line">            trie[st][word[i]].words.insert(word[i + 1]);</td>
      </tr>
      <tr>
        <td id="file--L1677" class="blob-num js-line-number" data-line-number="1677"></td>
        <td id="file--LC1677" class="blob-code blob-code-inner js-file-line">            if (word[i + 1] == &#39;$&#39;) break;</td>
      </tr>
      <tr>
        <td id="file--L1678" class="blob-num js-line-number" data-line-number="1678"></td>
        <td id="file--LC1678" class="blob-code blob-code-inner js-file-line">            trie[st][word[i]].cnt[word[i + 1] - &#39;a&#39;]++;</td>
      </tr>
      <tr>
        <td id="file--L1679" class="blob-num js-line-number" data-line-number="1679"></td>
        <td id="file--LC1679" class="blob-code blob-code-inner js-file-line">            st++;</td>
      </tr>
      <tr>
        <td id="file--L1680" class="blob-num js-line-number" data-line-number="1680"></td>
        <td id="file--LC1680" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1681" class="blob-num js-line-number" data-line-number="1681"></td>
        <td id="file--LC1681" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1682" class="blob-num js-line-number" data-line-number="1682"></td>
        <td id="file--LC1682" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1683" class="blob-num js-line-number" data-line-number="1683"></td>
        <td id="file--LC1683" class="blob-code blob-code-inner js-file-line">    long long ans = 0;</td>
      </tr>
      <tr>
        <td id="file--L1684" class="blob-num js-line-number" data-line-number="1684"></td>
        <td id="file--LC1684" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1685" class="blob-num js-line-number" data-line-number="1685"></td>
        <td id="file--LC1685" class="blob-code blob-code-inner js-file-line">    for (auto word : words)</td>
      </tr>
      <tr>
        <td id="file--L1686" class="blob-num js-line-number" data-line-number="1686"></td>
        <td id="file--LC1686" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L1687" class="blob-num js-line-number" data-line-number="1687"></td>
        <td id="file--LC1687" class="blob-code blob-code-inner js-file-line">        long long sum = 0;</td>
      </tr>
      <tr>
        <td id="file--L1688" class="blob-num js-line-number" data-line-number="1688"></td>
        <td id="file--LC1688" class="blob-code blob-code-inner js-file-line">        int st = 0;</td>
      </tr>
      <tr>
        <td id="file--L1689" class="blob-num js-line-number" data-line-number="1689"></td>
        <td id="file--LC1689" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1690" class="blob-num js-line-number" data-line-number="1690"></td>
        <td id="file--LC1690" class="blob-code blob-code-inner js-file-line">        for (int i = 0; i &lt; word.length(); i++)</td>
      </tr>
      <tr>
        <td id="file--L1691" class="blob-num js-line-number" data-line-number="1691"></td>
        <td id="file--LC1691" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L1692" class="blob-num js-line-number" data-line-number="1692"></td>
        <td id="file--LC1692" class="blob-code blob-code-inner js-file-line">            sum++;</td>
      </tr>
      <tr>
        <td id="file--L1693" class="blob-num js-line-number" data-line-number="1693"></td>
        <td id="file--LC1693" class="blob-code blob-code-inner js-file-line">            if (trie[st][word[i]].words.size() == 1)</td>
      </tr>
      <tr>
        <td id="file--L1694" class="blob-num js-line-number" data-line-number="1694"></td>
        <td id="file--LC1694" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="file--L1695" class="blob-num js-line-number" data-line-number="1695"></td>
        <td id="file--LC1695" class="blob-code blob-code-inner js-file-line">                char spell = *trie[st][word[i]].words.begin();</td>
      </tr>
      <tr>
        <td id="file--L1696" class="blob-num js-line-number" data-line-number="1696"></td>
        <td id="file--LC1696" class="blob-code blob-code-inner js-file-line">                if (spell==&#39;$&#39; || trie[st][word[i]].cnt[spell - &#39;a&#39;] == 1) break;</td>
      </tr>
      <tr>
        <td id="file--L1697" class="blob-num js-line-number" data-line-number="1697"></td>
        <td id="file--LC1697" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1698" class="blob-num js-line-number" data-line-number="1698"></td>
        <td id="file--LC1698" class="blob-code blob-code-inner js-file-line">            st++;</td>
      </tr>
      <tr>
        <td id="file--L1699" class="blob-num js-line-number" data-line-number="1699"></td>
        <td id="file--LC1699" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1700" class="blob-num js-line-number" data-line-number="1700"></td>
        <td id="file--LC1700" class="blob-code blob-code-inner js-file-line">        ans += sum;</td>
      </tr>
      <tr>
        <td id="file--L1701" class="blob-num js-line-number" data-line-number="1701"></td>
        <td id="file--LC1701" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1702" class="blob-num js-line-number" data-line-number="1702"></td>
        <td id="file--LC1702" class="blob-code blob-code-inner js-file-line">    return ans;</td>
      </tr>
      <tr>
        <td id="file--L1703" class="blob-num js-line-number" data-line-number="1703"></td>
        <td id="file--LC1703" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1704" class="blob-num js-line-number" data-line-number="1704"></td>
        <td id="file--LC1704" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1705" class="blob-num js-line-number" data-line-number="1705"></td>
        <td id="file--LC1705" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1706" class="blob-num js-line-number" data-line-number="1706"></td>
        <td id="file--LC1706" class="blob-code blob-code-inner js-file-line">■ 문자열 정렬 문제 - 파일명 정렬 (카카오 블라인드 테스트)</td>
      </tr>
      <tr>
        <td id="file--L1707" class="blob-num js-line-number" data-line-number="1707"></td>
        <td id="file--LC1707" class="blob-code blob-code-inner js-file-line">여기서 느꼈던 것은 정렬의 종류를 알아야한다는 점</td>
      </tr>
      <tr>
        <td id="file--L1708" class="blob-num js-line-number" data-line-number="1708"></td>
        <td id="file--LC1708" class="blob-code blob-code-inner js-file-line">안정정렬과 불안정정렬이 있고</td>
      </tr>
      <tr>
        <td id="file--L1709" class="blob-num js-line-number" data-line-number="1709"></td>
        <td id="file--LC1709" class="blob-code blob-code-inner js-file-line">기본적인 퀵정렬은 불안정정렬이라는 점.</td>
      </tr>
      <tr>
        <td id="file--L1710" class="blob-num js-line-number" data-line-number="1710"></td>
        <td id="file--LC1710" class="blob-code blob-code-inner js-file-line">stable_sort()같은 함수를 써서 비교하는데 대부분 정렬을 위한 조건 함수가 있어 그부분을 사용해서 구현하면 쉬운 문제였다.</td>
      </tr>
      <tr>
        <td id="file--L1711" class="blob-num js-line-number" data-line-number="1711"></td>
        <td id="file--LC1711" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1712" class="blob-num js-line-number" data-line-number="1712"></td>
        <td id="file--LC1712" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1713" class="blob-num js-line-number" data-line-number="1713"></td>
        <td id="file--LC1713" class="blob-code blob-code-inner js-file-line">■ 문자열 판단 문제 - 방금그곡 (카카오 블라인드 테스트)</td>
      </tr>
      <tr>
        <td id="file--L1714" class="blob-num js-line-number" data-line-number="1714"></td>
        <td id="file--LC1714" class="blob-code blob-code-inner js-file-line">여기서 느꼈던 것은 치환을 사용하자</td>
      </tr>
      <tr>
        <td id="file--L1715" class="blob-num js-line-number" data-line-number="1715"></td>
        <td id="file--LC1715" class="blob-code blob-code-inner js-file-line">C와 C#을 구분하기 위해 &#39;#을 해서~&#39; 이거보다 치환하는 생각을 하자 C와 c를 구분하기만하면됨</td>
      </tr>
      <tr>
        <td id="file--L1716" class="blob-num js-line-number" data-line-number="1716"></td>
        <td id="file--LC1716" class="blob-code blob-code-inner js-file-line">C# -&gt; c </td>
      </tr>
      <tr>
        <td id="file--L1717" class="blob-num js-line-number" data-line-number="1717"></td>
        <td id="file--LC1717" class="blob-code blob-code-inner js-file-line">+ 문제를 잘 읽어야한다. </td>
      </tr>
      <tr>
        <td id="file--L1718" class="blob-num js-line-number" data-line-number="1718"></td>
        <td id="file--LC1718" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1719" class="blob-num js-line-number" data-line-number="1719"></td>
        <td id="file--LC1719" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1720" class="blob-num js-line-number" data-line-number="1720"></td>
        <td id="file--LC1720" class="blob-code blob-code-inner js-file-line">■ 목적지 문제 재귀로 했다가 시간초과 남/ 사이즈 m이나 n 500단위 넘으면 n=100까지는 할만하다. 그냥 배열로 경우의 수 dp 처리하는게 좋은 듯</td>
      </tr>
      <tr>
        <td id="file--L1721" class="blob-num js-line-number" data-line-number="1721"></td>
        <td id="file--LC1721" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L1722" class="blob-num js-line-number" data-line-number="1722"></td>
        <td id="file--LC1722" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L1723" class="blob-num js-line-number" data-line-number="1723"></td>
        <td id="file--LC1723" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1724" class="blob-num js-line-number" data-line-number="1724"></td>
        <td id="file--LC1724" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1725" class="blob-num js-line-number" data-line-number="1725"></td>
        <td id="file--LC1725" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1726" class="blob-num js-line-number" data-line-number="1726"></td>
        <td id="file--LC1726" class="blob-code blob-code-inner js-file-line">int MOD = 20170805;</td>
      </tr>
      <tr>
        <td id="file--L1727" class="blob-num js-line-number" data-line-number="1727"></td>
        <td id="file--LC1727" class="blob-code blob-code-inner js-file-line">unsigned int answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L1728" class="blob-num js-line-number" data-line-number="1728"></td>
        <td id="file--LC1728" class="blob-code blob-code-inner js-file-line">vector&lt;vector&lt;int&gt;&gt; cm;</td>
      </tr>
      <tr>
        <td id="file--L1729" class="blob-num js-line-number" data-line-number="1729"></td>
        <td id="file--LC1729" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1730" class="blob-num js-line-number" data-line-number="1730"></td>
        <td id="file--LC1730" class="blob-code blob-code-inner js-file-line">void goDrive(int h, int w) {</td>
      </tr>
      <tr>
        <td id="file--L1731" class="blob-num js-line-number" data-line-number="1731"></td>
        <td id="file--LC1731" class="blob-code blob-code-inner js-file-line">    bool canRD[2];</td>
      </tr>
      <tr>
        <td id="file--L1732" class="blob-num js-line-number" data-line-number="1732"></td>
        <td id="file--LC1732" class="blob-code blob-code-inner js-file-line">    int distance;</td>
      </tr>
      <tr>
        <td id="file--L1733" class="blob-num js-line-number" data-line-number="1733"></td>
        <td id="file--LC1733" class="blob-code blob-code-inner js-file-line">    int cnt;</td>
      </tr>
      <tr>
        <td id="file--L1734" class="blob-num js-line-number" data-line-number="1734"></td>
        <td id="file--LC1734" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1735" class="blob-num js-line-number" data-line-number="1735"></td>
        <td id="file--LC1735" class="blob-code blob-code-inner js-file-line">    canRD[0]=true; canRD[1]=true;</td>
      </tr>
      <tr>
        <td id="file--L1736" class="blob-num js-line-number" data-line-number="1736"></td>
        <td id="file--LC1736" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1737" class="blob-num js-line-number" data-line-number="1737"></td>
        <td id="file--LC1737" class="blob-code blob-code-inner js-file-line">    if(h==cm.size()-1) canRD[1]= false;</td>
      </tr>
      <tr>
        <td id="file--L1738" class="blob-num js-line-number" data-line-number="1738"></td>
        <td id="file--LC1738" class="blob-code blob-code-inner js-file-line">    if(w==cm[0].size()-1) canRD[0]= false;</td>
      </tr>
      <tr>
        <td id="file--L1739" class="blob-num js-line-number" data-line-number="1739"></td>
        <td id="file--LC1739" class="blob-code blob-code-inner js-file-line">    if(!canRD[0]&amp;&amp;!canRD[1]) { answer++; return; }</td>
      </tr>
      <tr>
        <td id="file--L1740" class="blob-num js-line-number" data-line-number="1740"></td>
        <td id="file--LC1740" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1741" class="blob-num js-line-number" data-line-number="1741"></td>
        <td id="file--LC1741" class="blob-code blob-code-inner js-file-line">    //go right</td>
      </tr>
      <tr>
        <td id="file--L1742" class="blob-num js-line-number" data-line-number="1742"></td>
        <td id="file--LC1742" class="blob-code blob-code-inner js-file-line">    if(canRD[0]) {</td>
      </tr>
      <tr>
        <td id="file--L1743" class="blob-num js-line-number" data-line-number="1743"></td>
        <td id="file--LC1743" class="blob-code blob-code-inner js-file-line">        distance=cm[0].size()-1 -w;</td>
      </tr>
      <tr>
        <td id="file--L1744" class="blob-num js-line-number" data-line-number="1744"></td>
        <td id="file--LC1744" class="blob-code blob-code-inner js-file-line">        cnt=0;</td>
      </tr>
      <tr>
        <td id="file--L1745" class="blob-num js-line-number" data-line-number="1745"></td>
        <td id="file--LC1745" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L1746" class="blob-num js-line-number" data-line-number="1746"></td>
        <td id="file--LC1746" class="blob-code blob-code-inner js-file-line">        for(int i=1; i&lt;=distance; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1747" class="blob-num js-line-number" data-line-number="1747"></td>
        <td id="file--LC1747" class="blob-code blob-code-inner js-file-line">            if(cm[h][w+i]==2) cnt++;</td>
      </tr>
      <tr>
        <td id="file--L1748" class="blob-num js-line-number" data-line-number="1748"></td>
        <td id="file--LC1748" class="blob-code blob-code-inner js-file-line">            else break;</td>
      </tr>
      <tr>
        <td id="file--L1749" class="blob-num js-line-number" data-line-number="1749"></td>
        <td id="file--LC1749" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1750" class="blob-num js-line-number" data-line-number="1750"></td>
        <td id="file--LC1750" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L1751" class="blob-num js-line-number" data-line-number="1751"></td>
        <td id="file--LC1751" class="blob-code blob-code-inner js-file-line">        if(cm[h][w+1]==0) goDrive(h, w+1);</td>
      </tr>
      <tr>
        <td id="file--L1752" class="blob-num js-line-number" data-line-number="1752"></td>
        <td id="file--LC1752" class="blob-code blob-code-inner js-file-line">        else if(cnt!=0&amp;&amp;distance!=cnt&amp;&amp;cm[h][w+cnt+1]!=1) goDrive(h, w+cnt+1);</td>
      </tr>
      <tr>
        <td id="file--L1753" class="blob-num js-line-number" data-line-number="1753"></td>
        <td id="file--LC1753" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1754" class="blob-num js-line-number" data-line-number="1754"></td>
        <td id="file--LC1754" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1755" class="blob-num js-line-number" data-line-number="1755"></td>
        <td id="file--LC1755" class="blob-code blob-code-inner js-file-line">    //go down</td>
      </tr>
      <tr>
        <td id="file--L1756" class="blob-num js-line-number" data-line-number="1756"></td>
        <td id="file--LC1756" class="blob-code blob-code-inner js-file-line">    if(canRD[1]) {</td>
      </tr>
      <tr>
        <td id="file--L1757" class="blob-num js-line-number" data-line-number="1757"></td>
        <td id="file--LC1757" class="blob-code blob-code-inner js-file-line">        distance = cm.size()-1 -h;</td>
      </tr>
      <tr>
        <td id="file--L1758" class="blob-num js-line-number" data-line-number="1758"></td>
        <td id="file--LC1758" class="blob-code blob-code-inner js-file-line">        cnt=0;</td>
      </tr>
      <tr>
        <td id="file--L1759" class="blob-num js-line-number" data-line-number="1759"></td>
        <td id="file--LC1759" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L1760" class="blob-num js-line-number" data-line-number="1760"></td>
        <td id="file--LC1760" class="blob-code blob-code-inner js-file-line">        for(int i=1; i&lt;=distance; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1761" class="blob-num js-line-number" data-line-number="1761"></td>
        <td id="file--LC1761" class="blob-code blob-code-inner js-file-line">            if(cm[h+i][w]==2) cnt++;</td>
      </tr>
      <tr>
        <td id="file--L1762" class="blob-num js-line-number" data-line-number="1762"></td>
        <td id="file--LC1762" class="blob-code blob-code-inner js-file-line">            else break;</td>
      </tr>
      <tr>
        <td id="file--L1763" class="blob-num js-line-number" data-line-number="1763"></td>
        <td id="file--LC1763" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1764" class="blob-num js-line-number" data-line-number="1764"></td>
        <td id="file--LC1764" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L1765" class="blob-num js-line-number" data-line-number="1765"></td>
        <td id="file--LC1765" class="blob-code blob-code-inner js-file-line">        if(cm[h+1][w]==0) goDrive(h+1, w);</td>
      </tr>
      <tr>
        <td id="file--L1766" class="blob-num js-line-number" data-line-number="1766"></td>
        <td id="file--LC1766" class="blob-code blob-code-inner js-file-line">        else if(cnt!=0&amp;&amp;distance!=cnt&amp;&amp;cm[h+cnt+1][w]!=1) goDrive(h+cnt+1, w);</td>
      </tr>
      <tr>
        <td id="file--L1767" class="blob-num js-line-number" data-line-number="1767"></td>
        <td id="file--LC1767" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1768" class="blob-num js-line-number" data-line-number="1768"></td>
        <td id="file--LC1768" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1769" class="blob-num js-line-number" data-line-number="1769"></td>
        <td id="file--LC1769" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1770" class="blob-num js-line-number" data-line-number="1770"></td>
        <td id="file--LC1770" class="blob-code blob-code-inner js-file-line">int solution(int m, int n, vector&lt;vector&lt;int&gt;&gt; city_map) {</td>
      </tr>
      <tr>
        <td id="file--L1771" class="blob-num js-line-number" data-line-number="1771"></td>
        <td id="file--LC1771" class="blob-code blob-code-inner js-file-line">    answer = 0;</td>
      </tr>
      <tr>
        <td id="file--L1772" class="blob-num js-line-number" data-line-number="1772"></td>
        <td id="file--LC1772" class="blob-code blob-code-inner js-file-line">    MOD = 20170805;</td>
      </tr>
      <tr>
        <td id="file--L1773" class="blob-num js-line-number" data-line-number="1773"></td>
        <td id="file--LC1773" class="blob-code blob-code-inner js-file-line">    cm = city_map;</td>
      </tr>
      <tr>
        <td id="file--L1774" class="blob-num js-line-number" data-line-number="1774"></td>
        <td id="file--LC1774" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1775" class="blob-num js-line-number" data-line-number="1775"></td>
        <td id="file--LC1775" class="blob-code blob-code-inner js-file-line">    goDrive(0,0);</td>
      </tr>
      <tr>
        <td id="file--L1776" class="blob-num js-line-number" data-line-number="1776"></td>
        <td id="file--LC1776" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L1777" class="blob-num js-line-number" data-line-number="1777"></td>
        <td id="file--LC1777" class="blob-code blob-code-inner js-file-line">    return answer = answer%MOD;</td>
      </tr>
      <tr>
        <td id="file--L1778" class="blob-num js-line-number" data-line-number="1778"></td>
        <td id="file--LC1778" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1779" class="blob-num js-line-number" data-line-number="1779"></td>
        <td id="file--LC1779" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1780" class="blob-num js-line-number" data-line-number="1780"></td>
        <td id="file--LC1780" class="blob-code blob-code-inner js-file-line">■ 카카오 코드 캠핑 사각형 만들기 (내부에 점 있으면 안되는) 개수</td>
      </tr>
      <tr>
        <td id="file--L1781" class="blob-num js-line-number" data-line-number="1781"></td>
        <td id="file--LC1781" class="blob-code blob-code-inner js-file-line">x,y 중복된 값 제거 후 c++에선 unorder_set이라는 게 있다.</td>
      </tr>
      <tr>
        <td id="file--L1782" class="blob-num js-line-number" data-line-number="1782"></td>
        <td id="file--LC1782" class="blob-code blob-code-inner js-file-line">넓이가 상관없기 때문에 인덱스 압축을 시킨다. 그 후 dp로 내부 사각형안에 점 개수를 먼저 구하고, 압축한 사각형에서 </td>
      </tr>
      <tr>
        <td id="file--L1783" class="blob-num js-line-number" data-line-number="1783"></td>
        <td id="file--LC1783" class="blob-code blob-code-inner js-file-line">사각형을 만들고 길이가 1인 경우 제외(정답에 추가) 그 외의 경우 dp를 참고해서 카운트가 0 내부에 없으면 정답에 추가</td>
      </tr>
      <tr>
        <td id="file--L1784" class="blob-num js-line-number" data-line-number="1784"></td>
        <td id="file--LC1784" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1785" class="blob-num js-line-number" data-line-number="1785"></td>
        <td id="file--LC1785" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1786" class="blob-num js-line-number" data-line-number="1786"></td>
        <td id="file--LC1786" class="blob-code blob-code-inner js-file-line">■ 페이지 교체 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L1787" class="blob-num js-line-number" data-line-number="1787"></td>
        <td id="file--LC1787" class="blob-code blob-code-inner js-file-line">FIFO (First In First Out) - 이건 너무 쉽다 그냥 넣은 순으로 빼면 됨 - 인덱스 변수 하나만 둬서 처리가능</td>
      </tr>
      <tr>
        <td id="file--L1788" class="blob-num js-line-number" data-line-number="1788"></td>
        <td id="file--LC1788" class="blob-code blob-code-inner js-file-line">LRU (Least Recently Used) - 카카오 2017 블라인드 기출 - 나는 -1초기화 LRU배열을 하나 만든다음, for문 index를 맨처음부터</td>
      </tr>
      <tr>
        <td id="file--L1789" class="blob-num js-line-number" data-line-number="1789"></td>
        <td id="file--LC1789" class="blob-code blob-code-inner js-file-line">비교해서 맨처음 인덱스가 0, -1보다 크니까 넣고 인덱스니까 가장 낮은 숫자를 바꿔주면 됨</td>
      </tr>
      <tr>
        <td id="file--L1790" class="blob-num js-line-number" data-line-number="1790"></td>
        <td id="file--LC1790" class="blob-code blob-code-inner js-file-line">LFU (Least Frequently Used) - 가장 적은 참조횟수를 갖는 페이지를 교체, 같으면 LRU방법대로</td>
      </tr>
      <tr>
        <td id="file--L1791" class="blob-num js-line-number" data-line-number="1791"></td>
        <td id="file--LC1791" class="blob-code blob-code-inner js-file-line">코딩을 구현한다면 LRU처럼 인덱스배열을 만들되 LFU인덱스 배열을 하나 더 만들어 다시 들어올 때 스택을 쌓고 바뀌면 그인덱스에 0으로 초기화,</td>
      </tr>
      <tr>
        <td id="file--L1792" class="blob-num js-line-number" data-line-number="1792"></td>
        <td id="file--LC1792" class="blob-code blob-code-inner js-file-line">비교 시에 LFU를 먼저 확인하고 리스트 하나 더 만들어서 for문 돌면서 가장 작으면 리스트를 초기화하고 인덱스 넣고 같으면 리스트에 추가하고 해서</td>
      </tr>
      <tr>
        <td id="file--L1793" class="blob-num js-line-number" data-line-number="1793"></td>
        <td id="file--LC1793" class="blob-code blob-code-inner js-file-line">가장 작은 집합(리스트)를 구해서 LRU 해당 인덱스 부분만 for문으로 비교 가장 작은 걸 찾아서 바꿔준다.(이 때, 원래 값, LRU, LFU 3개 바꿔줘야함)</td>
      </tr>
      <tr>
        <td id="file--L1794" class="blob-num js-line-number" data-line-number="1794"></td>
        <td id="file--LC1794" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1795" class="blob-num js-line-number" data-line-number="1795"></td>
        <td id="file--LC1795" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1796" class="blob-num js-line-number" data-line-number="1796"></td>
        <td id="file--LC1796" class="blob-code blob-code-inner js-file-line">■ Max Heap과 Min Heap</td>
      </tr>
      <tr>
        <td id="file--L1797" class="blob-num js-line-number" data-line-number="1797"></td>
        <td id="file--LC1797" class="blob-code blob-code-inner js-file-line">우선순위 큐에서 최대값이 top 가장먼저 빠지는 큐를 Max Heap</td>
      </tr>
      <tr>
        <td id="file--L1798" class="blob-num js-line-number" data-line-number="1798"></td>
        <td id="file--LC1798" class="blob-code blob-code-inner js-file-line">최솟값이 top 가장먼저 빠지는 큐를 Min Heap이라고 하며</td>
      </tr>
      <tr>
        <td id="file--L1799" class="blob-num js-line-number" data-line-number="1799"></td>
        <td id="file--LC1799" class="blob-code blob-code-inner js-file-line">최댓값 최솟값을 계속 구해야하는 경우, 은근 엄청많이 쓰일 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L1800" class="blob-num js-line-number" data-line-number="1800"></td>
        <td id="file--LC1800" class="blob-code blob-code-inner js-file-line">cpp에선 기본이 Max Heap, Min Heap 구현 시 3번째 인자에 greater&lt;T&gt;를 입력해주면된다.</td>
      </tr>
      <tr>
        <td id="file--L1801" class="blob-num js-line-number" data-line-number="1801"></td>
        <td id="file--LC1801" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1802" class="blob-num js-line-number" data-line-number="1802"></td>
        <td id="file--LC1802" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1803" class="blob-num js-line-number" data-line-number="1803"></td>
        <td id="file--LC1803" class="blob-code blob-code-inner js-file-line">■ 그리디(Greedy) 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L1804" class="blob-num js-line-number" data-line-number="1804"></td>
        <td id="file--LC1804" class="blob-code blob-code-inner js-file-line">약간 무식한(단순한) 방법이긴 하지만 특정경우에선 dp도 무거울 경우가 있다. 이때 현재의 최선을 구해서 문제를 푸는 방식이 있다.</td>
      </tr>
      <tr>
        <td id="file--L1805" class="blob-num js-line-number" data-line-number="1805"></td>
        <td id="file--LC1805" class="blob-code blob-code-inner js-file-line">부분적인 최적해가 전체적인 최적해가 되는 경우 사용한다.</td>
      </tr>
      <tr>
        <td id="file--L1806" class="blob-num js-line-number" data-line-number="1806"></td>
        <td id="file--LC1806" class="blob-code blob-code-inner js-file-line">사용하는 알고리즘으로 [프림 알고리즘]과 [다익스트라 알고리즘]이 있다.</td>
      </tr>
      <tr>
        <td id="file--L1807" class="blob-num js-line-number" data-line-number="1807"></td>
        <td id="file--LC1807" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1808" class="blob-num js-line-number" data-line-number="1808"></td>
        <td id="file--LC1808" class="blob-code blob-code-inner js-file-line">구명보트 문제도 작아서 한 번에 최대 2명씩 밖에 탈 수 없고, 무게 제한도 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L1809" class="blob-num js-line-number" data-line-number="1809"></td>
        <td id="file--LC1809" class="blob-code blob-code-inner js-file-line">오름차순으로 가장 몸무게가 큰 사람순으로 넣어보아 가장 작은 애까지 못 넣으면</td>
      </tr>
      <tr>
        <td id="file--L1810" class="blob-num js-line-number" data-line-number="1810"></td>
        <td id="file--LC1810" class="blob-code blob-code-inner js-file-line">다음 보트 이런식으로 구해야하기 때문에 그리디라 할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L1811" class="blob-num js-line-number" data-line-number="1811"></td>
        <td id="file--LC1811" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1812" class="blob-num js-line-number" data-line-number="1812"></td>
        <td id="file--LC1812" class="blob-code blob-code-inner js-file-line">저울문제도 측정 할 수 없는 가장 작은 자연수를 구하기도 가장 작은 추 부터 더해가며, </td>
      </tr>
      <tr>
        <td id="file--L1813" class="blob-num js-line-number" data-line-number="1813"></td>
        <td id="file--LC1813" class="blob-code blob-code-inner js-file-line">[더한 합+1 &lt; 다음 추] 일때 그 더한 합+1 이 답이다. 만약 저 상황이 안나오면 [총 더한 합+1] 이 답이겠죠? </td>
      </tr>
      <tr>
        <td id="file--L1814" class="blob-num js-line-number" data-line-number="1814"></td>
        <td id="file--LC1814" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1815" class="blob-num js-line-number" data-line-number="1815"></td>
        <td id="file--LC1815" class="blob-code blob-code-inner js-file-line">개념 코드</td>
      </tr>
      <tr>
        <td id="file--L1816" class="blob-num js-line-number" data-line-number="1816"></td>
        <td id="file--LC1816" class="blob-code blob-code-inner js-file-line">tempP = P                   // tempP 는 현재 남아있는 문제</td>
      </tr>
      <tr>
        <td id="file--L1817" class="blob-num js-line-number" data-line-number="1817"></td>
        <td id="file--LC1817" class="blob-code blob-code-inner js-file-line">while tempP not empty loop  // tempP가 남아있으면 반복 수행</td>
      </tr>
      <tr>
        <td id="file--L1818" class="blob-num js-line-number" data-line-number="1818"></td>
        <td id="file--LC1818" class="blob-code blob-code-inner js-file-line">    in subproblem tempP, decide greedy choice C // tempP서 greedy로 해결책 C를 선택(C는 현재 선택가능한 최적의 해)</td>
      </tr>
      <tr>
        <td id="file--L1819" class="blob-num js-line-number" data-line-number="1819"></td>
        <td id="file--LC1819" class="blob-code blob-code-inner js-file-line">    Add value of C to solution // 해결책에 C의 값을 적용</td>
      </tr>
      <tr>
        <td id="file--L1820" class="blob-num js-line-number" data-line-number="1820"></td>
        <td id="file--LC1820" class="blob-code blob-code-inner js-file-line">    tempP := subproblem tempP reduced based on choice C // 남은 문제의 축소</td>
      </tr>
      <tr>
        <td id="file--L1821" class="blob-num js-line-number" data-line-number="1821"></td>
        <td id="file--LC1821" class="blob-code blob-code-inner js-file-line">end loop</td>
      </tr>
      <tr>
        <td id="file--L1822" class="blob-num js-line-number" data-line-number="1822"></td>
        <td id="file--LC1822" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1823" class="blob-num js-line-number" data-line-number="1823"></td>
        <td id="file--LC1823" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1824" class="blob-num js-line-number" data-line-number="1824"></td>
        <td id="file--LC1824" class="blob-code blob-code-inner js-file-line">활동 선택 문제, </td>
      </tr>
      <tr>
        <td id="file--L1825" class="blob-num js-line-number" data-line-number="1825"></td>
        <td id="file--LC1825" class="blob-code blob-code-inner js-file-line">활동 선택 문제는 쉽게 말하면 한 강의실에서 여러 개의 수업을 하려고 할 때 한 번에 가장 많은 수업을 할 수 있는 경우를 고르는 겁니다.</td>
      </tr>
      <tr>
        <td id="file--L1826" class="blob-num js-line-number" data-line-number="1826"></td>
        <td id="file--LC1826" class="blob-code blob-code-inner js-file-line">dp는 C[i,j] = max(C[i,k] + C[k,j] + 1) 지만 모든 C를 구해야함 따라서 아래 그리드 알고리즘으로 구한다.</td>
      </tr>
      <tr>
        <td id="file--L1827" class="blob-num js-line-number" data-line-number="1827"></td>
        <td id="file--LC1827" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1828" class="blob-num js-line-number" data-line-number="1828"></td>
        <td id="file--LC1828" class="blob-code blob-code-inner js-file-line">var activity = [[1,1,3], [2,2,5], [3,4,7], [4,1,8], [5,5,9], [6,8,10], [7,9,11], [8,11,14], [9,13,16]];</td>
      </tr>
      <tr>
        <td id="file--L1829" class="blob-num js-line-number" data-line-number="1829"></td>
        <td id="file--LC1829" class="blob-code blob-code-inner js-file-line">function activitySelection(act) {</td>
      </tr>
      <tr>
        <td id="file--L1830" class="blob-num js-line-number" data-line-number="1830"></td>
        <td id="file--LC1830" class="blob-code blob-code-inner js-file-line">  var result = [];</td>
      </tr>
      <tr>
        <td id="file--L1831" class="blob-num js-line-number" data-line-number="1831"></td>
        <td id="file--LC1831" class="blob-code blob-code-inner js-file-line">  var sorted = act.sort(function(prev, cur) {</td>
      </tr>
      <tr>
        <td id="file--L1832" class="blob-num js-line-number" data-line-number="1832"></td>
        <td id="file--LC1832" class="blob-code blob-code-inner js-file-line">    return prev[2] - cur[2]; // 끝나는 시간 순으로 정렬</td>
      </tr>
      <tr>
        <td id="file--L1833" class="blob-num js-line-number" data-line-number="1833"></td>
        <td id="file--LC1833" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="file--L1834" class="blob-num js-line-number" data-line-number="1834"></td>
        <td id="file--LC1834" class="blob-code blob-code-inner js-file-line">  var last = 0;</td>
      </tr>
      <tr>
        <td id="file--L1835" class="blob-num js-line-number" data-line-number="1835"></td>
        <td id="file--LC1835" class="blob-code blob-code-inner js-file-line">  sorted.forEach(function(item) {</td>
      </tr>
      <tr>
        <td id="file--L1836" class="blob-num js-line-number" data-line-number="1836"></td>
        <td id="file--LC1836" class="blob-code blob-code-inner js-file-line">    if (last &lt; item[1]) { // 조건 만족 시 결과 집합에 추가</td>
      </tr>
      <tr>
        <td id="file--L1837" class="blob-num js-line-number" data-line-number="1837"></td>
        <td id="file--LC1837" class="blob-code blob-code-inner js-file-line">      last = item[2];</td>
      </tr>
      <tr>
        <td id="file--L1838" class="blob-num js-line-number" data-line-number="1838"></td>
        <td id="file--LC1838" class="blob-code blob-code-inner js-file-line">      result.push(item);</td>
      </tr>
      <tr>
        <td id="file--L1839" class="blob-num js-line-number" data-line-number="1839"></td>
        <td id="file--LC1839" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1840" class="blob-num js-line-number" data-line-number="1840"></td>
        <td id="file--LC1840" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="file--L1841" class="blob-num js-line-number" data-line-number="1841"></td>
        <td id="file--LC1841" class="blob-code blob-code-inner js-file-line">  return result.map(function(r) {</td>
      </tr>
      <tr>
        <td id="file--L1842" class="blob-num js-line-number" data-line-number="1842"></td>
        <td id="file--LC1842" class="blob-code blob-code-inner js-file-line">    return r[0]; // map을 한 이유는 그냥 몇 번째 행동이 선택되었는지 보여주기 위함.</td>
      </tr>
      <tr>
        <td id="file--L1843" class="blob-num js-line-number" data-line-number="1843"></td>
        <td id="file--LC1843" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="file--L1844" class="blob-num js-line-number" data-line-number="1844"></td>
        <td id="file--LC1844" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1845" class="blob-num js-line-number" data-line-number="1845"></td>
        <td id="file--LC1845" class="blob-code blob-code-inner js-file-line">activitySelection(activity); // [1, 3, 6, 8]</td>
      </tr>
      <tr>
        <td id="file--L1846" class="blob-num js-line-number" data-line-number="1846"></td>
        <td id="file--LC1846" class="blob-code blob-code-inner js-file-line">일단 끝나는 시간 순으로 정렬한 후, 반복문을 돌며 집합의 끝나는 시간이 다음 행동의 시작 시간보다 작은 경우 집합에 추가하면 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L1847" class="blob-num js-line-number" data-line-number="1847"></td>
        <td id="file--LC1847" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1848" class="blob-num js-line-number" data-line-number="1848"></td>
        <td id="file--LC1848" class="blob-code blob-code-inner js-file-line">분할 가능 배낭 문제,</td>
      </tr>
      <tr>
        <td id="file--L1849" class="blob-num js-line-number" data-line-number="1849"></td>
        <td id="file--LC1849" class="blob-code blob-code-inner js-file-line">물건이 무거울 경우 쪼개서 넣을 수 있습니다. 즉 무게가 초과할 거 같은면 물건을 쪼개서 일부만 넣을 수 있다는 것이죠.</td>
      </tr>
      <tr>
        <td id="file--L1850" class="blob-num js-line-number" data-line-number="1850"></td>
        <td id="file--LC1850" class="blob-code blob-code-inner js-file-line">물건을 쪼갤 수 있다는 가정 하에서는 무엇부터 넣는 게 최선일까요? 무게 대비 가치가 높은 것들을 먼저 넣는 게 좋겠죠? 무게 제한도 50 </td>
      </tr>
      <tr>
        <td id="file--L1851" class="blob-num js-line-number" data-line-number="1851"></td>
        <td id="file--LC1851" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1852" class="blob-num js-line-number" data-line-number="1852"></td>
        <td id="file--LC1852" class="blob-code blob-code-inner js-file-line">var test = [[1,60,10], [2,100,20], [3,120,30]];</td>
      </tr>
      <tr>
        <td id="file--L1853" class="blob-num js-line-number" data-line-number="1853"></td>
        <td id="file--LC1853" class="blob-code blob-code-inner js-file-line">function fractionalKnapsack(item, w) {</td>
      </tr>
      <tr>
        <td id="file--L1854" class="blob-num js-line-number" data-line-number="1854"></td>
        <td id="file--LC1854" class="blob-code blob-code-inner js-file-line">  var sorted = item.sort(function(prev, cur) {</td>
      </tr>
      <tr>
        <td id="file--L1855" class="blob-num js-line-number" data-line-number="1855"></td>
        <td id="file--LC1855" class="blob-code blob-code-inner js-file-line">    return cur[1] / cur[2] - prev[1] / prev[2]; // 무게 대비 가치 순으로 정렬</td>
      </tr>
      <tr>
        <td id="file--L1856" class="blob-num js-line-number" data-line-number="1856"></td>
        <td id="file--LC1856" class="blob-code blob-code-inner js-file-line">  });</td>
      </tr>
      <tr>
        <td id="file--L1857" class="blob-num js-line-number" data-line-number="1857"></td>
        <td id="file--LC1857" class="blob-code blob-code-inner js-file-line">  var limit = w;</td>
      </tr>
      <tr>
        <td id="file--L1858" class="blob-num js-line-number" data-line-number="1858"></td>
        <td id="file--LC1858" class="blob-code blob-code-inner js-file-line">  var result = 0;</td>
      </tr>
      <tr>
        <td id="file--L1859" class="blob-num js-line-number" data-line-number="1859"></td>
        <td id="file--LC1859" class="blob-code blob-code-inner js-file-line">  for (var i = 0; i &lt; sorted.length; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1860" class="blob-num js-line-number" data-line-number="1860"></td>
        <td id="file--LC1860" class="blob-code blob-code-inner js-file-line">    var cur = sorted[i];</td>
      </tr>
      <tr>
        <td id="file--L1861" class="blob-num js-line-number" data-line-number="1861"></td>
        <td id="file--LC1861" class="blob-code blob-code-inner js-file-line">    if (limit &gt; 0) {</td>
      </tr>
      <tr>
        <td id="file--L1862" class="blob-num js-line-number" data-line-number="1862"></td>
        <td id="file--LC1862" class="blob-code blob-code-inner js-file-line">      if (limit &gt;= cur[2]) { // 물건 무게가 제한 이하일 경우</td>
      </tr>
      <tr>
        <td id="file--L1863" class="blob-num js-line-number" data-line-number="1863"></td>
        <td id="file--LC1863" class="blob-code blob-code-inner js-file-line">        limit -= cur[2];</td>
      </tr>
      <tr>
        <td id="file--L1864" class="blob-num js-line-number" data-line-number="1864"></td>
        <td id="file--LC1864" class="blob-code blob-code-inner js-file-line">        result += cur[1];</td>
      </tr>
      <tr>
        <td id="file--L1865" class="blob-num js-line-number" data-line-number="1865"></td>
        <td id="file--LC1865" class="blob-code blob-code-inner js-file-line">      } else { // 물건 무게가 제한 초과일 경우</td>
      </tr>
      <tr>
        <td id="file--L1866" class="blob-num js-line-number" data-line-number="1866"></td>
        <td id="file--LC1866" class="blob-code blob-code-inner js-file-line">        result += cur[1] / cur[2] * limit; // 잘라서 넣음</td>
      </tr>
      <tr>
        <td id="file--L1867" class="blob-num js-line-number" data-line-number="1867"></td>
        <td id="file--LC1867" class="blob-code blob-code-inner js-file-line">        limit = 0;</td>
      </tr>
      <tr>
        <td id="file--L1868" class="blob-num js-line-number" data-line-number="1868"></td>
        <td id="file--LC1868" class="blob-code blob-code-inner js-file-line">      }</td>
      </tr>
      <tr>
        <td id="file--L1869" class="blob-num js-line-number" data-line-number="1869"></td>
        <td id="file--LC1869" class="blob-code blob-code-inner js-file-line">    } else {</td>
      </tr>
      <tr>
        <td id="file--L1870" class="blob-num js-line-number" data-line-number="1870"></td>
        <td id="file--LC1870" class="blob-code blob-code-inner js-file-line">      break;</td>
      </tr>
      <tr>
        <td id="file--L1871" class="blob-num js-line-number" data-line-number="1871"></td>
        <td id="file--LC1871" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1872" class="blob-num js-line-number" data-line-number="1872"></td>
        <td id="file--LC1872" class="blob-code blob-code-inner js-file-line">  }</td>
      </tr>
      <tr>
        <td id="file--L1873" class="blob-num js-line-number" data-line-number="1873"></td>
        <td id="file--LC1873" class="blob-code blob-code-inner js-file-line">  return result;</td>
      </tr>
      <tr>
        <td id="file--L1874" class="blob-num js-line-number" data-line-number="1874"></td>
        <td id="file--LC1874" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1875" class="blob-num js-line-number" data-line-number="1875"></td>
        <td id="file--LC1875" class="blob-code blob-code-inner js-file-line">fractionalKnapsack(test, 50); // 240</td>
      </tr>
      <tr>
        <td id="file--L1876" class="blob-num js-line-number" data-line-number="1876"></td>
        <td id="file--LC1876" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1877" class="blob-num js-line-number" data-line-number="1877"></td>
        <td id="file--LC1877" class="blob-code blob-code-inner js-file-line">■ 다익스트라 알고리즘 (Dijkstra Algorithm)</td>
      </tr>
      <tr>
        <td id="file--L1878" class="blob-num js-line-number" data-line-number="1878"></td>
        <td id="file--LC1878" class="blob-code blob-code-inner js-file-line">그래프 상에 존재하는 두 노드 간의 최단거리를 구하고 싶을 때 이용할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L1879" class="blob-num js-line-number" data-line-number="1879"></td>
        <td id="file--LC1879" class="blob-code blob-code-inner js-file-line">그래프의 기초라고 할 수 있으며,</td>
      </tr>
      <tr>
        <td id="file--L1880" class="blob-num js-line-number" data-line-number="1880"></td>
        <td id="file--LC1880" class="blob-code blob-code-inner js-file-line">간단한 구현과 Min Heap(pq)을 이용한 구현이 있다.</td>
      </tr>
      <tr>
        <td id="file--L1881" class="blob-num js-line-number" data-line-number="1881"></td>
        <td id="file--LC1881" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1882" class="blob-num js-line-number" data-line-number="1882"></td>
        <td id="file--LC1882" class="blob-code blob-code-inner js-file-line">최단거리는 최단거리로 이루어져 있다는 그리디(Greedy)한 생각에서부터 출발한다.</td>
      </tr>
      <tr>
        <td id="file--L1883" class="blob-num js-line-number" data-line-number="1883"></td>
        <td id="file--LC1883" class="blob-code blob-code-inner js-file-line">최단거리는 최단거리로 이루어져 있다는게 무슨뜻이냐면 </td>
      </tr>
      <tr>
        <td id="file--L1884" class="blob-num js-line-number" data-line-number="1884"></td>
        <td id="file--LC1884" class="blob-code blob-code-inner js-file-line">예를들어 1번 정점에서 2번 정점으로 가는 최단거리의 경로가 1-&gt;4-&gt;3-&gt;2 으로 형성되어 있다고 가정해보자.</td>
      </tr>
      <tr>
        <td id="file--L1885" class="blob-num js-line-number" data-line-number="1885"></td>
        <td id="file--LC1885" class="blob-code blob-code-inner js-file-line">이때 1번정점에서 4번 정점으로 가는 최단거리와 1번정점에서 3번 정점으로 가는 최단거리는 1번 정점에서 2번 정점으로 가는 최단거리 내에 포함된다.</td>
      </tr>
      <tr>
        <td id="file--L1886" class="blob-num js-line-number" data-line-number="1886"></td>
        <td id="file--LC1886" class="blob-code blob-code-inner js-file-line">만약 1번 정점에서 4번 정점으로 가는 최단경로가 1-&gt;5-&gt;4라면 1번 정점에서 2번정점으로 가는 최단경로가 1-&gt;5-&gt;4-&gt;3-&gt;2가 되어야 하므로 모순이 된다.</td>
      </tr>
      <tr>
        <td id="file--L1887" class="blob-num js-line-number" data-line-number="1887"></td>
        <td id="file--LC1887" class="blob-code blob-code-inner js-file-line">고로 이 아이디어에 기반하여 정점 V로부터 최단거리를 구하는 과정에 구해지는 정점들을 이용하여 계속 최단거리를 구해나간다.</td>
      </tr>
      <tr>
        <td id="file--L1888" class="blob-num js-line-number" data-line-number="1888"></td>
        <td id="file--LC1888" class="blob-code blob-code-inner js-file-line">만약에 1-&gt;3의 최단거리를 구했다면 3에 연결 된 간선들은 최단경로의 후보가 될 수 있는 간선.</td>
      </tr>
      <tr>
        <td id="file--L1889" class="blob-num js-line-number" data-line-number="1889"></td>
        <td id="file--LC1889" class="blob-code blob-code-inner js-file-line">힙에 들어가는 거리는 지금까지의 누적거리 이기 때문에 </td>
      </tr>
      <tr>
        <td id="file--L1890" class="blob-num js-line-number" data-line-number="1890"></td>
        <td id="file--LC1890" class="blob-code blob-code-inner js-file-line">정점 V에 연결 된 간선의 정보를 삽입할 때 &#39;d[V]+해당 간선의 가중치&#39;가 들어가야한다.</td>
      </tr>
      <tr>
        <td id="file--L1891" class="blob-num js-line-number" data-line-number="1891"></td>
        <td id="file--LC1891" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1892" class="blob-num js-line-number" data-line-number="1892"></td>
        <td id="file--LC1892" class="blob-code blob-code-inner js-file-line">예제)</td>
      </tr>
      <tr>
        <td id="file--L1893" class="blob-num js-line-number" data-line-number="1893"></td>
        <td id="file--LC1893" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L1894" class="blob-num js-line-number" data-line-number="1894"></td>
        <td id="file--LC1894" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L1895" class="blob-num js-line-number" data-line-number="1895"></td>
        <td id="file--LC1895" class="blob-code blob-code-inner js-file-line">#include &lt;queue&gt;</td>
      </tr>
      <tr>
        <td id="file--L1896" class="blob-num js-line-number" data-line-number="1896"></td>
        <td id="file--LC1896" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L1897" class="blob-num js-line-number" data-line-number="1897"></td>
        <td id="file--LC1897" class="blob-code blob-code-inner js-file-line">#include &lt;cstring&gt;</td>
      </tr>
      <tr>
        <td id="file--L1898" class="blob-num js-line-number" data-line-number="1898"></td>
        <td id="file--LC1898" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1899" class="blob-num js-line-number" data-line-number="1899"></td>
        <td id="file--LC1899" class="blob-code blob-code-inner js-file-line">int v, e, s, x, y, z, d[20002];</td>
      </tr>
      <tr>
        <td id="file--L1900" class="blob-num js-line-number" data-line-number="1900"></td>
        <td id="file--LC1900" class="blob-code blob-code-inner js-file-line">vector&lt;vector&lt;pair&lt;int, int&gt;&gt;&gt; vt;</td>
      </tr>
      <tr>
        <td id="file--L1901" class="blob-num js-line-number" data-line-number="1901"></td>
        <td id="file--LC1901" class="blob-code blob-code-inner js-file-line">int main() {</td>
      </tr>
      <tr>
        <td id="file--L1902" class="blob-num js-line-number" data-line-number="1902"></td>
        <td id="file--LC1902" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d%d%d&quot;, &amp;v, &amp;e, &amp;s);</td>
      </tr>
      <tr>
        <td id="file--L1903" class="blob-num js-line-number" data-line-number="1903"></td>
        <td id="file--LC1903" class="blob-code blob-code-inner js-file-line">    vt.resize(v + 1);</td>
      </tr>
      <tr>
        <td id="file--L1904" class="blob-num js-line-number" data-line-number="1904"></td>
        <td id="file--LC1904" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; e; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1905" class="blob-num js-line-number" data-line-number="1905"></td>
        <td id="file--LC1905" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d%d%d&quot;, &amp;x, &amp;y, &amp;z);</td>
      </tr>
      <tr>
        <td id="file--L1906" class="blob-num js-line-number" data-line-number="1906"></td>
        <td id="file--LC1906" class="blob-code blob-code-inner js-file-line">        vt[x].push_back({ y,z });</td>
      </tr>
      <tr>
        <td id="file--L1907" class="blob-num js-line-number" data-line-number="1907"></td>
        <td id="file--LC1907" class="blob-code blob-code-inner js-file-line">    }    //인접리스트로 그래프를 형성</td>
      </tr>
      <tr>
        <td id="file--L1908" class="blob-num js-line-number" data-line-number="1908"></td>
        <td id="file--LC1908" class="blob-code blob-code-inner js-file-line">    memset(d, -1, sizeof(d));//거리가 담길 배열 d를 나올 수 없는 수(-1)로 초기화</td>
      </tr>
      <tr>
        <td id="file--L1909" class="blob-num js-line-number" data-line-number="1909"></td>
        <td id="file--LC1909" class="blob-code blob-code-inner js-file-line">    priority_queue&lt;pair&lt;int, int&gt;&gt; pq;//정보를 담을 힙(거리,정점)</td>
      </tr>
      <tr>
        <td id="file--L1910" class="blob-num js-line-number" data-line-number="1910"></td>
        <td id="file--LC1910" class="blob-code blob-code-inner js-file-line">    pq.push({ 0,s });//시작정점의 정보를 삽입</td>
      </tr>
      <tr>
        <td id="file--L1911" class="blob-num js-line-number" data-line-number="1911"></td>
        <td id="file--LC1911" class="blob-code blob-code-inner js-file-line">    while (pq.size()) {//pq가 빌 때까지 다익스트라 알고리즘 동작</td>
      </tr>
      <tr>
        <td id="file--L1912" class="blob-num js-line-number" data-line-number="1912"></td>
        <td id="file--LC1912" class="blob-code blob-code-inner js-file-line">        int here = pq.top().second;//현재 확인하는 정점</td>
      </tr>
      <tr>
        <td id="file--L1913" class="blob-num js-line-number" data-line-number="1913"></td>
        <td id="file--LC1913" class="blob-code blob-code-inner js-file-line">        int cost = -pq.top().first;//거리(비용) -를 붙이는 이유는 pq를 minheap으로 사용하기 위함</td>
      </tr>
      <tr>
        <td id="file--L1914" class="blob-num js-line-number" data-line-number="1914"></td>
        <td id="file--LC1914" class="blob-code blob-code-inner js-file-line">        pq.pop();</td>
      </tr>
      <tr>
        <td id="file--L1915" class="blob-num js-line-number" data-line-number="1915"></td>
        <td id="file--LC1915" class="blob-code blob-code-inner js-file-line">        if (d[here] != -1)</td>
      </tr>
      <tr>
        <td id="file--L1916" class="blob-num js-line-number" data-line-number="1916"></td>
        <td id="file--LC1916" class="blob-code blob-code-inner js-file-line">            continue;//이미 계산되었다면 넘어감</td>
      </tr>
      <tr>
        <td id="file--L1917" class="blob-num js-line-number" data-line-number="1917"></td>
        <td id="file--LC1917" class="blob-code blob-code-inner js-file-line">        d[here] = cost;//최단거리 정보를 갱신</td>
      </tr>
      <tr>
        <td id="file--L1918" class="blob-num js-line-number" data-line-number="1918"></td>
        <td id="file--LC1918" class="blob-code blob-code-inner js-file-line">        for (auto it : vt[here]) {</td>
      </tr>
      <tr>
        <td id="file--L1919" class="blob-num js-line-number" data-line-number="1919"></td>
        <td id="file--LC1919" class="blob-code blob-code-inner js-file-line">            int next = it.first;//다음 정점</td>
      </tr>
      <tr>
        <td id="file--L1920" class="blob-num js-line-number" data-line-number="1920"></td>
        <td id="file--LC1920" class="blob-code blob-code-inner js-file-line">            int acost = -it.second - cost;//누적 된 거리</td>
      </tr>
      <tr>
        <td id="file--L1921" class="blob-num js-line-number" data-line-number="1921"></td>
        <td id="file--LC1921" class="blob-code blob-code-inner js-file-line">            if (d[next] != -1)</td>
      </tr>
      <tr>
        <td id="file--L1922" class="blob-num js-line-number" data-line-number="1922"></td>
        <td id="file--LC1922" class="blob-code blob-code-inner js-file-line">                continue;//이미 계산되었다면 넘어감</td>
      </tr>
      <tr>
        <td id="file--L1923" class="blob-num js-line-number" data-line-number="1923"></td>
        <td id="file--LC1923" class="blob-code blob-code-inner js-file-line">            pq.push({ acost,next });</td>
      </tr>
      <tr>
        <td id="file--L1924" class="blob-num js-line-number" data-line-number="1924"></td>
        <td id="file--LC1924" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1925" class="blob-num js-line-number" data-line-number="1925"></td>
        <td id="file--LC1925" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1926" class="blob-num js-line-number" data-line-number="1926"></td>
        <td id="file--LC1926" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= v; i++) {</td>
      </tr>
      <tr>
        <td id="file--L1927" class="blob-num js-line-number" data-line-number="1927"></td>
        <td id="file--LC1927" class="blob-code blob-code-inner js-file-line">        if (d[i] == -1)puts(&quot;INF&quot;);</td>
      </tr>
      <tr>
        <td id="file--L1928" class="blob-num js-line-number" data-line-number="1928"></td>
        <td id="file--LC1928" class="blob-code blob-code-inner js-file-line">        else printf(&quot;%d\n&quot;, d[i]);</td>
      </tr>
      <tr>
        <td id="file--L1929" class="blob-num js-line-number" data-line-number="1929"></td>
        <td id="file--LC1929" class="blob-code blob-code-inner js-file-line">    }//최단거리 출력</td>
      </tr>
      <tr>
        <td id="file--L1930" class="blob-num js-line-number" data-line-number="1930"></td>
        <td id="file--LC1930" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L1931" class="blob-num js-line-number" data-line-number="1931"></td>
        <td id="file--LC1931" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L1932" class="blob-num js-line-number" data-line-number="1932"></td>
        <td id="file--LC1932" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1933" class="blob-num js-line-number" data-line-number="1933"></td>
        <td id="file--LC1933" class="blob-code blob-code-inner js-file-line">■ A* 알고리즘 (A* algorithm) 에이스타 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L1934" class="blob-num js-line-number" data-line-number="1934"></td>
        <td id="file--LC1934" class="blob-code blob-code-inner js-file-line">게임에서 많이 사용되는 최단거리 길찾기 알고리즘이다.</td>
      </tr>
      <tr>
        <td id="file--L1935" class="blob-num js-line-number" data-line-number="1935"></td>
        <td id="file--LC1935" class="blob-code blob-code-inner js-file-line">다익스트라 알고리즘을 확장하여 만들어진 경로 탐색 알고리즘이다.</td>
      </tr>
      <tr>
        <td id="file--L1936" class="blob-num js-line-number" data-line-number="1936"></td>
        <td id="file--LC1936" class="blob-code blob-code-inner js-file-line">BFS의 가지치기 알고리즘이라 생각하면 된다.</td>
      </tr>
      <tr>
        <td id="file--L1937" class="blob-num js-line-number" data-line-number="1937"></td>
        <td id="file--LC1937" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1938" class="blob-num js-line-number" data-line-number="1938"></td>
        <td id="file--LC1938" class="blob-code blob-code-inner js-file-line">핵심 개념 </td>
      </tr>
      <tr>
        <td id="file--L1939" class="blob-num js-line-number" data-line-number="1939"></td>
        <td id="file--LC1939" class="blob-code blob-code-inner js-file-line">1. 최소가 되는 지점을 우선 탐색 (우선 순위 큐)</td>
      </tr>
      <tr>
        <td id="file--L1940" class="blob-num js-line-number" data-line-number="1940"></td>
        <td id="file--LC1940" class="blob-code blob-code-inner js-file-line">2. 휴리스틱 추정값 사용 ( F = G + H )</td>
      </tr>
      <tr>
        <td id="file--L1941" class="blob-num js-line-number" data-line-number="1941"></td>
        <td id="file--LC1941" class="blob-code blob-code-inner js-file-line">3. Open List / Closed List를 이용하여 노드 관리</td>
      </tr>
      <tr>
        <td id="file--L1942" class="blob-num js-line-number" data-line-number="1942"></td>
        <td id="file--LC1942" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1943" class="blob-num js-line-number" data-line-number="1943"></td>
        <td id="file--LC1943" class="blob-code blob-code-inner js-file-line">G는 시작 노드에서 해당 노드까지의 실제 소요 경비값이고,</td>
      </tr>
      <tr>
        <td id="file--L1944" class="blob-num js-line-number" data-line-number="1944"></td>
        <td id="file--LC1944" class="blob-code blob-code-inner js-file-line">H는 휴리스틱 추정값으로 해당 노드에서 최종 목적지까지 도달하는데 소요될 것이라고 추정되는 값.</td>
      </tr>
      <tr>
        <td id="file--L1945" class="blob-num js-line-number" data-line-number="1945"></td>
        <td id="file--LC1945" class="blob-code blob-code-inner js-file-line">(H는 보통 좌표가 주어지면 장애물을 생각하는 방식과 아닌방식 이런식으로 계산하는데</td>
      </tr>
      <tr>
        <td id="file--L1946" class="blob-num js-line-number" data-line-number="1946"></td>
        <td id="file--LC1946" class="blob-code blob-code-inner js-file-line">Manhattan Method는 장애물을 무시하고 가로,세로로 최단거리 목적지 거리이다. 추정잔여거리(H)를 구할 수 없으면 이 알고리즘은 의미가 없다.)</td>
      </tr>
      <tr>
        <td id="file--L1947" class="blob-num js-line-number" data-line-number="1947"></td>
        <td id="file--LC1947" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1948" class="blob-num js-line-number" data-line-number="1948"></td>
        <td id="file--LC1948" class="blob-code blob-code-inner js-file-line">열린목록 : 아직 조사하지 않은 데이터</td>
      </tr>
      <tr>
        <td id="file--L1949" class="blob-num js-line-number" data-line-number="1949"></td>
        <td id="file--LC1949" class="blob-code blob-code-inner js-file-line">닫힌목록 : 조사한 데이터</td>
      </tr>
      <tr>
        <td id="file--L1950" class="blob-num js-line-number" data-line-number="1950"></td>
        <td id="file--LC1950" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1951" class="blob-num js-line-number" data-line-number="1951"></td>
        <td id="file--LC1951" class="blob-code blob-code-inner js-file-line">똑같이 시작 점을 C에 넣고 C에 넣은 노드에 연결된 노드를 O에 넣어 구하는데 열린목록(O)에 중복되는 노드가 있을 경우 F가 작은 쪽을 선택한다.</td>
      </tr>
      <tr>
        <td id="file--L1952" class="blob-num js-line-number" data-line-number="1952"></td>
        <td id="file--LC1952" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1953" class="blob-num js-line-number" data-line-number="1953"></td>
        <td id="file--LC1953" class="blob-code blob-code-inner js-file-line">■ 프림 알고리즘 (Prim Algorithm)</td>
      </tr>
      <tr>
        <td id="file--L1954" class="blob-num js-line-number" data-line-number="1954"></td>
        <td id="file--LC1954" class="blob-code blob-code-inner js-file-line">프림 알고리즘은 무향 연결 그래프가 주어질 때, &#39;최소 스패닝 트리&#39; 라고 부르는 서브 그래프를 찾는 알고리즘입니다.</td>
      </tr>
      <tr>
        <td id="file--L1955" class="blob-num js-line-number" data-line-number="1955"></td>
        <td id="file--LC1955" class="blob-code blob-code-inner js-file-line">최소 신장 트리(MST, minimum spanning tree)를 찾는 그리디 알고리즘.</td>
      </tr>
      <tr>
        <td id="file--L1956" class="blob-num js-line-number" data-line-number="1956"></td>
        <td id="file--LC1956" class="blob-code blob-code-inner js-file-line">크루스칼 알고리즘과 같은 용도이지만, 응용 상황에서 두 알고리즘의 효율성이 달라질 수 있기 때문에 둘 모두 알아두는 것이 좋습니다.</td>
      </tr>
      <tr>
        <td id="file--L1957" class="blob-num js-line-number" data-line-number="1957"></td>
        <td id="file--LC1957" class="blob-code blob-code-inner js-file-line">최소 스패닝 트리에 대한 개념을 모른다면 크루스칼 알고리즘을 먼저 보고 오시는 걸 추천합니다.</td>
      </tr>
      <tr>
        <td id="file--L1958" class="blob-num js-line-number" data-line-number="1958"></td>
        <td id="file--LC1958" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1959" class="blob-num js-line-number" data-line-number="1959"></td>
        <td id="file--LC1959" class="blob-code blob-code-inner js-file-line">step 0) 임의의 정점을 선택하여 비어있는 T에 포함시킨다. (이제 T는 노드가 한 개인 트리. )</td>
      </tr>
      <tr>
        <td id="file--L1960" class="blob-num js-line-number" data-line-number="1960"></td>
        <td id="file--LC1960" class="blob-code blob-code-inner js-file-line">step 1) T 에 있는 노드와 T 에 없는 노드 사이의 간선 중 가중치가 최소인 간선을 찾는다.</td>
      </tr>
      <tr>
        <td id="file--L1961" class="blob-num js-line-number" data-line-number="1961"></td>
        <td id="file--LC1961" class="blob-code blob-code-inner js-file-line">step 2) 찾은 간선이 연결하는 두 노드 중, T 에 없던 노드를 T에 포함시킨다. </td>
      </tr>
      <tr>
        <td id="file--L1962" class="blob-num js-line-number" data-line-number="1962"></td>
        <td id="file--LC1962" class="blob-code blob-code-inner js-file-line">                (step 1에서 찾은 간선도 같이 T에 포함됩니다.)</td>
      </tr>
      <tr>
        <td id="file--L1963" class="blob-num js-line-number" data-line-number="1963"></td>
        <td id="file--LC1963" class="blob-code blob-code-inner js-file-line">step 3) 모든 노드가 T 에 포함될 때 까지, 1,2 를 반복한다.</td>
      </tr>
      <tr>
        <td id="file--L1964" class="blob-num js-line-number" data-line-number="1964"></td>
        <td id="file--LC1964" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L1965" class="blob-num js-line-number" data-line-number="1965"></td>
        <td id="file--LC1965" class="blob-code blob-code-inner js-file-line">[O(n^2) 코드]</td>
      </tr>
      <tr>
        <td id="file--L1966" class="blob-num js-line-number" data-line-number="1966"></td>
        <td id="file--LC1966" class="blob-code blob-code-inner js-file-line">#include &lt;bits/stdc++.h&gt;</td>
      </tr>
      <tr>
        <td id="file--L1967" class="blob-num js-line-number" data-line-number="1967"></td>
        <td id="file--LC1967" class="blob-code blob-code-inner js-file-line">#define PII pair&lt;int,int&gt;</td>
      </tr>
      <tr>
        <td id="file--L1968" class="blob-num js-line-number" data-line-number="1968"></td>
        <td id="file--LC1968" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1969" class="blob-num js-line-number" data-line-number="1969"></td>
        <td id="file--LC1969" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L1970" class="blob-num js-line-number" data-line-number="1970"></td>
        <td id="file--LC1970" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1971" class="blob-num js-line-number" data-line-number="1971"></td>
        <td id="file--LC1971" class="blob-code blob-code-inner js-file-line">const int N = 1005, INF = 2140000000;</td>
      </tr>
      <tr>
        <td id="file--L1972" class="blob-num js-line-number" data-line-number="1972"></td>
        <td id="file--LC1972" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1973" class="blob-num js-line-number" data-line-number="1973"></td>
        <td id="file--LC1973" class="blob-code blob-code-inner js-file-line">vector&lt;PII&gt; ad[N];  // ad[i] : i 노드가 출발지인 간선들, first = 목적지, second = 비용</td>
      </tr>
      <tr>
        <td id="file--L1974" class="blob-num js-line-number" data-line-number="1974"></td>
        <td id="file--LC1974" class="blob-code blob-code-inner js-file-line">int dist[N];        // dist[i] : 선택된 노드들과 i 노드가 연결되어 있는 간선의 비용 중 최소비용</td>
      </tr>
      <tr>
        <td id="file--L1975" class="blob-num js-line-number" data-line-number="1975"></td>
        <td id="file--LC1975" class="blob-code blob-code-inner js-file-line">bool selected[N];   // selected[i] : i 가 이전에 선택된 노드인가?</td>
      </tr>
      <tr>
        <td id="file--L1976" class="blob-num js-line-number" data-line-number="1976"></td>
        <td id="file--LC1976" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L1977" class="blob-num js-line-number" data-line-number="1977"></td>
        <td id="file--LC1977" class="blob-code blob-code-inner js-file-line">long long prim(int pn){</td>
      </tr>
      <tr>
        <td id="file--L1978" class="blob-num js-line-number" data-line-number="1978"></td>
        <td id="file--LC1978" class="blob-code blob-code-inner js-file-line">    long long ret = 0;</td>
      </tr>
      <tr>
        <td id="file--L1979" class="blob-num js-line-number" data-line-number="1979"></td>
        <td id="file--LC1979" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;=pn; i++){ // 초기화</td>
      </tr>
      <tr>
        <td id="file--L1980" class="blob-num js-line-number" data-line-number="1980"></td>
        <td id="file--LC1980" class="blob-code blob-code-inner js-file-line">        dist[i] = INF;</td>
      </tr>
      <tr>
        <td id="file--L1981" class="blob-num js-line-number" data-line-number="1981"></td>
        <td id="file--LC1981" class="blob-code blob-code-inner js-file-line">        selected[pn] = false;</td>
      </tr>
      <tr>
        <td id="file--L1982" class="blob-num js-line-number" data-line-number="1982"></td>
        <td id="file--LC1982" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1983" class="blob-num js-line-number" data-line-number="1983"></td>
        <td id="file--LC1983" class="blob-code blob-code-inner js-file-line">    dist[1] = 0;              // 1번 노드부터 선택</td>
      </tr>
      <tr>
        <td id="file--L1984" class="blob-num js-line-number" data-line-number="1984"></td>
        <td id="file--LC1984" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;=pn; i++){</td>
      </tr>
      <tr>
        <td id="file--L1985" class="blob-num js-line-number" data-line-number="1985"></td>
        <td id="file--LC1985" class="blob-code blob-code-inner js-file-line">        int now=-1, min_dist = INF;</td>
      </tr>
      <tr>
        <td id="file--L1986" class="blob-num js-line-number" data-line-number="1986"></td>
        <td id="file--LC1986" class="blob-code blob-code-inner js-file-line">        for(int j=1; j&lt;=pn; j++){</td>
      </tr>
      <tr>
        <td id="file--L1987" class="blob-num js-line-number" data-line-number="1987"></td>
        <td id="file--LC1987" class="blob-code blob-code-inner js-file-line">            if(!selected[j] &amp;&amp; min_dist &gt; dist[j]){</td>
      </tr>
      <tr>
        <td id="file--L1988" class="blob-num js-line-number" data-line-number="1988"></td>
        <td id="file--LC1988" class="blob-code blob-code-inner js-file-line">                min_dist = dist[j];</td>
      </tr>
      <tr>
        <td id="file--L1989" class="blob-num js-line-number" data-line-number="1989"></td>
        <td id="file--LC1989" class="blob-code blob-code-inner js-file-line">                now = j;</td>
      </tr>
      <tr>
        <td id="file--L1990" class="blob-num js-line-number" data-line-number="1990"></td>
        <td id="file--LC1990" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L1991" class="blob-num js-line-number" data-line-number="1991"></td>
        <td id="file--LC1991" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L1992" class="blob-num js-line-number" data-line-number="1992"></td>
        <td id="file--LC1992" class="blob-code blob-code-inner js-file-line">        if(now&lt;0) return (long long)INF; // 연결 그래프가 아님</td>
      </tr>
      <tr>
        <td id="file--L1993" class="blob-num js-line-number" data-line-number="1993"></td>
        <td id="file--LC1993" class="blob-code blob-code-inner js-file-line">        ret+=min_dist;</td>
      </tr>
      <tr>
        <td id="file--L1994" class="blob-num js-line-number" data-line-number="1994"></td>
        <td id="file--LC1994" class="blob-code blob-code-inner js-file-line">        selected[now] = true;</td>
      </tr>
      <tr>
        <td id="file--L1995" class="blob-num js-line-number" data-line-number="1995"></td>
        <td id="file--LC1995" class="blob-code blob-code-inner js-file-line">        for(auto edge: ad[now])</td>
      </tr>
      <tr>
        <td id="file--L1996" class="blob-num js-line-number" data-line-number="1996"></td>
        <td id="file--LC1996" class="blob-code blob-code-inner js-file-line">            dist[edge.first] = min(dist[edge.first], edge.second);</td>
      </tr>
      <tr>
        <td id="file--L1997" class="blob-num js-line-number" data-line-number="1997"></td>
        <td id="file--LC1997" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L1998" class="blob-num js-line-number" data-line-number="1998"></td>
        <td id="file--LC1998" class="blob-code blob-code-inner js-file-line">    return ret;</td>
      </tr>
      <tr>
        <td id="file--L1999" class="blob-num js-line-number" data-line-number="1999"></td>
        <td id="file--LC1999" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2000" class="blob-num js-line-number" data-line-number="2000"></td>
        <td id="file--LC2000" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2001" class="blob-num js-line-number" data-line-number="2001"></td>
        <td id="file--LC2001" class="blob-code blob-code-inner js-file-line">int main(){</td>
      </tr>
      <tr>
        <td id="file--L2002" class="blob-num js-line-number" data-line-number="2002"></td>
        <td id="file--LC2002" class="blob-code blob-code-inner js-file-line">    int n,m;</td>
      </tr>
      <tr>
        <td id="file--L2003" class="blob-num js-line-number" data-line-number="2003"></td>
        <td id="file--LC2003" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2004" class="blob-num js-line-number" data-line-number="2004"></td>
        <td id="file--LC2004" class="blob-code blob-code-inner js-file-line">    while(m--){</td>
      </tr>
      <tr>
        <td id="file--L2005" class="blob-num js-line-number" data-line-number="2005"></td>
        <td id="file--LC2005" class="blob-code blob-code-inner js-file-line">        int v1,v2,c;</td>
      </tr>
      <tr>
        <td id="file--L2006" class="blob-num js-line-number" data-line-number="2006"></td>
        <td id="file--LC2006" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d %d %d&quot;,&amp;v1,&amp;v2,&amp;c);</td>
      </tr>
      <tr>
        <td id="file--L2007" class="blob-num js-line-number" data-line-number="2007"></td>
        <td id="file--LC2007" class="blob-code blob-code-inner js-file-line">        ad[v1].push_back(PII(v2,c));</td>
      </tr>
      <tr>
        <td id="file--L2008" class="blob-num js-line-number" data-line-number="2008"></td>
        <td id="file--LC2008" class="blob-code blob-code-inner js-file-line">        ad[v2].push_back(PII(v1,c));</td>
      </tr>
      <tr>
        <td id="file--L2009" class="blob-num js-line-number" data-line-number="2009"></td>
        <td id="file--LC2009" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2010" class="blob-num js-line-number" data-line-number="2010"></td>
        <td id="file--LC2010" class="blob-code blob-code-inner js-file-line">    printf(&quot;%lld&quot;,prim(n));</td>
      </tr>
      <tr>
        <td id="file--L2011" class="blob-num js-line-number" data-line-number="2011"></td>
        <td id="file--LC2011" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2012" class="blob-num js-line-number" data-line-number="2012"></td>
        <td id="file--LC2012" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2013" class="blob-num js-line-number" data-line-number="2013"></td>
        <td id="file--LC2013" class="blob-code blob-code-inner js-file-line">출처: http://weeklyps.com/entry/프림-알고리즘-Prims-algorithm [weekly ps]</td>
      </tr>
      <tr>
        <td id="file--L2014" class="blob-num js-line-number" data-line-number="2014"></td>
        <td id="file--LC2014" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2015" class="blob-num js-line-number" data-line-number="2015"></td>
        <td id="file--LC2015" class="blob-code blob-code-inner js-file-line">[O(ELogV)코드]</td>
      </tr>
      <tr>
        <td id="file--L2016" class="blob-num js-line-number" data-line-number="2016"></td>
        <td id="file--LC2016" class="blob-code blob-code-inner js-file-line">#include &lt;bits/stdc++.h&gt;</td>
      </tr>
      <tr>
        <td id="file--L2017" class="blob-num js-line-number" data-line-number="2017"></td>
        <td id="file--LC2017" class="blob-code blob-code-inner js-file-line">#define PII pair&lt;int,int&gt;</td>
      </tr>
      <tr>
        <td id="file--L2018" class="blob-num js-line-number" data-line-number="2018"></td>
        <td id="file--LC2018" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2019" class="blob-num js-line-number" data-line-number="2019"></td>
        <td id="file--LC2019" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2020" class="blob-num js-line-number" data-line-number="2020"></td>
        <td id="file--LC2020" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2021" class="blob-num js-line-number" data-line-number="2021"></td>
        <td id="file--LC2021" class="blob-code blob-code-inner js-file-line">const int N = 1005, INF = 2140000000;</td>
      </tr>
      <tr>
        <td id="file--L2022" class="blob-num js-line-number" data-line-number="2022"></td>
        <td id="file--LC2022" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2023" class="blob-num js-line-number" data-line-number="2023"></td>
        <td id="file--LC2023" class="blob-code blob-code-inner js-file-line">vector&lt;PII&gt; ad[N];  // ad[i] : i 노드가 출발지인 간선들, first = 비용, second = 목적지</td>
      </tr>
      <tr>
        <td id="file--L2024" class="blob-num js-line-number" data-line-number="2024"></td>
        <td id="file--LC2024" class="blob-code blob-code-inner js-file-line">priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt; &gt; dist;        // dist : 선택될 가능성이 있는 간선들</td>
      </tr>
      <tr>
        <td id="file--L2025" class="blob-num js-line-number" data-line-number="2025"></td>
        <td id="file--LC2025" class="blob-code blob-code-inner js-file-line">bool selected[N];   // selected[i] : i 가 이전에 선택된 노드인가?</td>
      </tr>
      <tr>
        <td id="file--L2026" class="blob-num js-line-number" data-line-number="2026"></td>
        <td id="file--LC2026" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2027" class="blob-num js-line-number" data-line-number="2027"></td>
        <td id="file--LC2027" class="blob-code blob-code-inner js-file-line">void add_edge(int node){</td>
      </tr>
      <tr>
        <td id="file--L2028" class="blob-num js-line-number" data-line-number="2028"></td>
        <td id="file--LC2028" class="blob-code blob-code-inner js-file-line">    for(auto edge: ad[node]){</td>
      </tr>
      <tr>
        <td id="file--L2029" class="blob-num js-line-number" data-line-number="2029"></td>
        <td id="file--LC2029" class="blob-code blob-code-inner js-file-line">        dist.push(edge);</td>
      </tr>
      <tr>
        <td id="file--L2030" class="blob-num js-line-number" data-line-number="2030"></td>
        <td id="file--LC2030" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2031" class="blob-num js-line-number" data-line-number="2031"></td>
        <td id="file--LC2031" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2032" class="blob-num js-line-number" data-line-number="2032"></td>
        <td id="file--LC2032" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2033" class="blob-num js-line-number" data-line-number="2033"></td>
        <td id="file--LC2033" class="blob-code blob-code-inner js-file-line">long long prim(int pn){</td>
      </tr>
      <tr>
        <td id="file--L2034" class="blob-num js-line-number" data-line-number="2034"></td>
        <td id="file--LC2034" class="blob-code blob-code-inner js-file-line">    long long ret = 0;</td>
      </tr>
      <tr>
        <td id="file--L2035" class="blob-num js-line-number" data-line-number="2035"></td>
        <td id="file--LC2035" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;=pn; i++){ // 초기화</td>
      </tr>
      <tr>
        <td id="file--L2036" class="blob-num js-line-number" data-line-number="2036"></td>
        <td id="file--LC2036" class="blob-code blob-code-inner js-file-line">        selected[i] = false;</td>
      </tr>
      <tr>
        <td id="file--L2037" class="blob-num js-line-number" data-line-number="2037"></td>
        <td id="file--LC2037" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2038" class="blob-num js-line-number" data-line-number="2038"></td>
        <td id="file--LC2038" class="blob-code blob-code-inner js-file-line">    dist.push(PII(0,1));</td>
      </tr>
      <tr>
        <td id="file--L2039" class="blob-num js-line-number" data-line-number="2039"></td>
        <td id="file--LC2039" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;=pn; i++){</td>
      </tr>
      <tr>
        <td id="file--L2040" class="blob-num js-line-number" data-line-number="2040"></td>
        <td id="file--LC2040" class="blob-code blob-code-inner js-file-line">        int now=-1, min_dist = INF;</td>
      </tr>
      <tr>
        <td id="file--L2041" class="blob-num js-line-number" data-line-number="2041"></td>
        <td id="file--LC2041" class="blob-code blob-code-inner js-file-line">        while(!dist.empty()){</td>
      </tr>
      <tr>
        <td id="file--L2042" class="blob-num js-line-number" data-line-number="2042"></td>
        <td id="file--LC2042" class="blob-code blob-code-inner js-file-line">            now = dist.top().second;</td>
      </tr>
      <tr>
        <td id="file--L2043" class="blob-num js-line-number" data-line-number="2043"></td>
        <td id="file--LC2043" class="blob-code blob-code-inner js-file-line">            if(!selected[now]){</td>
      </tr>
      <tr>
        <td id="file--L2044" class="blob-num js-line-number" data-line-number="2044"></td>
        <td id="file--LC2044" class="blob-code blob-code-inner js-file-line">                min_dist = dist.top().first;</td>
      </tr>
      <tr>
        <td id="file--L2045" class="blob-num js-line-number" data-line-number="2045"></td>
        <td id="file--LC2045" class="blob-code blob-code-inner js-file-line">                break;</td>
      </tr>
      <tr>
        <td id="file--L2046" class="blob-num js-line-number" data-line-number="2046"></td>
        <td id="file--LC2046" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L2047" class="blob-num js-line-number" data-line-number="2047"></td>
        <td id="file--LC2047" class="blob-code blob-code-inner js-file-line">            dist.pop();</td>
      </tr>
      <tr>
        <td id="file--L2048" class="blob-num js-line-number" data-line-number="2048"></td>
        <td id="file--LC2048" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2049" class="blob-num js-line-number" data-line-number="2049"></td>
        <td id="file--LC2049" class="blob-code blob-code-inner js-file-line">        if(min_dist==INF) return (long long)INF; // 연결 그래프가 아님</td>
      </tr>
      <tr>
        <td id="file--L2050" class="blob-num js-line-number" data-line-number="2050"></td>
        <td id="file--LC2050" class="blob-code blob-code-inner js-file-line">        ret+=min_dist;</td>
      </tr>
      <tr>
        <td id="file--L2051" class="blob-num js-line-number" data-line-number="2051"></td>
        <td id="file--LC2051" class="blob-code blob-code-inner js-file-line">        selected[now] = true;</td>
      </tr>
      <tr>
        <td id="file--L2052" class="blob-num js-line-number" data-line-number="2052"></td>
        <td id="file--LC2052" class="blob-code blob-code-inner js-file-line">        add_edge(now);</td>
      </tr>
      <tr>
        <td id="file--L2053" class="blob-num js-line-number" data-line-number="2053"></td>
        <td id="file--LC2053" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2054" class="blob-num js-line-number" data-line-number="2054"></td>
        <td id="file--LC2054" class="blob-code blob-code-inner js-file-line">    return ret;</td>
      </tr>
      <tr>
        <td id="file--L2055" class="blob-num js-line-number" data-line-number="2055"></td>
        <td id="file--LC2055" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2056" class="blob-num js-line-number" data-line-number="2056"></td>
        <td id="file--LC2056" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2057" class="blob-num js-line-number" data-line-number="2057"></td>
        <td id="file--LC2057" class="blob-code blob-code-inner js-file-line">int main(){</td>
      </tr>
      <tr>
        <td id="file--L2058" class="blob-num js-line-number" data-line-number="2058"></td>
        <td id="file--LC2058" class="blob-code blob-code-inner js-file-line">    int n,m;</td>
      </tr>
      <tr>
        <td id="file--L2059" class="blob-num js-line-number" data-line-number="2059"></td>
        <td id="file--LC2059" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d %d&quot;,&amp;n,&amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2060" class="blob-num js-line-number" data-line-number="2060"></td>
        <td id="file--LC2060" class="blob-code blob-code-inner js-file-line">    while(m--){</td>
      </tr>
      <tr>
        <td id="file--L2061" class="blob-num js-line-number" data-line-number="2061"></td>
        <td id="file--LC2061" class="blob-code blob-code-inner js-file-line">        int v1,v2,c;</td>
      </tr>
      <tr>
        <td id="file--L2062" class="blob-num js-line-number" data-line-number="2062"></td>
        <td id="file--LC2062" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d %d %d&quot;,&amp;v1,&amp;v2,&amp;c);</td>
      </tr>
      <tr>
        <td id="file--L2063" class="blob-num js-line-number" data-line-number="2063"></td>
        <td id="file--LC2063" class="blob-code blob-code-inner js-file-line">        ad[v1].push_back(PII(c,v2));</td>
      </tr>
      <tr>
        <td id="file--L2064" class="blob-num js-line-number" data-line-number="2064"></td>
        <td id="file--LC2064" class="blob-code blob-code-inner js-file-line">        ad[v2].push_back(PII(c,v1));</td>
      </tr>
      <tr>
        <td id="file--L2065" class="blob-num js-line-number" data-line-number="2065"></td>
        <td id="file--LC2065" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2066" class="blob-num js-line-number" data-line-number="2066"></td>
        <td id="file--LC2066" class="blob-code blob-code-inner js-file-line">    printf(&quot;%lld&quot;,prim(n));</td>
      </tr>
      <tr>
        <td id="file--L2067" class="blob-num js-line-number" data-line-number="2067"></td>
        <td id="file--LC2067" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2068" class="blob-num js-line-number" data-line-number="2068"></td>
        <td id="file--LC2068" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2069" class="blob-num js-line-number" data-line-number="2069"></td>
        <td id="file--LC2069" class="blob-code blob-code-inner js-file-line">출처: http://weeklyps.com/entry/프림-알고리즘-Prims-algorithm [weekly ps]</td>
      </tr>
      <tr>
        <td id="file--L2070" class="blob-num js-line-number" data-line-number="2070"></td>
        <td id="file--LC2070" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2071" class="blob-num js-line-number" data-line-number="2071"></td>
        <td id="file--LC2071" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2072" class="blob-num js-line-number" data-line-number="2072"></td>
        <td id="file--LC2072" class="blob-code blob-code-inner js-file-line">■ 완전 탐색</td>
      </tr>
      <tr>
        <td id="file--L2073" class="blob-num js-line-number" data-line-number="2073"></td>
        <td id="file--LC2073" class="blob-code blob-code-inner js-file-line">무식하게 모든 경우를 구해야하는 경우 이렇게 풀어야한다.</td>
      </tr>
      <tr>
        <td id="file--L2074" class="blob-num js-line-number" data-line-number="2074"></td>
        <td id="file--LC2074" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2075" class="blob-num js-line-number" data-line-number="2075"></td>
        <td id="file--LC2075" class="blob-code blob-code-inner js-file-line">■ 깊이 우선 탐색 DFS(Depth First Search)</td>
      </tr>
      <tr>
        <td id="file--L2076" class="blob-num js-line-number" data-line-number="2076"></td>
        <td id="file--LC2076" class="blob-code blob-code-inner js-file-line">그래프 문제, 최단거리 문제에서 사용한다. &lt;-&gt; BFS</td>
      </tr>
      <tr>
        <td id="file--L2077" class="blob-num js-line-number" data-line-number="2077"></td>
        <td id="file--LC2077" class="blob-code blob-code-inner js-file-line">간단하게 이야기하면 갈수있을 때까지 간다입니다.</td>
      </tr>
      <tr>
        <td id="file--L2078" class="blob-num js-line-number" data-line-number="2078"></td>
        <td id="file--LC2078" class="blob-code blob-code-inner js-file-line">즉, 현재 정점과 인접한 간선들을 하나씩 검사하다가, 아직 방문하지 않은 정점으로 향하는 간선이 있다면 그 간선을 무조건 따라 갑니다.</td>
      </tr>
      <tr>
        <td id="file--L2079" class="blob-num js-line-number" data-line-number="2079"></td>
        <td id="file--LC2079" class="blob-code blob-code-inner js-file-line">이 과정에서 더이상 갈 곳이 없는 막힌 정점에 도달하면 포기하고, 마지막에 따라왔던 간선을 따라 뒤로 돌아가면서 탐색이 이루어 집니다.</td>
      </tr>
      <tr>
        <td id="file--L2080" class="blob-num js-line-number" data-line-number="2080"></td>
        <td id="file--LC2080" class="blob-code blob-code-inner js-file-line">깊이 우선 탐색의 경우, 내가 지나간 곳을 계속해서 추적해야 하기 때문에 스택이나/ 재귀함수가 필요.</td>
      </tr>
      <tr>
        <td id="file--L2081" class="blob-num js-line-number" data-line-number="2081"></td>
        <td id="file--LC2081" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2082" class="blob-num js-line-number" data-line-number="2082"></td>
        <td id="file--LC2082" class="blob-code blob-code-inner js-file-line">#include &lt;stdio.h&gt;</td>
      </tr>
      <tr>
        <td id="file--L2083" class="blob-num js-line-number" data-line-number="2083"></td>
        <td id="file--LC2083" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2084" class="blob-num js-line-number" data-line-number="2084"></td>
        <td id="file--LC2084" class="blob-code blob-code-inner js-file-line">int n, min; // 맵의 크기와 최소값을 나타내는 변수</td>
      </tr>
      <tr>
        <td id="file--L2085" class="blob-num js-line-number" data-line-number="2085"></td>
        <td id="file--LC2085" class="blob-code blob-code-inner js-file-line">int map[10][10]; // 맵을 나타내는 2차원 배열</td>
      </tr>
      <tr>
        <td id="file--L2086" class="blob-num js-line-number" data-line-number="2086"></td>
        <td id="file--LC2086" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2087" class="blob-num js-line-number" data-line-number="2087"></td>
        <td id="file--LC2087" class="blob-code blob-code-inner js-file-line">void DFS(int x, int y, int l)</td>
      </tr>
      <tr>
        <td id="file--L2088" class="blob-num js-line-number" data-line-number="2088"></td>
        <td id="file--LC2088" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2089" class="blob-num js-line-number" data-line-number="2089"></td>
        <td id="file--LC2089" class="blob-code blob-code-inner js-file-line">    // 도착 지점에 도착했을 경우</td>
      </tr>
      <tr>
        <td id="file--L2090" class="blob-num js-line-number" data-line-number="2090"></td>
        <td id="file--LC2090" class="blob-code blob-code-inner js-file-line">    if (x == n - 1 &amp;&amp; y == n - 1)</td>
      </tr>
      <tr>
        <td id="file--L2091" class="blob-num js-line-number" data-line-number="2091"></td>
        <td id="file--LC2091" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2092" class="blob-num js-line-number" data-line-number="2092"></td>
        <td id="file--LC2092" class="blob-code blob-code-inner js-file-line">        // 현재 최소값이 l보다 크면, l이 작은 것이므로 l를 최소값으로 지정</td>
      </tr>
      <tr>
        <td id="file--L2093" class="blob-num js-line-number" data-line-number="2093"></td>
        <td id="file--LC2093" class="blob-code blob-code-inner js-file-line">        if (min &gt; l) min = l;</td>
      </tr>
      <tr>
        <td id="file--L2094" class="blob-num js-line-number" data-line-number="2094"></td>
        <td id="file--LC2094" class="blob-code blob-code-inner js-file-line">        return;</td>
      </tr>
      <tr>
        <td id="file--L2095" class="blob-num js-line-number" data-line-number="2095"></td>
        <td id="file--LC2095" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2096" class="blob-num js-line-number" data-line-number="2096"></td>
        <td id="file--LC2096" class="blob-code blob-code-inner js-file-line">    map[y][x] = 0; // 방문했음을 표시하기 위해 0을 대입</td>
      </tr>
      <tr>
        <td id="file--L2097" class="blob-num js-line-number" data-line-number="2097"></td>
        <td id="file--LC2097" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2098" class="blob-num js-line-number" data-line-number="2098"></td>
        <td id="file--LC2098" class="blob-code blob-code-inner js-file-line">    // 위로 이동할 수 있다면 이동!</td>
      </tr>
      <tr>
        <td id="file--L2099" class="blob-num js-line-number" data-line-number="2099"></td>
        <td id="file--LC2099" class="blob-code blob-code-inner js-file-line">    if (y &gt; 0 &amp;&amp; map[y - 1][x] != 0) DFS(x, y - 1, l + 1);</td>
      </tr>
      <tr>
        <td id="file--L2100" class="blob-num js-line-number" data-line-number="2100"></td>
        <td id="file--LC2100" class="blob-code blob-code-inner js-file-line">    // 아래로 이동할 수 있다면 이동!</td>
      </tr>
      <tr>
        <td id="file--L2101" class="blob-num js-line-number" data-line-number="2101"></td>
        <td id="file--LC2101" class="blob-code blob-code-inner js-file-line">    if (y &lt; n - 1 &amp;&amp; map[y + 1][x] != 0) DFS(x, y + 1, l + 1);</td>
      </tr>
      <tr>
        <td id="file--L2102" class="blob-num js-line-number" data-line-number="2102"></td>
        <td id="file--LC2102" class="blob-code blob-code-inner js-file-line">    // 왼쪽으로 이동할 수 있다면 이동!</td>
      </tr>
      <tr>
        <td id="file--L2103" class="blob-num js-line-number" data-line-number="2103"></td>
        <td id="file--LC2103" class="blob-code blob-code-inner js-file-line">    if (x &gt; 0 &amp;&amp; map[y][x - 1] != 0) DFS(x - 1, y, l + 1);</td>
      </tr>
      <tr>
        <td id="file--L2104" class="blob-num js-line-number" data-line-number="2104"></td>
        <td id="file--LC2104" class="blob-code blob-code-inner js-file-line">    // 오른쪽으로 이동할 수 있다면 이동!</td>
      </tr>
      <tr>
        <td id="file--L2105" class="blob-num js-line-number" data-line-number="2105"></td>
        <td id="file--LC2105" class="blob-code blob-code-inner js-file-line">    if (x &lt; n - 1 &amp;&amp; map[y][x + 1] != 0) DFS(x + 1, y, l + 1);</td>
      </tr>
      <tr>
        <td id="file--L2106" class="blob-num js-line-number" data-line-number="2106"></td>
        <td id="file--LC2106" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2107" class="blob-num js-line-number" data-line-number="2107"></td>
        <td id="file--LC2107" class="blob-code blob-code-inner js-file-line">    map[y][x] = 1; // 지나간 자리를 원상태로 되돌리기 위해 1을 대입</td>
      </tr>
      <tr>
        <td id="file--L2108" class="blob-num js-line-number" data-line-number="2108"></td>
        <td id="file--LC2108" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2109" class="blob-num js-line-number" data-line-number="2109"></td>
        <td id="file--LC2109" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2110" class="blob-num js-line-number" data-line-number="2110"></td>
        <td id="file--LC2110" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L2111" class="blob-num js-line-number" data-line-number="2111"></td>
        <td id="file--LC2111" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2112" class="blob-num js-line-number" data-line-number="2112"></td>
        <td id="file--LC2112" class="blob-code blob-code-inner js-file-line">    int i, j;</td>
      </tr>
      <tr>
        <td id="file--L2113" class="blob-num js-line-number" data-line-number="2113"></td>
        <td id="file--LC2113" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2114" class="blob-num js-line-number" data-line-number="2114"></td>
        <td id="file--LC2114" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d&quot;, &amp;n);</td>
      </tr>
      <tr>
        <td id="file--L2115" class="blob-num js-line-number" data-line-number="2115"></td>
        <td id="file--LC2115" class="blob-code blob-code-inner js-file-line">    min = n * n; // 모든 경로를 돌아다녀도 n * n이니, 이를 최소값으로 지정해둔다</td>
      </tr>
      <tr>
        <td id="file--L2116" class="blob-num js-line-number" data-line-number="2116"></td>
        <td id="file--LC2116" class="blob-code blob-code-inner js-file-line">    for (i = 0; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2117" class="blob-num js-line-number" data-line-number="2117"></td>
        <td id="file--LC2117" class="blob-code blob-code-inner js-file-line">        for (j = 0; j &lt; n; j++)</td>
      </tr>
      <tr>
        <td id="file--L2118" class="blob-num js-line-number" data-line-number="2118"></td>
        <td id="file--LC2118" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d&quot;, &amp;map[i][j]);</td>
      </tr>
      <tr>
        <td id="file--L2119" class="blob-num js-line-number" data-line-number="2119"></td>
        <td id="file--LC2119" class="blob-code blob-code-inner js-file-line">    DFS(0, 0, 1); // DFS 시작!</td>
      </tr>
      <tr>
        <td id="file--L2120" class="blob-num js-line-number" data-line-number="2120"></td>
        <td id="file--LC2120" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2121" class="blob-num js-line-number" data-line-number="2121"></td>
        <td id="file--LC2121" class="blob-code blob-code-inner js-file-line">    printf(&quot;최단 거리: %d\n&quot;, min);</td>
      </tr>
      <tr>
        <td id="file--L2122" class="blob-num js-line-number" data-line-number="2122"></td>
        <td id="file--LC2122" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2123" class="blob-num js-line-number" data-line-number="2123"></td>
        <td id="file--LC2123" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2124" class="blob-num js-line-number" data-line-number="2124"></td>
        <td id="file--LC2124" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2125" class="blob-num js-line-number" data-line-number="2125"></td>
        <td id="file--LC2125" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2126" class="blob-num js-line-number" data-line-number="2126"></td>
        <td id="file--LC2126" class="blob-code blob-code-inner js-file-line">5</td>
      </tr>
      <tr>
        <td id="file--L2127" class="blob-num js-line-number" data-line-number="2127"></td>
        <td id="file--LC2127" class="blob-code blob-code-inner js-file-line">1 1 1 1 1</td>
      </tr>
      <tr>
        <td id="file--L2128" class="blob-num js-line-number" data-line-number="2128"></td>
        <td id="file--LC2128" class="blob-code blob-code-inner js-file-line">0 0 0 0 1</td>
      </tr>
      <tr>
        <td id="file--L2129" class="blob-num js-line-number" data-line-number="2129"></td>
        <td id="file--LC2129" class="blob-code blob-code-inner js-file-line">1 1 1 1 1</td>
      </tr>
      <tr>
        <td id="file--L2130" class="blob-num js-line-number" data-line-number="2130"></td>
        <td id="file--LC2130" class="blob-code blob-code-inner js-file-line">1 0 1 0 0</td>
      </tr>
      <tr>
        <td id="file--L2131" class="blob-num js-line-number" data-line-number="2131"></td>
        <td id="file--LC2131" class="blob-code blob-code-inner js-file-line">1 1 1 1 1</td>
      </tr>
      <tr>
        <td id="file--L2132" class="blob-num js-line-number" data-line-number="2132"></td>
        <td id="file--LC2132" class="blob-code blob-code-inner js-file-line">최단 거리: 13</td>
      </tr>
      <tr>
        <td id="file--L2133" class="blob-num js-line-number" data-line-number="2133"></td>
        <td id="file--LC2133" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2134" class="blob-num js-line-number" data-line-number="2134"></td>
        <td id="file--LC2134" class="blob-code blob-code-inner js-file-line">■ 너비 우선 탐색 BFS(Breadth First Search)</td>
      </tr>
      <tr>
        <td id="file--L2135" class="blob-num js-line-number" data-line-number="2135"></td>
        <td id="file--LC2135" class="blob-code blob-code-inner js-file-line">- 그래프 문제 최단거리 문제에서 사용한다. &lt;-&gt; BFS</td>
      </tr>
      <tr>
        <td id="file--L2136" class="blob-num js-line-number" data-line-number="2136"></td>
        <td id="file--LC2136" class="blob-code blob-code-inner js-file-line">이 너비 우선 탐색은 먼저 가까운 정점부터 시작하여 가장 먼 정점까지 방문하기 시작합니다.</td>
      </tr>
      <tr>
        <td id="file--L2137" class="blob-num js-line-number" data-line-number="2137"></td>
        <td id="file--LC2137" class="blob-code blob-code-inner js-file-line">너비 우선 탐색은 방문한 정점의 위치를 기억하기 위해 큐가 필요.</td>
      </tr>
      <tr>
        <td id="file--L2138" class="blob-num js-line-number" data-line-number="2138"></td>
        <td id="file--LC2138" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2139" class="blob-num js-line-number" data-line-number="2139"></td>
        <td id="file--LC2139" class="blob-code blob-code-inner js-file-line">#include &lt;stdio.h&gt;</td>
      </tr>
      <tr>
        <td id="file--L2140" class="blob-num js-line-number" data-line-number="2140"></td>
        <td id="file--LC2140" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2141" class="blob-num js-line-number" data-line-number="2141"></td>
        <td id="file--LC2141" class="blob-code blob-code-inner js-file-line">int n, cnt; // 맵의 크기와 카운트 변수</td>
      </tr>
      <tr>
        <td id="file--L2142" class="blob-num js-line-number" data-line-number="2142"></td>
        <td id="file--LC2142" class="blob-code blob-code-inner js-file-line">int map[10][10]; // 맵을 나타내는 2차원 배열</td>
      </tr>
      <tr>
        <td id="file--L2143" class="blob-num js-line-number" data-line-number="2143"></td>
        <td id="file--LC2143" class="blob-code blob-code-inner js-file-line">int x[100], y[100], l[100]; // 좌표와 길이를 담을 배열</td>
      </tr>
      <tr>
        <td id="file--L2144" class="blob-num js-line-number" data-line-number="2144"></td>
        <td id="file--LC2144" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2145" class="blob-num js-line-number" data-line-number="2145"></td>
        <td id="file--LC2145" class="blob-code blob-code-inner js-file-line">// 큐에 좌표 정보와 길이를 삽입하는 함수</td>
      </tr>
      <tr>
        <td id="file--L2146" class="blob-num js-line-number" data-line-number="2146"></td>
        <td id="file--LC2146" class="blob-code blob-code-inner js-file-line">void enqueue(int _x, int _y, int _l)</td>
      </tr>
      <tr>
        <td id="file--L2147" class="blob-num js-line-number" data-line-number="2147"></td>
        <td id="file--LC2147" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2148" class="blob-num js-line-number" data-line-number="2148"></td>
        <td id="file--LC2148" class="blob-code blob-code-inner js-file-line">    x[cnt] = _x;</td>
      </tr>
      <tr>
        <td id="file--L2149" class="blob-num js-line-number" data-line-number="2149"></td>
        <td id="file--LC2149" class="blob-code blob-code-inner js-file-line">    y[cnt] = _y;</td>
      </tr>
      <tr>
        <td id="file--L2150" class="blob-num js-line-number" data-line-number="2150"></td>
        <td id="file--LC2150" class="blob-code blob-code-inner js-file-line">    l[cnt] = _l;</td>
      </tr>
      <tr>
        <td id="file--L2151" class="blob-num js-line-number" data-line-number="2151"></td>
        <td id="file--LC2151" class="blob-code blob-code-inner js-file-line">    cnt++;</td>
      </tr>
      <tr>
        <td id="file--L2152" class="blob-num js-line-number" data-line-number="2152"></td>
        <td id="file--LC2152" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2153" class="blob-num js-line-number" data-line-number="2153"></td>
        <td id="file--LC2153" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2154" class="blob-num js-line-number" data-line-number="2154"></td>
        <td id="file--LC2154" class="blob-code blob-code-inner js-file-line">void BFS(int _x, int _y)</td>
      </tr>
      <tr>
        <td id="file--L2155" class="blob-num js-line-number" data-line-number="2155"></td>
        <td id="file--LC2155" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2156" class="blob-num js-line-number" data-line-number="2156"></td>
        <td id="file--LC2156" class="blob-code blob-code-inner js-file-line">    int pos = 0;</td>
      </tr>
      <tr>
        <td id="file--L2157" class="blob-num js-line-number" data-line-number="2157"></td>
        <td id="file--LC2157" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2158" class="blob-num js-line-number" data-line-number="2158"></td>
        <td id="file--LC2158" class="blob-code blob-code-inner js-file-line">    // 시작점의 좌표 정보와 길이를 큐에 삽입한다</td>
      </tr>
      <tr>
        <td id="file--L2159" class="blob-num js-line-number" data-line-number="2159"></td>
        <td id="file--LC2159" class="blob-code blob-code-inner js-file-line">    enqueue(_x, _y, 1);</td>
      </tr>
      <tr>
        <td id="file--L2160" class="blob-num js-line-number" data-line-number="2160"></td>
        <td id="file--LC2160" class="blob-code blob-code-inner js-file-line">    // 더 이상 방문할 지점이 없거나, 도착 지점에 도착하면 루프를 탈출한다</td>
      </tr>
      <tr>
        <td id="file--L2161" class="blob-num js-line-number" data-line-number="2161"></td>
        <td id="file--LC2161" class="blob-code blob-code-inner js-file-line">    while (pos &lt; cnt &amp;&amp; (x[pos] != n - 1 || y[pos] != n - 1))</td>
      </tr>
      <tr>
        <td id="file--L2162" class="blob-num js-line-number" data-line-number="2162"></td>
        <td id="file--LC2162" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2163" class="blob-num js-line-number" data-line-number="2163"></td>
        <td id="file--LC2163" class="blob-code blob-code-inner js-file-line">        // 두 번 방문하게 하면 안되므로, 이미 지나갔다는 표시를 해둔다</td>
      </tr>
      <tr>
        <td id="file--L2164" class="blob-num js-line-number" data-line-number="2164"></td>
        <td id="file--LC2164" class="blob-code blob-code-inner js-file-line">        map[y[pos]][x[pos]] = 0;</td>
      </tr>
      <tr>
        <td id="file--L2165" class="blob-num js-line-number" data-line-number="2165"></td>
        <td id="file--LC2165" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2166" class="blob-num js-line-number" data-line-number="2166"></td>
        <td id="file--LC2166" class="blob-code blob-code-inner js-file-line">        // 위로 갈 수 있다면, 위 지점의 좌표 정보와 길이를 큐에 삽입한다</td>
      </tr>
      <tr>
        <td id="file--L2167" class="blob-num js-line-number" data-line-number="2167"></td>
        <td id="file--LC2167" class="blob-code blob-code-inner js-file-line">        if (y[pos] &gt; 0 &amp;&amp; map[y[pos] - 1][x[pos]] == 1)</td>
      </tr>
      <tr>
        <td id="file--L2168" class="blob-num js-line-number" data-line-number="2168"></td>
        <td id="file--LC2168" class="blob-code blob-code-inner js-file-line">            enqueue(x[pos], y[pos] - 1, l[pos] + 1);</td>
      </tr>
      <tr>
        <td id="file--L2169" class="blob-num js-line-number" data-line-number="2169"></td>
        <td id="file--LC2169" class="blob-code blob-code-inner js-file-line">        // 아래로 갈 수 있다면, 아래 지점의 좌표 정보와 길이를 큐에 삽입한다</td>
      </tr>
      <tr>
        <td id="file--L2170" class="blob-num js-line-number" data-line-number="2170"></td>
        <td id="file--LC2170" class="blob-code blob-code-inner js-file-line">        if (y[pos] &lt; n - 1 &amp;&amp; map[y[pos] + 1][x[pos]] == 1)</td>
      </tr>
      <tr>
        <td id="file--L2171" class="blob-num js-line-number" data-line-number="2171"></td>
        <td id="file--LC2171" class="blob-code blob-code-inner js-file-line">            enqueue(x[pos], y[pos] + 1, l[pos] + 1);</td>
      </tr>
      <tr>
        <td id="file--L2172" class="blob-num js-line-number" data-line-number="2172"></td>
        <td id="file--LC2172" class="blob-code blob-code-inner js-file-line">        // 왼쪽으로 갈 수 있다면, 왼쪽 지점의 좌표 정보와 길이를 큐에 삽입한다</td>
      </tr>
      <tr>
        <td id="file--L2173" class="blob-num js-line-number" data-line-number="2173"></td>
        <td id="file--LC2173" class="blob-code blob-code-inner js-file-line">        if (x[pos] &gt; 0 &amp;&amp; map[y[pos]][x[pos] - 1] == 1)</td>
      </tr>
      <tr>
        <td id="file--L2174" class="blob-num js-line-number" data-line-number="2174"></td>
        <td id="file--LC2174" class="blob-code blob-code-inner js-file-line">            enqueue(x[pos] - 1, y[pos], l[pos] + 1);</td>
      </tr>
      <tr>
        <td id="file--L2175" class="blob-num js-line-number" data-line-number="2175"></td>
        <td id="file--LC2175" class="blob-code blob-code-inner js-file-line">        // 오른쪽로 갈 수 있다면, 오른쪽 지점의 좌표 정보와 길이를 큐에 삽입한다</td>
      </tr>
      <tr>
        <td id="file--L2176" class="blob-num js-line-number" data-line-number="2176"></td>
        <td id="file--LC2176" class="blob-code blob-code-inner js-file-line">        if (x[pos] &lt; n - 1 &amp;&amp; map[y[pos]][x[pos] + 1] == 1)</td>
      </tr>
      <tr>
        <td id="file--L2177" class="blob-num js-line-number" data-line-number="2177"></td>
        <td id="file--LC2177" class="blob-code blob-code-inner js-file-line">            enqueue(x[pos] + 1, y[pos], l[pos] + 1);</td>
      </tr>
      <tr>
        <td id="file--L2178" class="blob-num js-line-number" data-line-number="2178"></td>
        <td id="file--LC2178" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2179" class="blob-num js-line-number" data-line-number="2179"></td>
        <td id="file--LC2179" class="blob-code blob-code-inner js-file-line">        // 큐의 다음 순서의 지점을 방문한다</td>
      </tr>
      <tr>
        <td id="file--L2180" class="blob-num js-line-number" data-line-number="2180"></td>
        <td id="file--LC2180" class="blob-code blob-code-inner js-file-line">        pos++;</td>
      </tr>
      <tr>
        <td id="file--L2181" class="blob-num js-line-number" data-line-number="2181"></td>
        <td id="file--LC2181" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2182" class="blob-num js-line-number" data-line-number="2182"></td>
        <td id="file--LC2182" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2183" class="blob-num js-line-number" data-line-number="2183"></td>
        <td id="file--LC2183" class="blob-code blob-code-inner js-file-line">    // cnt가 pos보다 크다면, 도착 지점에 무사히 도착한 것이라고 말할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2184" class="blob-num js-line-number" data-line-number="2184"></td>
        <td id="file--LC2184" class="blob-code blob-code-inner js-file-line">    // 위의 반복문은 도착점에 도착하게 되면 루프를 바로 빠져나오기 때문에,</td>
      </tr>
      <tr>
        <td id="file--L2185" class="blob-num js-line-number" data-line-number="2185"></td>
        <td id="file--LC2185" class="blob-code blob-code-inner js-file-line">    // 길이를 삽입하는 큐의 마지막 요소가 최단 경로의 길이라고 할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2186" class="blob-num js-line-number" data-line-number="2186"></td>
        <td id="file--LC2186" class="blob-code blob-code-inner js-file-line">    if (pos &lt; cnt)</td>
      </tr>
      <tr>
        <td id="file--L2187" class="blob-num js-line-number" data-line-number="2187"></td>
        <td id="file--LC2187" class="blob-code blob-code-inner js-file-line">        printf(&quot;최단 경로 길이: %d\n&quot;, l[pos]);</td>
      </tr>
      <tr>
        <td id="file--L2188" class="blob-num js-line-number" data-line-number="2188"></td>
        <td id="file--LC2188" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2189" class="blob-num js-line-number" data-line-number="2189"></td>
        <td id="file--LC2189" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2190" class="blob-num js-line-number" data-line-number="2190"></td>
        <td id="file--LC2190" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L2191" class="blob-num js-line-number" data-line-number="2191"></td>
        <td id="file--LC2191" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2192" class="blob-num js-line-number" data-line-number="2192"></td>
        <td id="file--LC2192" class="blob-code blob-code-inner js-file-line">    int i, j;</td>
      </tr>
      <tr>
        <td id="file--L2193" class="blob-num js-line-number" data-line-number="2193"></td>
        <td id="file--LC2193" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2194" class="blob-num js-line-number" data-line-number="2194"></td>
        <td id="file--LC2194" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d&quot;, &amp;n);</td>
      </tr>
      <tr>
        <td id="file--L2195" class="blob-num js-line-number" data-line-number="2195"></td>
        <td id="file--LC2195" class="blob-code blob-code-inner js-file-line">    min = n * n;</td>
      </tr>
      <tr>
        <td id="file--L2196" class="blob-num js-line-number" data-line-number="2196"></td>
        <td id="file--LC2196" class="blob-code blob-code-inner js-file-line">    for (i = 0; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2197" class="blob-num js-line-number" data-line-number="2197"></td>
        <td id="file--LC2197" class="blob-code blob-code-inner js-file-line">        for (j = 0; j &lt; n; j++)</td>
      </tr>
      <tr>
        <td id="file--L2198" class="blob-num js-line-number" data-line-number="2198"></td>
        <td id="file--LC2198" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d&quot;, &amp;map[i][j]);</td>
      </tr>
      <tr>
        <td id="file--L2199" class="blob-num js-line-number" data-line-number="2199"></td>
        <td id="file--LC2199" class="blob-code blob-code-inner js-file-line">    BFS(0, 0); // BFS 시작!</td>
      </tr>
      <tr>
        <td id="file--L2200" class="blob-num js-line-number" data-line-number="2200"></td>
        <td id="file--LC2200" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2201" class="blob-num js-line-number" data-line-number="2201"></td>
        <td id="file--LC2201" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2202" class="blob-num js-line-number" data-line-number="2202"></td>
        <td id="file--LC2202" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2203" class="blob-num js-line-number" data-line-number="2203"></td>
        <td id="file--LC2203" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2204" class="blob-num js-line-number" data-line-number="2204"></td>
        <td id="file--LC2204" class="blob-code blob-code-inner js-file-line">■ 그래프 문제(Graph)</td>
      </tr>
      <tr>
        <td id="file--L2205" class="blob-num js-line-number" data-line-number="2205"></td>
        <td id="file--LC2205" class="blob-code blob-code-inner js-file-line">정점(Vertex)과 간선(Edge)로 이뤄진 문제 edge 수에 따라 sparse graph(희귀 그래프), dense graph(밀집 그래프).</td>
      </tr>
      <tr>
        <td id="file--L2206" class="blob-num js-line-number" data-line-number="2206"></td>
        <td id="file--LC2206" class="blob-code blob-code-inner js-file-line">종류- 무방향(무향) = 양방향 1-&gt;2 2-&gt;1, 방향(유향) 1-&gt;2 문제가 있다.</td>
      </tr>
      <tr>
        <td id="file--L2207" class="blob-num js-line-number" data-line-number="2207"></td>
        <td id="file--LC2207" class="blob-code blob-code-inner js-file-line">구현- 2가지 (인접행렬-밀집 그래프에 유리), (인접리스트-희귀 그래프에 유리)</td>
      </tr>
      <tr>
        <td id="file--L2208" class="blob-num js-line-number" data-line-number="2208"></td>
        <td id="file--LC2208" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2209" class="blob-num js-line-number" data-line-number="2209"></td>
        <td id="file--LC2209" class="blob-code blob-code-inner js-file-line">양방향을 표현하기 위해 vector&lt;vector&lt;int&gt;&gt; a; 이런 2차원 백터나 배열을 사용한다. 1-&gt;2, 2-&gt;1 케이스 둘다 받음</td>
      </tr>
      <tr>
        <td id="file--L2210" class="blob-num js-line-number" data-line-number="2210"></td>
        <td id="file--LC2210" class="blob-code blob-code-inner js-file-line">가중치(Weighted)가 없는 경우 1로 표현하고 있으면 적절하게 그 백터에 값에 넣으면 된다.</td>
      </tr>
      <tr>
        <td id="file--L2211" class="blob-num js-line-number" data-line-number="2211"></td>
        <td id="file--LC2211" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2212" class="blob-num js-line-number" data-line-number="2212"></td>
        <td id="file--LC2212" class="blob-code blob-code-inner js-file-line">그래프가 disconnected거나 방향그래프일 경우 visited가 있는 경우 그 노드에서 시작하는 식(while문)으로 짜면된다.</td>
      </tr>
      <tr>
        <td id="file--L2213" class="blob-num js-line-number" data-line-number="2213"></td>
        <td id="file--LC2213" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2214" class="blob-num js-line-number" data-line-number="2214"></td>
        <td id="file--LC2214" class="blob-code blob-code-inner js-file-line">■ DAG(Directed Acyclic Graph)</td>
      </tr>
      <tr>
        <td id="file--L2215" class="blob-num js-line-number" data-line-number="2215"></td>
        <td id="file--LC2215" class="blob-code blob-code-inner js-file-line">방향 사이클(Directed cycle)이 없는 방향 그래프.</td>
      </tr>
      <tr>
        <td id="file--L2216" class="blob-num js-line-number" data-line-number="2216"></td>
        <td id="file--LC2216" class="blob-code blob-code-inner js-file-line">우선순위가 있는 그래프라고 보기도 한다.</td>
      </tr>
      <tr>
        <td id="file--L2217" class="blob-num js-line-number" data-line-number="2217"></td>
        <td id="file--LC2217" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2218" class="blob-num js-line-number" data-line-number="2218"></td>
        <td id="file--LC2218" class="blob-code blob-code-inner js-file-line">■ 그래프의 인접행렬(Adjacency Matrix)</td>
      </tr>
      <tr>
        <td id="file--L2219" class="blob-num js-line-number" data-line-number="2219"></td>
        <td id="file--LC2219" class="blob-code blob-code-inner js-file-line">인접행렬은 정점(V)이 n개일 때 N*N 이차원 배열로 나타낼 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2220" class="blob-num js-line-number" data-line-number="2220"></td>
        <td id="file--LC2220" class="blob-code blob-code-inner js-file-line">대각선 대칭이며 그래서 쓸대없는 공간이 있다. 가중치로 1이 아닌 다른 수를 적을 수도 있다. (0, 1 가중치 없으면)</td>
      </tr>
      <tr>
        <td id="file--L2221" class="blob-num js-line-number" data-line-number="2221"></td>
        <td id="file--LC2221" class="blob-code blob-code-inner js-file-line">ad[?] 라고 표현한 ad는 인접행렬을 뜻함. vt = vertex(꼭지점,정점) edge = 선</td>
      </tr>
      <tr>
        <td id="file--L2222" class="blob-num js-line-number" data-line-number="2222"></td>
        <td id="file--LC2222" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2223" class="blob-num js-line-number" data-line-number="2223"></td>
        <td id="file--LC2223" class="blob-code blob-code-inner js-file-line">■ 위상정렬(Topological Sort)</td>
      </tr>
      <tr>
        <td id="file--L2224" class="blob-num js-line-number" data-line-number="2224"></td>
        <td id="file--LC2224" class="blob-code blob-code-inner js-file-line">순서대로 해야하는 과정들이 있는데 그러한 것을 알고리즘화 시키고 프로그래밍화 시킨 것이 위상 정렬이다.</td>
      </tr>
      <tr>
        <td id="file--L2225" class="blob-num js-line-number" data-line-number="2225"></td>
        <td id="file--LC2225" class="blob-code blob-code-inner js-file-line">A-&gt;C로 가기위해 단계적으로 치루어야 할 것이 있다.</td>
      </tr>
      <tr>
        <td id="file--L2226" class="blob-num js-line-number" data-line-number="2226"></td>
        <td id="file--LC2226" class="blob-code blob-code-inner js-file-line">A를 수행해야 B, D를 할 수 있고, C는 B, E가 모두 수행이 완료되야 C를 수행할 수 있게 된다.</td>
      </tr>
      <tr>
        <td id="file--L2227" class="blob-num js-line-number" data-line-number="2227"></td>
        <td id="file--LC2227" class="blob-code blob-code-inner js-file-line">이러한 위상 정렬에서는 항상 그래프를 가로로 나열하였을 때, 왼쪽에서 오른쪽으로 모두 방향이 향할 수 있어야 하는데,</td>
      </tr>
      <tr>
        <td id="file--L2228" class="blob-num js-line-number" data-line-number="2228"></td>
        <td id="file--LC2228" class="blob-code blob-code-inner js-file-line">사이클을 이루는 경우에는 위상 정렬을 이룰 수 없게된다.</td>
      </tr>
      <tr>
        <td id="file--L2229" class="blob-num js-line-number" data-line-number="2229"></td>
        <td id="file--LC2229" class="blob-code blob-code-inner js-file-line">따라서 위상 정렬이 가능하다면 그 그래프는 DAG(Directed Acyclic Graph)의 형태를 띄어야 한다.</td>
      </tr>
      <tr>
        <td id="file--L2230" class="blob-num js-line-number" data-line-number="2230"></td>
        <td id="file--LC2230" class="blob-code blob-code-inner js-file-line">이 말은, 방향이 있는 그래프이고, 사이클이 존재해서는 안된다는 의미이다.</td>
      </tr>
      <tr>
        <td id="file--L2231" class="blob-num js-line-number" data-line-number="2231"></td>
        <td id="file--LC2231" class="blob-code blob-code-inner js-file-line">어떤 정해진 순서의 규칙의 조합을 구하는 문제에서 사용할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2232" class="blob-num js-line-number" data-line-number="2232"></td>
        <td id="file--LC2232" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2233" class="blob-num js-line-number" data-line-number="2233"></td>
        <td id="file--LC2233" class="blob-code blob-code-inner js-file-line">1. 이 그래프가 사이클이 있는지 확인한다.</td>
      </tr>
      <tr>
        <td id="file--L2234" class="blob-num js-line-number" data-line-number="2234"></td>
        <td id="file--LC2234" class="blob-code blob-code-inner js-file-line">(보통의 경우 문제를 해결하는 경우에는 이 과정이 있다면 위상 정렬 자체를 시도하지 않을 것이지만) </td>
      </tr>
      <tr>
        <td id="file--L2235" class="blob-num js-line-number" data-line-number="2235"></td>
        <td id="file--LC2235" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2236" class="blob-num js-line-number" data-line-number="2236"></td>
        <td id="file--LC2236" class="blob-code blob-code-inner js-file-line">2. 현재 정점에 들어오는 간선이 없다면 BFS라면 큐에 담아준다.</td>
      </tr>
      <tr>
        <td id="file--L2237" class="blob-num js-line-number" data-line-number="2237"></td>
        <td id="file--LC2237" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2238" class="blob-num js-line-number" data-line-number="2238"></td>
        <td id="file--LC2238" class="blob-code blob-code-inner js-file-line">3. 큐에서 front원소를 빼고 front에 연결되어있는 정점들 간의 간선을 모두 삭제해준다. </td>
      </tr>
      <tr>
        <td id="file--L2239" class="blob-num js-line-number" data-line-number="2239"></td>
        <td id="file--LC2239" class="blob-code blob-code-inner js-file-line">이때 해당하는 다음 정점에 들어오는 간선이 없다면 큐에 담아준다.</td>
      </tr>
      <tr>
        <td id="file--L2240" class="blob-num js-line-number" data-line-number="2240"></td>
        <td id="file--LC2240" class="blob-code blob-code-inner js-file-line">이 과정을 정점의 개수만큼 반복한다.</td>
      </tr>
      <tr>
        <td id="file--L2241" class="blob-num js-line-number" data-line-number="2241"></td>
        <td id="file--LC2241" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2242" class="blob-num js-line-number" data-line-number="2242"></td>
        <td id="file--LC2242" class="blob-code blob-code-inner js-file-line">4. 결국 이 과정을 반복하는 동안 큐에서 빠지는 front 순서대로가 위상 정렬의 결과이다.</td>
      </tr>
      <tr>
        <td id="file--L2243" class="blob-num js-line-number" data-line-number="2243"></td>
        <td id="file--LC2243" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2244" class="blob-num js-line-number" data-line-number="2244"></td>
        <td id="file--LC2244" class="blob-code blob-code-inner js-file-line">[BFS로 위상정렬]</td>
      </tr>
      <tr>
        <td id="file--L2245" class="blob-num js-line-number" data-line-number="2245"></td>
        <td id="file--LC2245" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2246" class="blob-num js-line-number" data-line-number="2246"></td>
        <td id="file--LC2246" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L2247" class="blob-num js-line-number" data-line-number="2247"></td>
        <td id="file--LC2247" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2248" class="blob-num js-line-number" data-line-number="2248"></td>
        <td id="file--LC2248" class="blob-code blob-code-inner js-file-line">#include &lt;queue&gt;</td>
      </tr>
      <tr>
        <td id="file--L2249" class="blob-num js-line-number" data-line-number="2249"></td>
        <td id="file--LC2249" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2250" class="blob-num js-line-number" data-line-number="2250"></td>
        <td id="file--LC2250" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2251" class="blob-num js-line-number" data-line-number="2251"></td>
        <td id="file--LC2251" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2252" class="blob-num js-line-number" data-line-number="2252"></td>
        <td id="file--LC2252" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; vc[1001]; // 그래프 형성을 위한 벡터</td>
      </tr>
      <tr>
        <td id="file--L2253" class="blob-num js-line-number" data-line-number="2253"></td>
        <td id="file--LC2253" class="blob-code blob-code-inner js-file-line">int line[1001]; // 자신에게 들어오는 간선들의 수</td>
      </tr>
      <tr>
        <td id="file--L2254" class="blob-num js-line-number" data-line-number="2254"></td>
        <td id="file--LC2254" class="blob-code blob-code-inner js-file-line">int result[1001]; // 최종 위상 정렬 결과 값</td>
      </tr>
      <tr>
        <td id="file--L2255" class="blob-num js-line-number" data-line-number="2255"></td>
        <td id="file--LC2255" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2256" class="blob-num js-line-number" data-line-number="2256"></td>
        <td id="file--LC2256" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L2257" class="blob-num js-line-number" data-line-number="2257"></td>
        <td id="file--LC2257" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2258" class="blob-num js-line-number" data-line-number="2258"></td>
        <td id="file--LC2258" class="blob-code blob-code-inner js-file-line">    int n, m;</td>
      </tr>
      <tr>
        <td id="file--L2259" class="blob-num js-line-number" data-line-number="2259"></td>
        <td id="file--LC2259" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2260" class="blob-num js-line-number" data-line-number="2260"></td>
        <td id="file--LC2260" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2261" class="blob-num js-line-number" data-line-number="2261"></td>
        <td id="file--LC2261" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2262" class="blob-num js-line-number" data-line-number="2262"></td>
        <td id="file--LC2262" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; m; i++)</td>
      </tr>
      <tr>
        <td id="file--L2263" class="blob-num js-line-number" data-line-number="2263"></td>
        <td id="file--LC2263" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2264" class="blob-num js-line-number" data-line-number="2264"></td>
        <td id="file--LC2264" class="blob-code blob-code-inner js-file-line">        int num, cur, prev;</td>
      </tr>
      <tr>
        <td id="file--L2265" class="blob-num js-line-number" data-line-number="2265"></td>
        <td id="file--LC2265" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2266" class="blob-num js-line-number" data-line-number="2266"></td>
        <td id="file--LC2266" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d&quot;, &amp;num);</td>
      </tr>
      <tr>
        <td id="file--L2267" class="blob-num js-line-number" data-line-number="2267"></td>
        <td id="file--LC2267" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2268" class="blob-num js-line-number" data-line-number="2268"></td>
        <td id="file--LC2268" class="blob-code blob-code-inner js-file-line">        // 피디가 선호하는 순서가 없다면</td>
      </tr>
      <tr>
        <td id="file--L2269" class="blob-num js-line-number" data-line-number="2269"></td>
        <td id="file--LC2269" class="blob-code blob-code-inner js-file-line">        if (num == 0)</td>
      </tr>
      <tr>
        <td id="file--L2270" class="blob-num js-line-number" data-line-number="2270"></td>
        <td id="file--LC2270" class="blob-code blob-code-inner js-file-line">            continue;</td>
      </tr>
      <tr>
        <td id="file--L2271" class="blob-num js-line-number" data-line-number="2271"></td>
        <td id="file--LC2271" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2272" class="blob-num js-line-number" data-line-number="2272"></td>
        <td id="file--LC2272" class="blob-code blob-code-inner js-file-line">        // prev를 먼저 담아주고 num - 1만큼 반복한다.</td>
      </tr>
      <tr>
        <td id="file--L2273" class="blob-num js-line-number" data-line-number="2273"></td>
        <td id="file--LC2273" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d&quot;, &amp;prev);</td>
      </tr>
      <tr>
        <td id="file--L2274" class="blob-num js-line-number" data-line-number="2274"></td>
        <td id="file--LC2274" class="blob-code blob-code-inner js-file-line">        for (int j = 0; j &lt; num - 1; j++)</td>
      </tr>
      <tr>
        <td id="file--L2275" class="blob-num js-line-number" data-line-number="2275"></td>
        <td id="file--LC2275" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2276" class="blob-num js-line-number" data-line-number="2276"></td>
        <td id="file--LC2276" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d&quot;, &amp;cur);</td>
      </tr>
      <tr>
        <td id="file--L2277" class="blob-num js-line-number" data-line-number="2277"></td>
        <td id="file--LC2277" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2278" class="blob-num js-line-number" data-line-number="2278"></td>
        <td id="file--LC2278" class="blob-code blob-code-inner js-file-line">            // cur은 prev에 의해 들어오는 간선이 생기므로 +1</td>
      </tr>
      <tr>
        <td id="file--L2279" class="blob-num js-line-number" data-line-number="2279"></td>
        <td id="file--LC2279" class="blob-code blob-code-inner js-file-line">            line[cur]++;</td>
      </tr>
      <tr>
        <td id="file--L2280" class="blob-num js-line-number" data-line-number="2280"></td>
        <td id="file--LC2280" class="blob-code blob-code-inner js-file-line">            // prev -&gt; cur의 그래프가 생기는 과정</td>
      </tr>
      <tr>
        <td id="file--L2281" class="blob-num js-line-number" data-line-number="2281"></td>
        <td id="file--LC2281" class="blob-code blob-code-inner js-file-line">            vc[prev].push_back(cur);</td>
      </tr>
      <tr>
        <td id="file--L2282" class="blob-num js-line-number" data-line-number="2282"></td>
        <td id="file--LC2282" class="blob-code blob-code-inner js-file-line">            // cur이 다음 for문에서 prev가 된다.</td>
      </tr>
      <tr>
        <td id="file--L2283" class="blob-num js-line-number" data-line-number="2283"></td>
        <td id="file--LC2283" class="blob-code blob-code-inner js-file-line">            prev = cur;</td>
      </tr>
      <tr>
        <td id="file--L2284" class="blob-num js-line-number" data-line-number="2284"></td>
        <td id="file--LC2284" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2285" class="blob-num js-line-number" data-line-number="2285"></td>
        <td id="file--LC2285" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2286" class="blob-num js-line-number" data-line-number="2286"></td>
        <td id="file--LC2286" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2287" class="blob-num js-line-number" data-line-number="2287"></td>
        <td id="file--LC2287" class="blob-code blob-code-inner js-file-line">    queue&lt;int&gt; q;</td>
      </tr>
      <tr>
        <td id="file--L2288" class="blob-num js-line-number" data-line-number="2288"></td>
        <td id="file--LC2288" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2289" class="blob-num js-line-number" data-line-number="2289"></td>
        <td id="file--LC2289" class="blob-code blob-code-inner js-file-line">    // 들어오는 간선이 없는 정점은 모두 queue에 담아준다.</td>
      </tr>
      <tr>
        <td id="file--L2290" class="blob-num js-line-number" data-line-number="2290"></td>
        <td id="file--LC2290" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2291" class="blob-num js-line-number" data-line-number="2291"></td>
        <td id="file--LC2291" class="blob-code blob-code-inner js-file-line">        if (line[i] == 0)</td>
      </tr>
      <tr>
        <td id="file--L2292" class="blob-num js-line-number" data-line-number="2292"></td>
        <td id="file--LC2292" class="blob-code blob-code-inner js-file-line">            q.push(i);</td>
      </tr>
      <tr>
        <td id="file--L2293" class="blob-num js-line-number" data-line-number="2293"></td>
        <td id="file--LC2293" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2294" class="blob-num js-line-number" data-line-number="2294"></td>
        <td id="file--LC2294" class="blob-code blob-code-inner js-file-line">    // 위상 정렬</td>
      </tr>
      <tr>
        <td id="file--L2295" class="blob-num js-line-number" data-line-number="2295"></td>
        <td id="file--LC2295" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2296" class="blob-num js-line-number" data-line-number="2296"></td>
        <td id="file--LC2296" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2297" class="blob-num js-line-number" data-line-number="2297"></td>
        <td id="file--LC2297" class="blob-code blob-code-inner js-file-line">        // 위상 정렬 도중에 큐가 비게 된다면 위상 정렬을 할 수 없다.</td>
      </tr>
      <tr>
        <td id="file--L2298" class="blob-num js-line-number" data-line-number="2298"></td>
        <td id="file--LC2298" class="blob-code blob-code-inner js-file-line">        if (q.empty())</td>
      </tr>
      <tr>
        <td id="file--L2299" class="blob-num js-line-number" data-line-number="2299"></td>
        <td id="file--LC2299" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2300" class="blob-num js-line-number" data-line-number="2300"></td>
        <td id="file--LC2300" class="blob-code blob-code-inner js-file-line">            printf(&quot;0&quot;);</td>
      </tr>
      <tr>
        <td id="file--L2301" class="blob-num js-line-number" data-line-number="2301"></td>
        <td id="file--LC2301" class="blob-code blob-code-inner js-file-line">            return 0;</td>
      </tr>
      <tr>
        <td id="file--L2302" class="blob-num js-line-number" data-line-number="2302"></td>
        <td id="file--LC2302" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2303" class="blob-num js-line-number" data-line-number="2303"></td>
        <td id="file--LC2303" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2304" class="blob-num js-line-number" data-line-number="2304"></td>
        <td id="file--LC2304" class="blob-code blob-code-inner js-file-line">        // 큐의 front를 cur로 받아준다.</td>
      </tr>
      <tr>
        <td id="file--L2305" class="blob-num js-line-number" data-line-number="2305"></td>
        <td id="file--LC2305" class="blob-code blob-code-inner js-file-line">        int cur = q.front();</td>
      </tr>
      <tr>
        <td id="file--L2306" class="blob-num js-line-number" data-line-number="2306"></td>
        <td id="file--LC2306" class="blob-code blob-code-inner js-file-line">        q.pop();</td>
      </tr>
      <tr>
        <td id="file--L2307" class="blob-num js-line-number" data-line-number="2307"></td>
        <td id="file--LC2307" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2308" class="blob-num js-line-number" data-line-number="2308"></td>
        <td id="file--LC2308" class="blob-code blob-code-inner js-file-line">        // 큐에서 front 순서대로가 위상 정렬의 결과 값이다.</td>
      </tr>
      <tr>
        <td id="file--L2309" class="blob-num js-line-number" data-line-number="2309"></td>
        <td id="file--LC2309" class="blob-code blob-code-inner js-file-line">        result[i] = cur;</td>
      </tr>
      <tr>
        <td id="file--L2310" class="blob-num js-line-number" data-line-number="2310"></td>
        <td id="file--LC2310" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2311" class="blob-num js-line-number" data-line-number="2311"></td>
        <td id="file--LC2311" class="blob-code blob-code-inner js-file-line">        // cur-&gt;next로 연결되는 노드들에 대해 아래 코드를 수행한다. </td>
      </tr>
      <tr>
        <td id="file--L2312" class="blob-num js-line-number" data-line-number="2312"></td>
        <td id="file--LC2312" class="blob-code blob-code-inner js-file-line">        for (int j = 0; j &lt; vc[cur].size(); j++)</td>
      </tr>
      <tr>
        <td id="file--L2313" class="blob-num js-line-number" data-line-number="2313"></td>
        <td id="file--LC2313" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2314" class="blob-num js-line-number" data-line-number="2314"></td>
        <td id="file--LC2314" class="blob-code blob-code-inner js-file-line">            int next = vc[cur][j];</td>
      </tr>
      <tr>
        <td id="file--L2315" class="blob-num js-line-number" data-line-number="2315"></td>
        <td id="file--LC2315" class="blob-code blob-code-inner js-file-line">            // cur-&gt;next의 간선을 지우는 과정, 이때 간선의 수가 0이 되면 큐에 담아준다.</td>
      </tr>
      <tr>
        <td id="file--L2316" class="blob-num js-line-number" data-line-number="2316"></td>
        <td id="file--LC2316" class="blob-code blob-code-inner js-file-line">            if (--line[next] == 0)</td>
      </tr>
      <tr>
        <td id="file--L2317" class="blob-num js-line-number" data-line-number="2317"></td>
        <td id="file--LC2317" class="blob-code blob-code-inner js-file-line">                q.push(next);</td>
      </tr>
      <tr>
        <td id="file--L2318" class="blob-num js-line-number" data-line-number="2318"></td>
        <td id="file--LC2318" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2319" class="blob-num js-line-number" data-line-number="2319"></td>
        <td id="file--LC2319" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2320" class="blob-num js-line-number" data-line-number="2320"></td>
        <td id="file--LC2320" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2321" class="blob-num js-line-number" data-line-number="2321"></td>
        <td id="file--LC2321" class="blob-code blob-code-inner js-file-line">    // 위상 정렬 결과 값을 출력한다.</td>
      </tr>
      <tr>
        <td id="file--L2322" class="blob-num js-line-number" data-line-number="2322"></td>
        <td id="file--LC2322" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2323" class="blob-num js-line-number" data-line-number="2323"></td>
        <td id="file--LC2323" class="blob-code blob-code-inner js-file-line">        printf(&quot;%d\n&quot;, result[i]);</td>
      </tr>
      <tr>
        <td id="file--L2324" class="blob-num js-line-number" data-line-number="2324"></td>
        <td id="file--LC2324" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2325" class="blob-num js-line-number" data-line-number="2325"></td>
        <td id="file--LC2325" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2326" class="blob-num js-line-number" data-line-number="2326"></td>
        <td id="file--LC2326" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2327" class="blob-num js-line-number" data-line-number="2327"></td>
        <td id="file--LC2327" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2328" class="blob-num js-line-number" data-line-number="2328"></td>
        <td id="file--LC2328" class="blob-code blob-code-inner js-file-line">출처: https://www.crocus.co.kr/716?category=209527 [Crocus]</td>
      </tr>
      <tr>
        <td id="file--L2329" class="blob-num js-line-number" data-line-number="2329"></td>
        <td id="file--LC2329" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2330" class="blob-num js-line-number" data-line-number="2330"></td>
        <td id="file--LC2330" class="blob-code blob-code-inner js-file-line">[DFS로 위상정렬]</td>
      </tr>
      <tr>
        <td id="file--L2331" class="blob-num js-line-number" data-line-number="2331"></td>
        <td id="file--LC2331" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2332" class="blob-num js-line-number" data-line-number="2332"></td>
        <td id="file--LC2332" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2333" class="blob-num js-line-number" data-line-number="2333"></td>
        <td id="file--LC2333" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L2334" class="blob-num js-line-number" data-line-number="2334"></td>
        <td id="file--LC2334" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2335" class="blob-num js-line-number" data-line-number="2335"></td>
        <td id="file--LC2335" class="blob-code blob-code-inner js-file-line">#include &lt;stack&gt;</td>
      </tr>
      <tr>
        <td id="file--L2336" class="blob-num js-line-number" data-line-number="2336"></td>
        <td id="file--LC2336" class="blob-code blob-code-inner js-file-line">#define MAX_N 32000</td>
      </tr>
      <tr>
        <td id="file--L2337" class="blob-num js-line-number" data-line-number="2337"></td>
        <td id="file--LC2337" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2338" class="blob-num js-line-number" data-line-number="2338"></td>
        <td id="file--LC2338" class="blob-code blob-code-inner js-file-line">vector&lt;vector&lt;int&gt;&gt; vt;</td>
      </tr>
      <tr>
        <td id="file--L2339" class="blob-num js-line-number" data-line-number="2339"></td>
        <td id="file--LC2339" class="blob-code blob-code-inner js-file-line">stack&lt;int&gt; st;</td>
      </tr>
      <tr>
        <td id="file--L2340" class="blob-num js-line-number" data-line-number="2340"></td>
        <td id="file--LC2340" class="blob-code blob-code-inner js-file-line">int n, m, x, y, visited[MAX_N + 1];</td>
      </tr>
      <tr>
        <td id="file--L2341" class="blob-num js-line-number" data-line-number="2341"></td>
        <td id="file--LC2341" class="blob-code blob-code-inner js-file-line">void dfs(int v) {</td>
      </tr>
      <tr>
        <td id="file--L2342" class="blob-num js-line-number" data-line-number="2342"></td>
        <td id="file--LC2342" class="blob-code blob-code-inner js-file-line">    visited[v] = true;</td>
      </tr>
      <tr>
        <td id="file--L2343" class="blob-num js-line-number" data-line-number="2343"></td>
        <td id="file--LC2343" class="blob-code blob-code-inner js-file-line">    for (auto i : vt[v]) {</td>
      </tr>
      <tr>
        <td id="file--L2344" class="blob-num js-line-number" data-line-number="2344"></td>
        <td id="file--LC2344" class="blob-code blob-code-inner js-file-line">        if (visited[i])</td>
      </tr>
      <tr>
        <td id="file--L2345" class="blob-num js-line-number" data-line-number="2345"></td>
        <td id="file--LC2345" class="blob-code blob-code-inner js-file-line">            continue;</td>
      </tr>
      <tr>
        <td id="file--L2346" class="blob-num js-line-number" data-line-number="2346"></td>
        <td id="file--LC2346" class="blob-code blob-code-inner js-file-line">        dfs(i);</td>
      </tr>
      <tr>
        <td id="file--L2347" class="blob-num js-line-number" data-line-number="2347"></td>
        <td id="file--LC2347" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2348" class="blob-num js-line-number" data-line-number="2348"></td>
        <td id="file--LC2348" class="blob-code blob-code-inner js-file-line">    st.push(v);</td>
      </tr>
      <tr>
        <td id="file--L2349" class="blob-num js-line-number" data-line-number="2349"></td>
        <td id="file--LC2349" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2350" class="blob-num js-line-number" data-line-number="2350"></td>
        <td id="file--LC2350" class="blob-code blob-code-inner js-file-line">int main() {</td>
      </tr>
      <tr>
        <td id="file--L2351" class="blob-num js-line-number" data-line-number="2351"></td>
        <td id="file--LC2351" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2352" class="blob-num js-line-number" data-line-number="2352"></td>
        <td id="file--LC2352" class="blob-code blob-code-inner js-file-line">    vt.resize(n + 1);</td>
      </tr>
      <tr>
        <td id="file--L2353" class="blob-num js-line-number" data-line-number="2353"></td>
        <td id="file--LC2353" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; m; i++) {</td>
      </tr>
      <tr>
        <td id="file--L2354" class="blob-num js-line-number" data-line-number="2354"></td>
        <td id="file--LC2354" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d%d&quot;, &amp;x, &amp;y);</td>
      </tr>
      <tr>
        <td id="file--L2355" class="blob-num js-line-number" data-line-number="2355"></td>
        <td id="file--LC2355" class="blob-code blob-code-inner js-file-line">        vt[x].push_back(y);</td>
      </tr>
      <tr>
        <td id="file--L2356" class="blob-num js-line-number" data-line-number="2356"></td>
        <td id="file--LC2356" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2357" class="blob-num js-line-number" data-line-number="2357"></td>
        <td id="file--LC2357" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= n; i++) {</td>
      </tr>
      <tr>
        <td id="file--L2358" class="blob-num js-line-number" data-line-number="2358"></td>
        <td id="file--LC2358" class="blob-code blob-code-inner js-file-line">        if (!visited[i])</td>
      </tr>
      <tr>
        <td id="file--L2359" class="blob-num js-line-number" data-line-number="2359"></td>
        <td id="file--LC2359" class="blob-code blob-code-inner js-file-line">            dfs(i);</td>
      </tr>
      <tr>
        <td id="file--L2360" class="blob-num js-line-number" data-line-number="2360"></td>
        <td id="file--LC2360" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2361" class="blob-num js-line-number" data-line-number="2361"></td>
        <td id="file--LC2361" class="blob-code blob-code-inner js-file-line">    while (st.size()) {</td>
      </tr>
      <tr>
        <td id="file--L2362" class="blob-num js-line-number" data-line-number="2362"></td>
        <td id="file--LC2362" class="blob-code blob-code-inner js-file-line">        printf(&quot;%d &quot;, st.top());</td>
      </tr>
      <tr>
        <td id="file--L2363" class="blob-num js-line-number" data-line-number="2363"></td>
        <td id="file--LC2363" class="blob-code blob-code-inner js-file-line">        st.pop();</td>
      </tr>
      <tr>
        <td id="file--L2364" class="blob-num js-line-number" data-line-number="2364"></td>
        <td id="file--LC2364" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2365" class="blob-num js-line-number" data-line-number="2365"></td>
        <td id="file--LC2365" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2366" class="blob-num js-line-number" data-line-number="2366"></td>
        <td id="file--LC2366" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2367" class="blob-num js-line-number" data-line-number="2367"></td>
        <td id="file--LC2367" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2368" class="blob-num js-line-number" data-line-number="2368"></td>
        <td id="file--LC2368" class="blob-code blob-code-inner js-file-line">출처: http://jason9319.tistory.com/93 [ACM-ICPC 상 탈 사람]</td>
      </tr>
      <tr>
        <td id="file--L2369" class="blob-num js-line-number" data-line-number="2369"></td>
        <td id="file--LC2369" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2370" class="blob-num js-line-number" data-line-number="2370"></td>
        <td id="file--LC2370" class="blob-code blob-code-inner js-file-line">[indegree 수를 이용한 방법]</td>
      </tr>
      <tr>
        <td id="file--L2371" class="blob-num js-line-number" data-line-number="2371"></td>
        <td id="file--LC2371" class="blob-code blob-code-inner js-file-line">indegree란 한 정점에서 자신에게 들어오는 방향인 간선의 수입니다.</td>
      </tr>
      <tr>
        <td id="file--L2372" class="blob-num js-line-number" data-line-number="2372"></td>
        <td id="file--LC2372" class="blob-code blob-code-inner js-file-line">우리는 간선의 정보를 받을 때 모든 정점의 indegree의 개수를 세준 후 queue에 indegree가 0인 정점을 삽입해 줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2373" class="blob-num js-line-number" data-line-number="2373"></td>
        <td id="file--LC2373" class="blob-code blob-code-inner js-file-line">정점의 횟수 만큼 반복문을 돌려 다음 작업을 반복합니다.</td>
      </tr>
      <tr>
        <td id="file--L2374" class="blob-num js-line-number" data-line-number="2374"></td>
        <td id="file--LC2374" class="blob-code blob-code-inner js-file-line">-&gt; 큐의 front를 추출하여 해당 정점에서 나가는 간선을 다 지워준 후 지워진 간선에 의하여 indegree가 0이 되는 정점들을 queue에 삽입해줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2375" class="blob-num js-line-number" data-line-number="2375"></td>
        <td id="file--LC2375" class="blob-code blob-code-inner js-file-line">(이때 간선을 지워준 다는 것은 간선의 종점인 정점들의 indegree의 개수를 -1 해줌으로 구현 가능합니다.)</td>
      </tr>
      <tr>
        <td id="file--L2376" class="blob-num js-line-number" data-line-number="2376"></td>
        <td id="file--LC2376" class="blob-code blob-code-inner js-file-line">하지만 우리가 정점의 횟수만큼 반복문을 돌리던 중 큐의 크기가 먼저 0이 되어 버린다면 사이클이 존재하므로 위상 정렬이 불가능하다는 결론이 나옵니다.</td>
      </tr>
      <tr>
        <td id="file--L2377" class="blob-num js-line-number" data-line-number="2377"></td>
        <td id="file--LC2377" class="blob-code blob-code-inner js-file-line">사이클에 속하는 정점들이 존재한다면 그 정점들은 모두 indegree가 1이상이라 큐에 들어가지 않기 때문입니다.</td>
      </tr>
      <tr>
        <td id="file--L2378" class="blob-num js-line-number" data-line-number="2378"></td>
        <td id="file--LC2378" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2379" class="blob-num js-line-number" data-line-number="2379"></td>
        <td id="file--LC2379" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2380" class="blob-num js-line-number" data-line-number="2380"></td>
        <td id="file--LC2380" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L2381" class="blob-num js-line-number" data-line-number="2381"></td>
        <td id="file--LC2381" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2382" class="blob-num js-line-number" data-line-number="2382"></td>
        <td id="file--LC2382" class="blob-code blob-code-inner js-file-line">#include &lt;queue&gt;</td>
      </tr>
      <tr>
        <td id="file--L2383" class="blob-num js-line-number" data-line-number="2383"></td>
        <td id="file--LC2383" class="blob-code blob-code-inner js-file-line">#define MAX_N 32000</td>
      </tr>
      <tr>
        <td id="file--L2384" class="blob-num js-line-number" data-line-number="2384"></td>
        <td id="file--LC2384" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2385" class="blob-num js-line-number" data-line-number="2385"></td>
        <td id="file--LC2385" class="blob-code blob-code-inner js-file-line">int n, m, a, b, in[MAX_N + 1];</td>
      </tr>
      <tr>
        <td id="file--L2386" class="blob-num js-line-number" data-line-number="2386"></td>
        <td id="file--LC2386" class="blob-code blob-code-inner js-file-line">vector&lt;vector&lt;int&gt;&gt; vt;</td>
      </tr>
      <tr>
        <td id="file--L2387" class="blob-num js-line-number" data-line-number="2387"></td>
        <td id="file--LC2387" class="blob-code blob-code-inner js-file-line">priority_queue&lt;int&gt; pq;</td>
      </tr>
      <tr>
        <td id="file--L2388" class="blob-num js-line-number" data-line-number="2388"></td>
        <td id="file--LC2388" class="blob-code blob-code-inner js-file-line">int main() {</td>
      </tr>
      <tr>
        <td id="file--L2389" class="blob-num js-line-number" data-line-number="2389"></td>
        <td id="file--LC2389" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d%d&quot;, &amp;n, &amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2390" class="blob-num js-line-number" data-line-number="2390"></td>
        <td id="file--LC2390" class="blob-code blob-code-inner js-file-line">    vt.resize(n + 1);</td>
      </tr>
      <tr>
        <td id="file--L2391" class="blob-num js-line-number" data-line-number="2391"></td>
        <td id="file--LC2391" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; m; i++) {</td>
      </tr>
      <tr>
        <td id="file--L2392" class="blob-num js-line-number" data-line-number="2392"></td>
        <td id="file--LC2392" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</td>
      </tr>
      <tr>
        <td id="file--L2393" class="blob-num js-line-number" data-line-number="2393"></td>
        <td id="file--LC2393" class="blob-code blob-code-inner js-file-line">        vt[a].push_back(b);</td>
      </tr>
      <tr>
        <td id="file--L2394" class="blob-num js-line-number" data-line-number="2394"></td>
        <td id="file--LC2394" class="blob-code blob-code-inner js-file-line">        in[b]++;</td>
      </tr>
      <tr>
        <td id="file--L2395" class="blob-num js-line-number" data-line-number="2395"></td>
        <td id="file--LC2395" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2396" class="blob-num js-line-number" data-line-number="2396"></td>
        <td id="file--LC2396" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= n; i++) {</td>
      </tr>
      <tr>
        <td id="file--L2397" class="blob-num js-line-number" data-line-number="2397"></td>
        <td id="file--LC2397" class="blob-code blob-code-inner js-file-line">        if (!in[i])</td>
      </tr>
      <tr>
        <td id="file--L2398" class="blob-num js-line-number" data-line-number="2398"></td>
        <td id="file--LC2398" class="blob-code blob-code-inner js-file-line">            pq.push(-i);</td>
      </tr>
      <tr>
        <td id="file--L2399" class="blob-num js-line-number" data-line-number="2399"></td>
        <td id="file--LC2399" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2400" class="blob-num js-line-number" data-line-number="2400"></td>
        <td id="file--LC2400" class="blob-code blob-code-inner js-file-line">    while (pq.size()) {</td>
      </tr>
      <tr>
        <td id="file--L2401" class="blob-num js-line-number" data-line-number="2401"></td>
        <td id="file--LC2401" class="blob-code blob-code-inner js-file-line">        int here = -pq.top();</td>
      </tr>
      <tr>
        <td id="file--L2402" class="blob-num js-line-number" data-line-number="2402"></td>
        <td id="file--LC2402" class="blob-code blob-code-inner js-file-line">        pq.pop();</td>
      </tr>
      <tr>
        <td id="file--L2403" class="blob-num js-line-number" data-line-number="2403"></td>
        <td id="file--LC2403" class="blob-code blob-code-inner js-file-line">        printf(&quot;%d &quot;, here);</td>
      </tr>
      <tr>
        <td id="file--L2404" class="blob-num js-line-number" data-line-number="2404"></td>
        <td id="file--LC2404" class="blob-code blob-code-inner js-file-line">        for (int there : vt[here]) {</td>
      </tr>
      <tr>
        <td id="file--L2405" class="blob-num js-line-number" data-line-number="2405"></td>
        <td id="file--LC2405" class="blob-code blob-code-inner js-file-line">            in[there]--;</td>
      </tr>
      <tr>
        <td id="file--L2406" class="blob-num js-line-number" data-line-number="2406"></td>
        <td id="file--LC2406" class="blob-code blob-code-inner js-file-line">            if (!in[there])</td>
      </tr>
      <tr>
        <td id="file--L2407" class="blob-num js-line-number" data-line-number="2407"></td>
        <td id="file--LC2407" class="blob-code blob-code-inner js-file-line">                pq.push(-there);</td>
      </tr>
      <tr>
        <td id="file--L2408" class="blob-num js-line-number" data-line-number="2408"></td>
        <td id="file--LC2408" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2409" class="blob-num js-line-number" data-line-number="2409"></td>
        <td id="file--LC2409" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2410" class="blob-num js-line-number" data-line-number="2410"></td>
        <td id="file--LC2410" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2411" class="blob-num js-line-number" data-line-number="2411"></td>
        <td id="file--LC2411" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2412" class="blob-num js-line-number" data-line-number="2412"></td>
        <td id="file--LC2412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2413" class="blob-num js-line-number" data-line-number="2413"></td>
        <td id="file--LC2413" class="blob-code blob-code-inner js-file-line">출처: http://jason9319.tistory.com/93 [ACM-ICPC 상 탈 사람]</td>
      </tr>
      <tr>
        <td id="file--L2414" class="blob-num js-line-number" data-line-number="2414"></td>
        <td id="file--LC2414" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2415" class="blob-num js-line-number" data-line-number="2415"></td>
        <td id="file--LC2415" class="blob-code blob-code-inner js-file-line">■ LCA (Lowest Common Ancestor) 알고리즘 - LG CNS에서 나옴</td>
      </tr>
      <tr>
        <td id="file--L2416" class="blob-num js-line-number" data-line-number="2416"></td>
        <td id="file--LC2416" class="blob-code blob-code-inner js-file-line">보통 트리에서 최소 공통 조상을 찾는 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L2417" class="blob-num js-line-number" data-line-number="2417"></td>
        <td id="file--LC2417" class="blob-code blob-code-inner js-file-line">두 정점 u, v(혹은 a, b)에서 가장 가까운 공통 조상을 찾는 과정을 말한다.</td>
      </tr>
      <tr>
        <td id="file--L2418" class="blob-num js-line-number" data-line-number="2418"></td>
        <td id="file--LC2418" class="blob-code blob-code-inner js-file-line">세그먼트 트리나 DP를 이용하여 구현할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2419" class="blob-num js-line-number" data-line-number="2419"></td>
        <td id="file--LC2419" class="blob-code blob-code-inner js-file-line">LCA 알고리즘의 시간 복잡도 :: O(lgN)</td>
      </tr>
      <tr>
        <td id="file--L2420" class="blob-num js-line-number" data-line-number="2420"></td>
        <td id="file--LC2420" class="blob-code blob-code-inner js-file-line">쿼리가 함께 존재할 경우 :: O(MlgN)</td>
      </tr>
      <tr>
        <td id="file--L2421" class="blob-num js-line-number" data-line-number="2421"></td>
        <td id="file--LC2421" class="blob-code blob-code-inner js-file-line">첫번째로 입력받은 정점과 간선을 이용하여 양방향 그래프를 생성한다.</td>
      </tr>
      <tr>
        <td id="file--L2422" class="blob-num js-line-number" data-line-number="2422"></td>
        <td id="file--LC2422" class="blob-code blob-code-inner js-file-line">그 후 depth와 조상을 가지는 트리를 생성한다.</td>
      </tr>
      <tr>
        <td id="file--L2423" class="blob-num js-line-number" data-line-number="2423"></td>
        <td id="file--LC2423" class="blob-code blob-code-inner js-file-line">이때 조상은 2^0, 2^1, 2^2, ... 의 조상이 누구인지 알 수 있도록 한다.</td>
      </tr>
      <tr>
        <td id="file--L2424" class="blob-num js-line-number" data-line-number="2424"></td>
        <td id="file--LC2424" class="blob-code blob-code-inner js-file-line">depth와 2^k번째 조상을 가지고 있는 DP가 완성되었으면 이제 LCA(a,b) 즉, a와 b의 공통 조상이 누구인지 조사해야한다.</td>
      </tr>
      <tr>
        <td id="file--L2425" class="blob-num js-line-number" data-line-number="2425"></td>
        <td id="file--LC2425" class="blob-code blob-code-inner js-file-line">깊이가 더 깊은 노드를 깊이가 더 낮은 노드까지 노드를 올려준다.</td>
      </tr>
      <tr>
        <td id="file--L2426" class="blob-num js-line-number" data-line-number="2426"></td>
        <td id="file--LC2426" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2427" class="blob-num js-line-number" data-line-number="2427"></td>
        <td id="file--LC2427" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L2428" class="blob-num js-line-number" data-line-number="2428"></td>
        <td id="file--LC2428" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2429" class="blob-num js-line-number" data-line-number="2429"></td>
        <td id="file--LC2429" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2430" class="blob-num js-line-number" data-line-number="2430"></td>
        <td id="file--LC2430" class="blob-code blob-code-inner js-file-line">#include &lt;cmath&gt;</td>
      </tr>
      <tr>
        <td id="file--L2431" class="blob-num js-line-number" data-line-number="2431"></td>
        <td id="file--LC2431" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2432" class="blob-num js-line-number" data-line-number="2432"></td>
        <td id="file--LC2432" class="blob-code blob-code-inner js-file-line">#define swap(a,b){int t = a; a = b; b = t;}</td>
      </tr>
      <tr>
        <td id="file--L2433" class="blob-num js-line-number" data-line-number="2433"></td>
        <td id="file--LC2433" class="blob-code blob-code-inner js-file-line">#define MAX_NODE 100001</td>
      </tr>
      <tr>
        <td id="file--L2434" class="blob-num js-line-number" data-line-number="2434"></td>
        <td id="file--LC2434" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2435" class="blob-num js-line-number" data-line-number="2435"></td>
        <td id="file--LC2435" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2436" class="blob-num js-line-number" data-line-number="2436"></td>
        <td id="file--LC2436" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2437" class="blob-num js-line-number" data-line-number="2437"></td>
        <td id="file--LC2437" class="blob-code blob-code-inner js-file-line">// depth :: 노드의 깊이(레벨)</td>
      </tr>
      <tr>
        <td id="file--L2438" class="blob-num js-line-number" data-line-number="2438"></td>
        <td id="file--LC2438" class="blob-code blob-code-inner js-file-line">// ac[x][y] :: x의 2^y번째 조상을 의미</td>
      </tr>
      <tr>
        <td id="file--L2439" class="blob-num js-line-number" data-line-number="2439"></td>
        <td id="file--LC2439" class="blob-code blob-code-inner js-file-line">int depth[MAX_NODE];</td>
      </tr>
      <tr>
        <td id="file--L2440" class="blob-num js-line-number" data-line-number="2440"></td>
        <td id="file--LC2440" class="blob-code blob-code-inner js-file-line">int ac[MAX_NODE][20];</td>
      </tr>
      <tr>
        <td id="file--L2441" class="blob-num js-line-number" data-line-number="2441"></td>
        <td id="file--LC2441" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2442" class="blob-num js-line-number" data-line-number="2442"></td>
        <td id="file--LC2442" class="blob-code blob-code-inner js-file-line">typedef pair&lt;int, int&gt; pii;</td>
      </tr>
      <tr>
        <td id="file--L2443" class="blob-num js-line-number" data-line-number="2443"></td>
        <td id="file--LC2443" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; graph[MAX_NODE];</td>
      </tr>
      <tr>
        <td id="file--L2444" class="blob-num js-line-number" data-line-number="2444"></td>
        <td id="file--LC2444" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2445" class="blob-num js-line-number" data-line-number="2445"></td>
        <td id="file--LC2445" class="blob-code blob-code-inner js-file-line">int max_level;</td>
      </tr>
      <tr>
        <td id="file--L2446" class="blob-num js-line-number" data-line-number="2446"></td>
        <td id="file--LC2446" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2447" class="blob-num js-line-number" data-line-number="2447"></td>
        <td id="file--LC2447" class="blob-code blob-code-inner js-file-line">// DP(ac)배열 만드는 과정</td>
      </tr>
      <tr>
        <td id="file--L2448" class="blob-num js-line-number" data-line-number="2448"></td>
        <td id="file--LC2448" class="blob-code blob-code-inner js-file-line">void getTree(int here, int parent)</td>
      </tr>
      <tr>
        <td id="file--L2449" class="blob-num js-line-number" data-line-number="2449"></td>
        <td id="file--LC2449" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2450" class="blob-num js-line-number" data-line-number="2450"></td>
        <td id="file--LC2450" class="blob-code blob-code-inner js-file-line">    // here의 깊이는 부모노드깊이 + 1</td>
      </tr>
      <tr>
        <td id="file--L2451" class="blob-num js-line-number" data-line-number="2451"></td>
        <td id="file--LC2451" class="blob-code blob-code-inner js-file-line">    depth[here] = depth[parent] + 1;</td>
      </tr>
      <tr>
        <td id="file--L2452" class="blob-num js-line-number" data-line-number="2452"></td>
        <td id="file--LC2452" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2453" class="blob-num js-line-number" data-line-number="2453"></td>
        <td id="file--LC2453" class="blob-code blob-code-inner js-file-line">    // here의 1번째 조상은 부모노드</td>
      </tr>
      <tr>
        <td id="file--L2454" class="blob-num js-line-number" data-line-number="2454"></td>
        <td id="file--LC2454" class="blob-code blob-code-inner js-file-line">    ac[here][0] = parent;</td>
      </tr>
      <tr>
        <td id="file--L2455" class="blob-num js-line-number" data-line-number="2455"></td>
        <td id="file--LC2455" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L2456" class="blob-num js-line-number" data-line-number="2456"></td>
        <td id="file--LC2456" class="blob-code blob-code-inner js-file-line">    // MAX_NODE에 log2를 씌어 내림을 해준다.</td>
      </tr>
      <tr>
        <td id="file--L2457" class="blob-num js-line-number" data-line-number="2457"></td>
        <td id="file--LC2457" class="blob-code blob-code-inner js-file-line">    max_level = (int)floor(log2(MAX_NODE));</td>
      </tr>
      <tr>
        <td id="file--L2458" class="blob-num js-line-number" data-line-number="2458"></td>
        <td id="file--LC2458" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2459" class="blob-num js-line-number" data-line-number="2459"></td>
        <td id="file--LC2459" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= max_level; i++)</td>
      </tr>
      <tr>
        <td id="file--L2460" class="blob-num js-line-number" data-line-number="2460"></td>
        <td id="file--LC2460" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2461" class="blob-num js-line-number" data-line-number="2461"></td>
        <td id="file--LC2461" class="blob-code blob-code-inner js-file-line">        // tmp :: here의 2^(i-1)번째 조상</td>
      </tr>
      <tr>
        <td id="file--L2462" class="blob-num js-line-number" data-line-number="2462"></td>
        <td id="file--LC2462" class="blob-code blob-code-inner js-file-line">        /* </td>
      </tr>
      <tr>
        <td id="file--L2463" class="blob-num js-line-number" data-line-number="2463"></td>
        <td id="file--LC2463" class="blob-code blob-code-inner js-file-line">            즉, ac[here][i] = ac[tmp][i-1]은</td>
      </tr>
      <tr>
        <td id="file--L2464" class="blob-num js-line-number" data-line-number="2464"></td>
        <td id="file--LC2464" class="blob-code blob-code-inner js-file-line">            here의 2^i번째 조상은 tmp의 2^(i-1)번째 조상의 2^(i-1)번째 조상과 같다는 의미</td>
      </tr>
      <tr>
        <td id="file--L2465" class="blob-num js-line-number" data-line-number="2465"></td>
        <td id="file--LC2465" class="blob-code blob-code-inner js-file-line">            예를들어 i = 3일때</td>
      </tr>
      <tr>
        <td id="file--L2466" class="blob-num js-line-number" data-line-number="2466"></td>
        <td id="file--LC2466" class="blob-code blob-code-inner js-file-line">            here의 8번째 조상은 tmp(here의 4번째 조상)의 4번째 조상과 같다.</td>
      </tr>
      <tr>
        <td id="file--L2467" class="blob-num js-line-number" data-line-number="2467"></td>
        <td id="file--LC2467" class="blob-code blob-code-inner js-file-line">            i =  4일때 here의 16번째 조상은 here의 8번째 조상(tmp)의 8번째와 같다.</td>
      </tr>
      <tr>
        <td id="file--L2468" class="blob-num js-line-number" data-line-number="2468"></td>
        <td id="file--LC2468" class="blob-code blob-code-inner js-file-line">        */</td>
      </tr>
      <tr>
        <td id="file--L2469" class="blob-num js-line-number" data-line-number="2469"></td>
        <td id="file--LC2469" class="blob-code blob-code-inner js-file-line">        int tmp = ac[here][i - 1];</td>
      </tr>
      <tr>
        <td id="file--L2470" class="blob-num js-line-number" data-line-number="2470"></td>
        <td id="file--LC2470" class="blob-code blob-code-inner js-file-line">        ac[here][i] = ac[tmp][i - 1];</td>
      </tr>
      <tr>
        <td id="file--L2471" class="blob-num js-line-number" data-line-number="2471"></td>
        <td id="file--LC2471" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2472" class="blob-num js-line-number" data-line-number="2472"></td>
        <td id="file--LC2472" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2473" class="blob-num js-line-number" data-line-number="2473"></td>
        <td id="file--LC2473" class="blob-code blob-code-inner js-file-line">    // dfs 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L2474" class="blob-num js-line-number" data-line-number="2474"></td>
        <td id="file--LC2474" class="blob-code blob-code-inner js-file-line">    int len = graph[here].size();</td>
      </tr>
      <tr>
        <td id="file--L2475" class="blob-num js-line-number" data-line-number="2475"></td>
        <td id="file--LC2475" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; len; i++)</td>
      </tr>
      <tr>
        <td id="file--L2476" class="blob-num js-line-number" data-line-number="2476"></td>
        <td id="file--LC2476" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2477" class="blob-num js-line-number" data-line-number="2477"></td>
        <td id="file--LC2477" class="blob-code blob-code-inner js-file-line">        int there = graph[here][i];</td>
      </tr>
      <tr>
        <td id="file--L2478" class="blob-num js-line-number" data-line-number="2478"></td>
        <td id="file--LC2478" class="blob-code blob-code-inner js-file-line">        if (there != parent)</td>
      </tr>
      <tr>
        <td id="file--L2479" class="blob-num js-line-number" data-line-number="2479"></td>
        <td id="file--LC2479" class="blob-code blob-code-inner js-file-line">            getTree(there, here);</td>
      </tr>
      <tr>
        <td id="file--L2480" class="blob-num js-line-number" data-line-number="2480"></td>
        <td id="file--LC2480" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2481" class="blob-num js-line-number" data-line-number="2481"></td>
        <td id="file--LC2481" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2482" class="blob-num js-line-number" data-line-number="2482"></td>
        <td id="file--LC2482" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2483" class="blob-num js-line-number" data-line-number="2483"></td>
        <td id="file--LC2483" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L2484" class="blob-num js-line-number" data-line-number="2484"></td>
        <td id="file--LC2484" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2485" class="blob-num js-line-number" data-line-number="2485"></td>
        <td id="file--LC2485" class="blob-code blob-code-inner js-file-line">    int n, m;</td>
      </tr>
      <tr>
        <td id="file--L2486" class="blob-num js-line-number" data-line-number="2486"></td>
        <td id="file--LC2486" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2487" class="blob-num js-line-number" data-line-number="2487"></td>
        <td id="file--LC2487" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d&quot;, &amp;n);</td>
      </tr>
      <tr>
        <td id="file--L2488" class="blob-num js-line-number" data-line-number="2488"></td>
        <td id="file--LC2488" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2489" class="blob-num js-line-number" data-line-number="2489"></td>
        <td id="file--LC2489" class="blob-code blob-code-inner js-file-line">    // 양방향 그래프 형성</td>
      </tr>
      <tr>
        <td id="file--L2490" class="blob-num js-line-number" data-line-number="2490"></td>
        <td id="file--LC2490" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt; n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2491" class="blob-num js-line-number" data-line-number="2491"></td>
        <td id="file--LC2491" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2492" class="blob-num js-line-number" data-line-number="2492"></td>
        <td id="file--LC2492" class="blob-code blob-code-inner js-file-line">        int from, to;</td>
      </tr>
      <tr>
        <td id="file--L2493" class="blob-num js-line-number" data-line-number="2493"></td>
        <td id="file--LC2493" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d %d&quot;, &amp;from, &amp;to);</td>
      </tr>
      <tr>
        <td id="file--L2494" class="blob-num js-line-number" data-line-number="2494"></td>
        <td id="file--LC2494" class="blob-code blob-code-inner js-file-line">        graph[from].push_back(to);</td>
      </tr>
      <tr>
        <td id="file--L2495" class="blob-num js-line-number" data-line-number="2495"></td>
        <td id="file--LC2495" class="blob-code blob-code-inner js-file-line">        graph[to].push_back(from);</td>
      </tr>
      <tr>
        <td id="file--L2496" class="blob-num js-line-number" data-line-number="2496"></td>
        <td id="file--LC2496" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2497" class="blob-num js-line-number" data-line-number="2497"></td>
        <td id="file--LC2497" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2498" class="blob-num js-line-number" data-line-number="2498"></td>
        <td id="file--LC2498" class="blob-code blob-code-inner js-file-line">    // make_tree에 1,0이 들어가기때문에 0은 -1로 지정</td>
      </tr>
      <tr>
        <td id="file--L2499" class="blob-num js-line-number" data-line-number="2499"></td>
        <td id="file--LC2499" class="blob-code blob-code-inner js-file-line">    depth[0] = -1;</td>
      </tr>
      <tr>
        <td id="file--L2500" class="blob-num js-line-number" data-line-number="2500"></td>
        <td id="file--LC2500" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2501" class="blob-num js-line-number" data-line-number="2501"></td>
        <td id="file--LC2501" class="blob-code blob-code-inner js-file-line">    // 루트 노드인 1번 노드부터 트리 형성</td>
      </tr>
      <tr>
        <td id="file--L2502" class="blob-num js-line-number" data-line-number="2502"></td>
        <td id="file--LC2502" class="blob-code blob-code-inner js-file-line">    getTree(1, 0);</td>
      </tr>
      <tr>
        <td id="file--L2503" class="blob-num js-line-number" data-line-number="2503"></td>
        <td id="file--LC2503" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2504" class="blob-num js-line-number" data-line-number="2504"></td>
        <td id="file--LC2504" class="blob-code blob-code-inner js-file-line">    // 쿼리문 시작</td>
      </tr>
      <tr>
        <td id="file--L2505" class="blob-num js-line-number" data-line-number="2505"></td>
        <td id="file--LC2505" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d&quot;, &amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2506" class="blob-num js-line-number" data-line-number="2506"></td>
        <td id="file--LC2506" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2507" class="blob-num js-line-number" data-line-number="2507"></td>
        <td id="file--LC2507" class="blob-code blob-code-inner js-file-line">    while (m--)</td>
      </tr>
      <tr>
        <td id="file--L2508" class="blob-num js-line-number" data-line-number="2508"></td>
        <td id="file--LC2508" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2509" class="blob-num js-line-number" data-line-number="2509"></td>
        <td id="file--LC2509" class="blob-code blob-code-inner js-file-line">        int a, b;</td>
      </tr>
      <tr>
        <td id="file--L2510" class="blob-num js-line-number" data-line-number="2510"></td>
        <td id="file--LC2510" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d %d&quot;, &amp;a, &amp;b);</td>
      </tr>
      <tr>
        <td id="file--L2511" class="blob-num js-line-number" data-line-number="2511"></td>
        <td id="file--LC2511" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2512" class="blob-num js-line-number" data-line-number="2512"></td>
        <td id="file--LC2512" class="blob-code blob-code-inner js-file-line">        if (depth[a] != depth[b])</td>
      </tr>
      <tr>
        <td id="file--L2513" class="blob-num js-line-number" data-line-number="2513"></td>
        <td id="file--LC2513" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2514" class="blob-num js-line-number" data-line-number="2514"></td>
        <td id="file--LC2514" class="blob-code blob-code-inner js-file-line">            // depth[b] &gt;= depth[a]가 되도록 swap</td>
      </tr>
      <tr>
        <td id="file--L2515" class="blob-num js-line-number" data-line-number="2515"></td>
        <td id="file--LC2515" class="blob-code blob-code-inner js-file-line">            if (depth[a] &gt; depth[b])</td>
      </tr>
      <tr>
        <td id="file--L2516" class="blob-num js-line-number" data-line-number="2516"></td>
        <td id="file--LC2516" class="blob-code blob-code-inner js-file-line">                swap(a, b);</td>
      </tr>
      <tr>
        <td id="file--L2517" class="blob-num js-line-number" data-line-number="2517"></td>
        <td id="file--LC2517" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2518" class="blob-num js-line-number" data-line-number="2518"></td>
        <td id="file--LC2518" class="blob-code blob-code-inner js-file-line">            // b를 올려서 depth를 맞춰준다.</td>
      </tr>
      <tr>
        <td id="file--L2519" class="blob-num js-line-number" data-line-number="2519"></td>
        <td id="file--LC2519" class="blob-code blob-code-inner js-file-line">            /* </td>
      </tr>
      <tr>
        <td id="file--L2520" class="blob-num js-line-number" data-line-number="2520"></td>
        <td id="file--LC2520" class="blob-code blob-code-inner js-file-line">                이렇게하면 만약 max_level이 4라면</td>
      </tr>
      <tr>
        <td id="file--L2521" class="blob-num js-line-number" data-line-number="2521"></td>
        <td id="file--LC2521" class="blob-code blob-code-inner js-file-line">                2^4 -&gt; 2^3 -&gt; 2^2 -&gt; 2^1 -&gt; 2^0방식으로 찾아갈텐데</td>
      </tr>
      <tr>
        <td id="file--L2522" class="blob-num js-line-number" data-line-number="2522"></td>
        <td id="file--LC2522" class="blob-code blob-code-inner js-file-line">                결국 1, 2, 3, 4, 5 ..., 31까지 모두 찾는 방식과 같아진다.</td>
      </tr>
      <tr>
        <td id="file--L2523" class="blob-num js-line-number" data-line-number="2523"></td>
        <td id="file--LC2523" class="blob-code blob-code-inner js-file-line">                예를들어, i가 4일때와 1일때 만족했다 치면</td>
      </tr>
      <tr>
        <td id="file--L2524" class="blob-num js-line-number" data-line-number="2524"></td>
        <td id="file--LC2524" class="blob-code blob-code-inner js-file-line">                depth[a] &lt;= depth[ac[b][4]]에 의해</td>
      </tr>
      <tr>
        <td id="file--L2525" class="blob-num js-line-number" data-line-number="2525"></td>
        <td id="file--LC2525" class="blob-code blob-code-inner js-file-line">                b = ac[b][4];가 되어 b는 b의 16번째 조상을 보고 있을 것이고</td>
      </tr>
      <tr>
        <td id="file--L2526" class="blob-num js-line-number" data-line-number="2526"></td>
        <td id="file--LC2526" class="blob-code blob-code-inner js-file-line">                depth[a] &lt;= depth[ac[b][1]]에 의해(현재 b는 처음 b의 16번째 조상인 b로 바뀌었다.)</td>
      </tr>
      <tr>
        <td id="file--L2527" class="blob-num js-line-number" data-line-number="2527"></td>
        <td id="file--LC2527" class="blob-code blob-code-inner js-file-line">                b = ac[b][1];이 되어 b는 b의 2번째 조상을 보게 된다.</td>
      </tr>
      <tr>
        <td id="file--L2528" class="blob-num js-line-number" data-line-number="2528"></td>
        <td id="file--LC2528" class="blob-code blob-code-inner js-file-line">                즉, b의 16번째 조상의 2번째 조상을 보는 것이니 b의 18번째 조상을 보게 된다.</td>
      </tr>
      <tr>
        <td id="file--L2529" class="blob-num js-line-number" data-line-number="2529"></td>
        <td id="file--LC2529" class="blob-code blob-code-inner js-file-line">                (하고자 하는 말은 3번째, 7번째, 11번째 이런 조상들도 모두 볼 수 있다는 의미이다.)</td>
      </tr>
      <tr>
        <td id="file--L2530" class="blob-num js-line-number" data-line-number="2530"></td>
        <td id="file--LC2530" class="blob-code blob-code-inner js-file-line">            */</td>
      </tr>
      <tr>
        <td id="file--L2531" class="blob-num js-line-number" data-line-number="2531"></td>
        <td id="file--LC2531" class="blob-code blob-code-inner js-file-line">            for (int i = max_level; i &gt;= 0; i--)</td>
      </tr>
      <tr>
        <td id="file--L2532" class="blob-num js-line-number" data-line-number="2532"></td>
        <td id="file--LC2532" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="file--L2533" class="blob-num js-line-number" data-line-number="2533"></td>
        <td id="file--LC2533" class="blob-code blob-code-inner js-file-line">                // b의 2^i번째 조상이 a의 depth보다 크거나 같으면 계속 조상을 타고간다.</td>
      </tr>
      <tr>
        <td id="file--L2534" class="blob-num js-line-number" data-line-number="2534"></td>
        <td id="file--LC2534" class="blob-code blob-code-inner js-file-line">                if (depth[a] &lt;= depth[ac[b][i]])</td>
      </tr>
      <tr>
        <td id="file--L2535" class="blob-num js-line-number" data-line-number="2535"></td>
        <td id="file--LC2535" class="blob-code blob-code-inner js-file-line">                    b = ac[b][i];</td>
      </tr>
      <tr>
        <td id="file--L2536" class="blob-num js-line-number" data-line-number="2536"></td>
        <td id="file--LC2536" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L2537" class="blob-num js-line-number" data-line-number="2537"></td>
        <td id="file--LC2537" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2538" class="blob-num js-line-number" data-line-number="2538"></td>
        <td id="file--LC2538" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2539" class="blob-num js-line-number" data-line-number="2539"></td>
        <td id="file--LC2539" class="blob-code blob-code-inner js-file-line">        int lca = a;</td>
      </tr>
      <tr>
        <td id="file--L2540" class="blob-num js-line-number" data-line-number="2540"></td>
        <td id="file--LC2540" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2541" class="blob-num js-line-number" data-line-number="2541"></td>
        <td id="file--LC2541" class="blob-code blob-code-inner js-file-line">        // a와 b가 다르다면 현재 깊이가 같으니</td>
      </tr>
      <tr>
        <td id="file--L2542" class="blob-num js-line-number" data-line-number="2542"></td>
        <td id="file--LC2542" class="blob-code blob-code-inner js-file-line">        // 깊이를 계속 올려 서로 다른 노드의 조상이 같아질 때까지 반복한다.</td>
      </tr>
      <tr>
        <td id="file--L2543" class="blob-num js-line-number" data-line-number="2543"></td>
        <td id="file--LC2543" class="blob-code blob-code-inner js-file-line">        // 즉, 서로 다른 노드(2,3)의 조상이 1로 같다면 lca = ac[2][0]에 의해 2의 조상이 1임을 알 수 있고</td>
      </tr>
      <tr>
        <td id="file--L2544" class="blob-num js-line-number" data-line-number="2544"></td>
        <td id="file--LC2544" class="blob-code blob-code-inner js-file-line">        // 마찬가지로 ac[3][0] 또한 3의 조상이 1임을 알게되며 알고리즘이 끝이난다.</td>
      </tr>
      <tr>
        <td id="file--L2545" class="blob-num js-line-number" data-line-number="2545"></td>
        <td id="file--LC2545" class="blob-code blob-code-inner js-file-line">        if (a != b)</td>
      </tr>
      <tr>
        <td id="file--L2546" class="blob-num js-line-number" data-line-number="2546"></td>
        <td id="file--LC2546" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2547" class="blob-num js-line-number" data-line-number="2547"></td>
        <td id="file--LC2547" class="blob-code blob-code-inner js-file-line">            for (int i = max_level; i &gt;= 0; i--)</td>
      </tr>
      <tr>
        <td id="file--L2548" class="blob-num js-line-number" data-line-number="2548"></td>
        <td id="file--LC2548" class="blob-code blob-code-inner js-file-line">            {</td>
      </tr>
      <tr>
        <td id="file--L2549" class="blob-num js-line-number" data-line-number="2549"></td>
        <td id="file--LC2549" class="blob-code blob-code-inner js-file-line">                if (ac[a][i] != ac[b][i])</td>
      </tr>
      <tr>
        <td id="file--L2550" class="blob-num js-line-number" data-line-number="2550"></td>
        <td id="file--LC2550" class="blob-code blob-code-inner js-file-line">                {</td>
      </tr>
      <tr>
        <td id="file--L2551" class="blob-num js-line-number" data-line-number="2551"></td>
        <td id="file--LC2551" class="blob-code blob-code-inner js-file-line">                    a = ac[a][i];</td>
      </tr>
      <tr>
        <td id="file--L2552" class="blob-num js-line-number" data-line-number="2552"></td>
        <td id="file--LC2552" class="blob-code blob-code-inner js-file-line">                    b = ac[b][i];</td>
      </tr>
      <tr>
        <td id="file--L2553" class="blob-num js-line-number" data-line-number="2553"></td>
        <td id="file--LC2553" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="file--L2554" class="blob-num js-line-number" data-line-number="2554"></td>
        <td id="file--LC2554" class="blob-code blob-code-inner js-file-line">                lca = ac[a][i];</td>
      </tr>
      <tr>
        <td id="file--L2555" class="blob-num js-line-number" data-line-number="2555"></td>
        <td id="file--LC2555" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L2556" class="blob-num js-line-number" data-line-number="2556"></td>
        <td id="file--LC2556" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2557" class="blob-num js-line-number" data-line-number="2557"></td>
        <td id="file--LC2557" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2558" class="blob-num js-line-number" data-line-number="2558"></td>
        <td id="file--LC2558" class="blob-code blob-code-inner js-file-line">        printf(&quot;%d\n&quot;, lca);</td>
      </tr>
      <tr>
        <td id="file--L2559" class="blob-num js-line-number" data-line-number="2559"></td>
        <td id="file--LC2559" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2560" class="blob-num js-line-number" data-line-number="2560"></td>
        <td id="file--LC2560" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2561" class="blob-num js-line-number" data-line-number="2561"></td>
        <td id="file--LC2561" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2562" class="blob-num js-line-number" data-line-number="2562"></td>
        <td id="file--LC2562" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2563" class="blob-num js-line-number" data-line-number="2563"></td>
        <td id="file--LC2563" class="blob-code blob-code-inner js-file-line">이 코드에서 max_level의 의미는 문제에서 주어지는 최대 노드수에</td>
      </tr>
      <tr>
        <td id="file--L2564" class="blob-num js-line-number" data-line-number="2564"></td>
        <td id="file--LC2564" class="blob-code blob-code-inner js-file-line">log2를 취해 2^k번째 조상을 최대 몇번 갈 수 있는지 생각한 방식이다.</td>
      </tr>
      <tr>
        <td id="file--L2565" class="blob-num js-line-number" data-line-number="2565"></td>
        <td id="file--LC2565" class="blob-code blob-code-inner js-file-line">만약 노드 수의 최대가 100000이라면 2^16 = 65,536 이므로 max_level은 16임을 알 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2566" class="blob-num js-line-number" data-line-number="2566"></td>
        <td id="file--LC2566" class="blob-code blob-code-inner js-file-line">즉 아무리 최악의 경우라도 가장 아래의 노드가 2^16을 통해 루트 노드를 향해 갈 수 있지, </td>
      </tr>
      <tr>
        <td id="file--L2567" class="blob-num js-line-number" data-line-number="2567"></td>
        <td id="file--LC2567" class="blob-code blob-code-inner js-file-line">2^17을 해버리면 루트 노드를 넘어가버린다.</td>
      </tr>
      <tr>
        <td id="file--L2568" class="blob-num js-line-number" data-line-number="2568"></td>
        <td id="file--LC2568" class="blob-code blob-code-inner js-file-line">DP를 만들기 위한 점화식을 살펴보면 다음과 같다.</td>
      </tr>
      <tr>
        <td id="file--L2569" class="blob-num js-line-number" data-line-number="2569"></td>
        <td id="file--LC2569" class="blob-code blob-code-inner js-file-line">ac[here][i] = ac[ac[here][i - 1]][i-1];</td>
      </tr>
      <tr>
        <td id="file--L2570" class="blob-num js-line-number" data-line-number="2570"></td>
        <td id="file--LC2570" class="blob-code blob-code-inner js-file-line">이것을 보기 좀 더 편하게 해서</td>
      </tr>
      <tr>
        <td id="file--L2571" class="blob-num js-line-number" data-line-number="2571"></td>
        <td id="file--LC2571" class="blob-code blob-code-inner js-file-line">tmp = ac[here][i-1];</td>
      </tr>
      <tr>
        <td id="file--L2572" class="blob-num js-line-number" data-line-number="2572"></td>
        <td id="file--LC2572" class="blob-code blob-code-inner js-file-line">ac[here][i] = ac[tmp][i-1];이라고 설정한다.</td>
      </tr>
      <tr>
        <td id="file--L2573" class="blob-num js-line-number" data-line-number="2573"></td>
        <td id="file--LC2573" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2574" class="blob-num js-line-number" data-line-number="2574"></td>
        <td id="file--LC2574" class="blob-code blob-code-inner js-file-line">그리고 위의 알고리즘을 통해 양방향 그래프에서 단방향 그래프 즉, 트리로 생성하기 위해</td>
      </tr>
      <tr>
        <td id="file--L2575" class="blob-num js-line-number" data-line-number="2575"></td>
        <td id="file--LC2575" class="blob-code blob-code-inner js-file-line">if(there != parent)라는 요소를 추가하여 getTree(there, here);로 트리 및 깊이, 조상을 기록할 수 있게 한다.</td>
      </tr>
      <tr>
        <td id="file--L2576" class="blob-num js-line-number" data-line-number="2576"></td>
        <td id="file--LC2576" class="blob-code blob-code-inner js-file-line">만약 there == parent인곳도 dfs로 들어간다면 영원히 빠져나올 수 없는 재귀가 된다.</td>
      </tr>
      <tr>
        <td id="file--L2577" class="blob-num js-line-number" data-line-number="2577"></td>
        <td id="file--LC2577" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2578" class="blob-num js-line-number" data-line-number="2578"></td>
        <td id="file--LC2578" class="blob-code blob-code-inner js-file-line">이 코드는 a와 b의 깊이를 같도록 해주는 코드이다.</td>
      </tr>
      <tr>
        <td id="file--L2579" class="blob-num js-line-number" data-line-number="2579"></td>
        <td id="file--LC2579" class="blob-code blob-code-inner js-file-line">여기서 의문점이 드는 상황이 2^k번째가 아닌 홀수번째들은 어떻게 파악하냐인데</td>
      </tr>
      <tr>
        <td id="file--L2580" class="blob-num js-line-number" data-line-number="2580"></td>
        <td id="file--LC2580" class="blob-code blob-code-inner js-file-line">for문을 잘 보면 max_level부터 시작하기 때문에(이로인해 O(lgN)이 가능하다.)</td>
      </tr>
      <tr>
        <td id="file--L2581" class="blob-num js-line-number" data-line-number="2581"></td>
        <td id="file--LC2581" class="blob-code blob-code-inner js-file-line">모든 조상에 대해 파악이 가능하고, depth를 맞출 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2582" class="blob-num js-line-number" data-line-number="2582"></td>
        <td id="file--LC2582" class="blob-code blob-code-inner js-file-line">그러한 내용은 주석을 통해 매우 자세히 설명해두었다.</td>
      </tr>
      <tr>
        <td id="file--L2583" class="blob-num js-line-number" data-line-number="2583"></td>
        <td id="file--LC2583" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2584" class="blob-num js-line-number" data-line-number="2584"></td>
        <td id="file--LC2584" class="blob-code blob-code-inner js-file-line">이제 이 코드에 접어드는 순간 a와 b는 depth가 같아진 서로 다른 노드이다.</td>
      </tr>
      <tr>
        <td id="file--L2585" class="blob-num js-line-number" data-line-number="2585"></td>
        <td id="file--LC2585" class="blob-code blob-code-inner js-file-line">현재 lca는 a라고 가정을 해 두고 만약 a == b라면 아래와 같은 상황에서 나타난 lca이기에 그대로 lca는 a가 된다.</td>
      </tr>
      <tr>
        <td id="file--L2586" class="blob-num js-line-number" data-line-number="2586"></td>
        <td id="file--LC2586" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2587" class="blob-num js-line-number" data-line-number="2587"></td>
        <td id="file--LC2587" class="blob-code blob-code-inner js-file-line">그 외의 경우에는 이제 깊이는 같고 노드가 서로 다르니 공통 조상을 찾으러 간다.</td>
      </tr>
      <tr>
        <td id="file--L2588" class="blob-num js-line-number" data-line-number="2588"></td>
        <td id="file--LC2588" class="blob-code blob-code-inner js-file-line">이때도 max_level부터 시작하기 때문에 모든 노드에 대해 조사가 가능하고, (이로인해 O(lgN)이 가능하다.)</td>
      </tr>
      <tr>
        <td id="file--L2589" class="blob-num js-line-number" data-line-number="2589"></td>
        <td id="file--LC2589" class="blob-code blob-code-inner js-file-line">결국 서로 같은 조상이 나오기 직전까지 반복 한 후 </td>
      </tr>
      <tr>
        <td id="file--L2590" class="blob-num js-line-number" data-line-number="2590"></td>
        <td id="file--LC2590" class="blob-code blob-code-inner js-file-line">lca = ac[a][i]에 의해 서로 조상이 같은 다른 노드 a, b둘중 하나의 노드의 조상이 lca가 됨을 알 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2591" class="blob-num js-line-number" data-line-number="2591"></td>
        <td id="file--LC2591" class="blob-code blob-code-inner js-file-line">(서브 트리의 노드 어디에서도 못만나도 결국 루트노드에서 만나게 되어있다.)</td>
      </tr>
      <tr>
        <td id="file--L2592" class="blob-num js-line-number" data-line-number="2592"></td>
        <td id="file--LC2592" class="blob-code blob-code-inner js-file-line">결국 LCA알고리즘을 이용하여 쿼리문 M개가 있는 문제를 해결하면 시간 복잡도는 O(MlgN)이 된다.</td>
      </tr>
      <tr>
        <td id="file--L2593" class="blob-num js-line-number" data-line-number="2593"></td>
        <td id="file--LC2593" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2594" class="blob-num js-line-number" data-line-number="2594"></td>
        <td id="file--LC2594" class="blob-code blob-code-inner js-file-line">출처: https://www.crocus.co.kr/660 [Crocus]</td>
      </tr>
      <tr>
        <td id="file--L2595" class="blob-num js-line-number" data-line-number="2595"></td>
        <td id="file--LC2595" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2596" class="blob-num js-line-number" data-line-number="2596"></td>
        <td id="file--LC2596" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2597" class="blob-num js-line-number" data-line-number="2597"></td>
        <td id="file--LC2597" class="blob-code blob-code-inner js-file-line">[다른코드]</td>
      </tr>
      <tr>
        <td id="file--L2598" class="blob-num js-line-number" data-line-number="2598"></td>
        <td id="file--LC2598" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2599" class="blob-num js-line-number" data-line-number="2599"></td>
        <td id="file--LC2599" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2600" class="blob-num js-line-number" data-line-number="2600"></td>
        <td id="file--LC2600" class="blob-code blob-code-inner js-file-line">#include &lt;cstring&gt;</td>
      </tr>
      <tr>
        <td id="file--L2601" class="blob-num js-line-number" data-line-number="2601"></td>
        <td id="file--LC2601" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2602" class="blob-num js-line-number" data-line-number="2602"></td>
        <td id="file--LC2602" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L2603" class="blob-num js-line-number" data-line-number="2603"></td>
        <td id="file--LC2603" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2604" class="blob-num js-line-number" data-line-number="2604"></td>
        <td id="file--LC2604" class="blob-code blob-code-inner js-file-line">const int MAX = 18; // roundup log(2, 100000)</td>
      </tr>
      <tr>
        <td id="file--L2605" class="blob-num js-line-number" data-line-number="2605"></td>
        <td id="file--LC2605" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2606" class="blob-num js-line-number" data-line-number="2606"></td>
        <td id="file--LC2606" class="blob-code blob-code-inner js-file-line">int N, M;</td>
      </tr>
      <tr>
        <td id="file--L2607" class="blob-num js-line-number" data-line-number="2607"></td>
        <td id="file--LC2607" class="blob-code blob-code-inner js-file-line">int parent[100000][MAX]; // parent[i][k]: i의 2^k번째 부모</td>
      </tr>
      <tr>
        <td id="file--L2608" class="blob-num js-line-number" data-line-number="2608"></td>
        <td id="file--LC2608" class="blob-code blob-code-inner js-file-line">int depth[100000]; // 정점의 깊이 (루트의 깊이: 0)</td>
      </tr>
      <tr>
        <td id="file--L2609" class="blob-num js-line-number" data-line-number="2609"></td>
        <td id="file--LC2609" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; adj[100000]; // 인접 리스트</td>
      </tr>
      <tr>
        <td id="file--L2610" class="blob-num js-line-number" data-line-number="2610"></td>
        <td id="file--LC2610" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2611" class="blob-num js-line-number" data-line-number="2611"></td>
        <td id="file--LC2611" class="blob-code blob-code-inner js-file-line">// dfs로 트리 제작하며 parent[i][0], depth 배열 채움</td>
      </tr>
      <tr>
        <td id="file--L2612" class="blob-num js-line-number" data-line-number="2612"></td>
        <td id="file--LC2612" class="blob-code blob-code-inner js-file-line">void makeTreeByDFS(int curr){</td>
      </tr>
      <tr>
        <td id="file--L2613" class="blob-num js-line-number" data-line-number="2613"></td>
        <td id="file--LC2613" class="blob-code blob-code-inner js-file-line">    for(int next: adj[curr]){</td>
      </tr>
      <tr>
        <td id="file--L2614" class="blob-num js-line-number" data-line-number="2614"></td>
        <td id="file--LC2614" class="blob-code blob-code-inner js-file-line">        if(depth[next] == -1){</td>
      </tr>
      <tr>
        <td id="file--L2615" class="blob-num js-line-number" data-line-number="2615"></td>
        <td id="file--LC2615" class="blob-code blob-code-inner js-file-line">            parent[next][0] = curr;</td>
      </tr>
      <tr>
        <td id="file--L2616" class="blob-num js-line-number" data-line-number="2616"></td>
        <td id="file--LC2616" class="blob-code blob-code-inner js-file-line">            depth[next] = depth[curr] + 1;</td>
      </tr>
      <tr>
        <td id="file--L2617" class="blob-num js-line-number" data-line-number="2617"></td>
        <td id="file--LC2617" class="blob-code blob-code-inner js-file-line">            makeTreeByDFS(next);</td>
      </tr>
      <tr>
        <td id="file--L2618" class="blob-num js-line-number" data-line-number="2618"></td>
        <td id="file--LC2618" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2619" class="blob-num js-line-number" data-line-number="2619"></td>
        <td id="file--LC2619" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2620" class="blob-num js-line-number" data-line-number="2620"></td>
        <td id="file--LC2620" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2621" class="blob-num js-line-number" data-line-number="2621"></td>
        <td id="file--LC2621" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2622" class="blob-num js-line-number" data-line-number="2622"></td>
        <td id="file--LC2622" class="blob-code blob-code-inner js-file-line">int main(){</td>
      </tr>
      <tr>
        <td id="file--L2623" class="blob-num js-line-number" data-line-number="2623"></td>
        <td id="file--LC2623" class="blob-code blob-code-inner js-file-line">    // 트리 정보 입력</td>
      </tr>
      <tr>
        <td id="file--L2624" class="blob-num js-line-number" data-line-number="2624"></td>
        <td id="file--LC2624" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d&quot;, &amp;N);</td>
      </tr>
      <tr>
        <td id="file--L2625" class="blob-num js-line-number" data-line-number="2625"></td>
        <td id="file--LC2625" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;N-1; i++){</td>
      </tr>
      <tr>
        <td id="file--L2626" class="blob-num js-line-number" data-line-number="2626"></td>
        <td id="file--LC2626" class="blob-code blob-code-inner js-file-line">        int u, v;</td>
      </tr>
      <tr>
        <td id="file--L2627" class="blob-num js-line-number" data-line-number="2627"></td>
        <td id="file--LC2627" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d %d&quot;, &amp;u, &amp;v);</td>
      </tr>
      <tr>
        <td id="file--L2628" class="blob-num js-line-number" data-line-number="2628"></td>
        <td id="file--LC2628" class="blob-code blob-code-inner js-file-line">        u--; v--;</td>
      </tr>
      <tr>
        <td id="file--L2629" class="blob-num js-line-number" data-line-number="2629"></td>
        <td id="file--LC2629" class="blob-code blob-code-inner js-file-line">        adj[u].push_back(v);</td>
      </tr>
      <tr>
        <td id="file--L2630" class="blob-num js-line-number" data-line-number="2630"></td>
        <td id="file--LC2630" class="blob-code blob-code-inner js-file-line">        adj[v].push_back(u);</td>
      </tr>
      <tr>
        <td id="file--L2631" class="blob-num js-line-number" data-line-number="2631"></td>
        <td id="file--LC2631" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2632" class="blob-num js-line-number" data-line-number="2632"></td>
        <td id="file--LC2632" class="blob-code blob-code-inner js-file-line">    // 배열 초기화</td>
      </tr>
      <tr>
        <td id="file--L2633" class="blob-num js-line-number" data-line-number="2633"></td>
        <td id="file--LC2633" class="blob-code blob-code-inner js-file-line">    memset(parent, -1, sizeof(parent));</td>
      </tr>
      <tr>
        <td id="file--L2634" class="blob-num js-line-number" data-line-number="2634"></td>
        <td id="file--LC2634" class="blob-code blob-code-inner js-file-line">    fill(depth, depth+N, -1);</td>
      </tr>
      <tr>
        <td id="file--L2635" class="blob-num js-line-number" data-line-number="2635"></td>
        <td id="file--LC2635" class="blob-code blob-code-inner js-file-line">    depth[0] = 0;</td>
      </tr>
      <tr>
        <td id="file--L2636" class="blob-num js-line-number" data-line-number="2636"></td>
        <td id="file--LC2636" class="blob-code blob-code-inner js-file-line">    // 트리 만들기</td>
      </tr>
      <tr>
        <td id="file--L2637" class="blob-num js-line-number" data-line-number="2637"></td>
        <td id="file--LC2637" class="blob-code blob-code-inner js-file-line">    makeTreeByDFS(0);</td>
      </tr>
      <tr>
        <td id="file--L2638" class="blob-num js-line-number" data-line-number="2638"></td>
        <td id="file--LC2638" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2639" class="blob-num js-line-number" data-line-number="2639"></td>
        <td id="file--LC2639" class="blob-code blob-code-inner js-file-line">    // parent 배열 채움</td>
      </tr>
      <tr>
        <td id="file--L2640" class="blob-num js-line-number" data-line-number="2640"></td>
        <td id="file--LC2640" class="blob-code blob-code-inner js-file-line">    for(int j=0; j&lt;MAX-1; j++)</td>
      </tr>
      <tr>
        <td id="file--L2641" class="blob-num js-line-number" data-line-number="2641"></td>
        <td id="file--LC2641" class="blob-code blob-code-inner js-file-line">        for(int i=1; i&lt;N; i++)</td>
      </tr>
      <tr>
        <td id="file--L2642" class="blob-num js-line-number" data-line-number="2642"></td>
        <td id="file--LC2642" class="blob-code blob-code-inner js-file-line">            if(parent[i][j] != -1)</td>
      </tr>
      <tr>
        <td id="file--L2643" class="blob-num js-line-number" data-line-number="2643"></td>
        <td id="file--LC2643" class="blob-code blob-code-inner js-file-line">                parent[i][j+1] = parent[parent[i][j]][j];</td>
      </tr>
      <tr>
        <td id="file--L2644" class="blob-num js-line-number" data-line-number="2644"></td>
        <td id="file--LC2644" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2645" class="blob-num js-line-number" data-line-number="2645"></td>
        <td id="file--LC2645" class="blob-code blob-code-inner js-file-line">    // 쿼리 입력받기</td>
      </tr>
      <tr>
        <td id="file--L2646" class="blob-num js-line-number" data-line-number="2646"></td>
        <td id="file--LC2646" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d&quot;, &amp;M);</td>
      </tr>
      <tr>
        <td id="file--L2647" class="blob-num js-line-number" data-line-number="2647"></td>
        <td id="file--LC2647" class="blob-code blob-code-inner js-file-line">    for(int i=0; i&lt;M; i++){</td>
      </tr>
      <tr>
        <td id="file--L2648" class="blob-num js-line-number" data-line-number="2648"></td>
        <td id="file--LC2648" class="blob-code blob-code-inner js-file-line">        int u, v;</td>
      </tr>
      <tr>
        <td id="file--L2649" class="blob-num js-line-number" data-line-number="2649"></td>
        <td id="file--LC2649" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d %d&quot;, &amp;u, &amp;v);</td>
      </tr>
      <tr>
        <td id="file--L2650" class="blob-num js-line-number" data-line-number="2650"></td>
        <td id="file--LC2650" class="blob-code blob-code-inner js-file-line">        u--; v--;</td>
      </tr>
      <tr>
        <td id="file--L2651" class="blob-num js-line-number" data-line-number="2651"></td>
        <td id="file--LC2651" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2652" class="blob-num js-line-number" data-line-number="2652"></td>
        <td id="file--LC2652" class="blob-code blob-code-inner js-file-line">        // depth[u] &gt;= depth[v]가 되도록 필요에 따라 u, v를 스왑</td>
      </tr>
      <tr>
        <td id="file--L2653" class="blob-num js-line-number" data-line-number="2653"></td>
        <td id="file--LC2653" class="blob-code blob-code-inner js-file-line">        if(depth[u] &lt; depth[v]) swap(u, v);</td>
      </tr>
      <tr>
        <td id="file--L2654" class="blob-num js-line-number" data-line-number="2654"></td>
        <td id="file--LC2654" class="blob-code blob-code-inner js-file-line">        int diff = depth[u] - depth[v];</td>
      </tr>
      <tr>
        <td id="file--L2655" class="blob-num js-line-number" data-line-number="2655"></td>
        <td id="file--LC2655" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2656" class="blob-num js-line-number" data-line-number="2656"></td>
        <td id="file--LC2656" class="blob-code blob-code-inner js-file-line">        // 깊이 차(diff)를 없애며 u를 이동시킴</td>
      </tr>
      <tr>
        <td id="file--L2657" class="blob-num js-line-number" data-line-number="2657"></td>
        <td id="file--LC2657" class="blob-code blob-code-inner js-file-line">        for(int j=0; diff; j++){</td>
      </tr>
      <tr>
        <td id="file--L2658" class="blob-num js-line-number" data-line-number="2658"></td>
        <td id="file--LC2658" class="blob-code blob-code-inner js-file-line">            if(diff % 2) u = parent[u][j];</td>
      </tr>
      <tr>
        <td id="file--L2659" class="blob-num js-line-number" data-line-number="2659"></td>
        <td id="file--LC2659" class="blob-code blob-code-inner js-file-line">            diff /= 2;</td>
      </tr>
      <tr>
        <td id="file--L2660" class="blob-num js-line-number" data-line-number="2660"></td>
        <td id="file--LC2660" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2661" class="blob-num js-line-number" data-line-number="2661"></td>
        <td id="file--LC2661" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2662" class="blob-num js-line-number" data-line-number="2662"></td>
        <td id="file--LC2662" class="blob-code blob-code-inner js-file-line">        // u와 v가 다르면 동시에 일정 높이만큼 위로 이동시킴</td>
      </tr>
      <tr>
        <td id="file--L2663" class="blob-num js-line-number" data-line-number="2663"></td>
        <td id="file--LC2663" class="blob-code blob-code-inner js-file-line">        if(u != v){</td>
      </tr>
      <tr>
        <td id="file--L2664" class="blob-num js-line-number" data-line-number="2664"></td>
        <td id="file--LC2664" class="blob-code blob-code-inner js-file-line">            // 높이 2^17, 2^16, ..., 2^2, 2, 1 순으로 시도</td>
      </tr>
      <tr>
        <td id="file--L2665" class="blob-num js-line-number" data-line-number="2665"></td>
        <td id="file--LC2665" class="blob-code blob-code-inner js-file-line">            for(int j=MAX-1; j&gt;=0; j--){</td>
      </tr>
      <tr>
        <td id="file--L2666" class="blob-num js-line-number" data-line-number="2666"></td>
        <td id="file--LC2666" class="blob-code blob-code-inner js-file-line">                if(parent[u][j] != -1 &amp;&amp; parent[u][j] != parent[v][j]){</td>
      </tr>
      <tr>
        <td id="file--L2667" class="blob-num js-line-number" data-line-number="2667"></td>
        <td id="file--LC2667" class="blob-code blob-code-inner js-file-line">                    u = parent[u][j];</td>
      </tr>
      <tr>
        <td id="file--L2668" class="blob-num js-line-number" data-line-number="2668"></td>
        <td id="file--LC2668" class="blob-code blob-code-inner js-file-line">                    v = parent[v][j];</td>
      </tr>
      <tr>
        <td id="file--L2669" class="blob-num js-line-number" data-line-number="2669"></td>
        <td id="file--LC2669" class="blob-code blob-code-inner js-file-line">                }</td>
      </tr>
      <tr>
        <td id="file--L2670" class="blob-num js-line-number" data-line-number="2670"></td>
        <td id="file--LC2670" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L2671" class="blob-num js-line-number" data-line-number="2671"></td>
        <td id="file--LC2671" class="blob-code blob-code-inner js-file-line">            // 마지막엔 두 정점 u, v의 부모가 같으므로 한 번 더 올림</td>
      </tr>
      <tr>
        <td id="file--L2672" class="blob-num js-line-number" data-line-number="2672"></td>
        <td id="file--LC2672" class="blob-code blob-code-inner js-file-line">            u = parent[u][0];</td>
      </tr>
      <tr>
        <td id="file--L2673" class="blob-num js-line-number" data-line-number="2673"></td>
        <td id="file--LC2673" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2674" class="blob-num js-line-number" data-line-number="2674"></td>
        <td id="file--LC2674" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2675" class="blob-num js-line-number" data-line-number="2675"></td>
        <td id="file--LC2675" class="blob-code blob-code-inner js-file-line">        // LCA 출력</td>
      </tr>
      <tr>
        <td id="file--L2676" class="blob-num js-line-number" data-line-number="2676"></td>
        <td id="file--LC2676" class="blob-code blob-code-inner js-file-line">        printf(&quot;%d\n&quot;, u+1);</td>
      </tr>
      <tr>
        <td id="file--L2677" class="blob-num js-line-number" data-line-number="2677"></td>
        <td id="file--LC2677" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2678" class="blob-num js-line-number" data-line-number="2678"></td>
        <td id="file--LC2678" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2679" class="blob-num js-line-number" data-line-number="2679"></td>
        <td id="file--LC2679" class="blob-code blob-code-inner js-file-line">[출처] 최소 공통 조상(Lowest Common Ancestor) (수정: 2017-02-04)|작성자 라이</td>
      </tr>
      <tr>
        <td id="file--L2680" class="blob-num js-line-number" data-line-number="2680"></td>
        <td id="file--LC2680" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2681" class="blob-num js-line-number" data-line-number="2681"></td>
        <td id="file--LC2681" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2682" class="blob-num js-line-number" data-line-number="2682"></td>
        <td id="file--LC2682" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2683" class="blob-num js-line-number" data-line-number="2683"></td>
        <td id="file--LC2683" class="blob-code blob-code-inner js-file-line">■ 백 트레킹 - 순열,조합,중복순열,중복조합</td>
      </tr>
      <tr>
        <td id="file--L2684" class="blob-num js-line-number" data-line-number="2684"></td>
        <td id="file--LC2684" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2685" class="blob-num js-line-number" data-line-number="2685"></td>
        <td id="file--LC2685" class="blob-code blob-code-inner js-file-line">순열은 아래와 같이 코딩 할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2686" class="blob-num js-line-number" data-line-number="2686"></td>
        <td id="file--LC2686" class="blob-code blob-code-inner js-file-line">현재 값을 넣고 방문을 표시해준 후 다음 재귀를 반복하면 방문된 값들 빼고 계속 처리를 할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2687" class="blob-num js-line-number" data-line-number="2687"></td>
        <td id="file--LC2687" class="blob-code blob-code-inner js-file-line">그 후 내가 출력 할 값이 m과 같아지면 출력을 하면 된다.</td>
      </tr>
      <tr>
        <td id="file--L2688" class="blob-num js-line-number" data-line-number="2688"></td>
        <td id="file--LC2688" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2689" class="blob-num js-line-number" data-line-number="2689"></td>
        <td id="file--LC2689" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L2690" class="blob-num js-line-number" data-line-number="2690"></td>
        <td id="file--LC2690" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2691" class="blob-num js-line-number" data-line-number="2691"></td>
        <td id="file--LC2691" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2692" class="blob-num js-line-number" data-line-number="2692"></td>
        <td id="file--LC2692" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2693" class="blob-num js-line-number" data-line-number="2693"></td>
        <td id="file--LC2693" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2694" class="blob-num js-line-number" data-line-number="2694"></td>
        <td id="file--LC2694" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2695" class="blob-num js-line-number" data-line-number="2695"></td>
        <td id="file--LC2695" class="blob-code blob-code-inner js-file-line">int n, m;</td>
      </tr>
      <tr>
        <td id="file--L2696" class="blob-num js-line-number" data-line-number="2696"></td>
        <td id="file--LC2696" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; vc; // 내가 출력할 것</td>
      </tr>
      <tr>
        <td id="file--L2697" class="blob-num js-line-number" data-line-number="2697"></td>
        <td id="file--LC2697" class="blob-code blob-code-inner js-file-line">bool visit[10]; // 그 숫자가 쓰는지확인</td>
      </tr>
      <tr>
        <td id="file--L2698" class="blob-num js-line-number" data-line-number="2698"></td>
        <td id="file--LC2698" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2699" class="blob-num js-line-number" data-line-number="2699"></td>
        <td id="file--LC2699" class="blob-code blob-code-inner js-file-line">void dfs()</td>
      </tr>
      <tr>
        <td id="file--L2700" class="blob-num js-line-number" data-line-number="2700"></td>
        <td id="file--LC2700" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2701" class="blob-num js-line-number" data-line-number="2701"></td>
        <td id="file--LC2701" class="blob-code blob-code-inner js-file-line">    if (vc.size() == m)</td>
      </tr>
      <tr>
        <td id="file--L2702" class="blob-num js-line-number" data-line-number="2702"></td>
        <td id="file--LC2702" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2703" class="blob-num js-line-number" data-line-number="2703"></td>
        <td id="file--LC2703" class="blob-code blob-code-inner js-file-line">        for (auto i : vc)</td>
      </tr>
      <tr>
        <td id="file--L2704" class="blob-num js-line-number" data-line-number="2704"></td>
        <td id="file--LC2704" class="blob-code blob-code-inner js-file-line">            printf(&quot;%d &quot;, i);</td>
      </tr>
      <tr>
        <td id="file--L2705" class="blob-num js-line-number" data-line-number="2705"></td>
        <td id="file--LC2705" class="blob-code blob-code-inner js-file-line">        printf(&quot;\n&quot;);</td>
      </tr>
      <tr>
        <td id="file--L2706" class="blob-num js-line-number" data-line-number="2706"></td>
        <td id="file--LC2706" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2707" class="blob-num js-line-number" data-line-number="2707"></td>
        <td id="file--LC2707" class="blob-code blob-code-inner js-file-line">        return;</td>
      </tr>
      <tr>
        <td id="file--L2708" class="blob-num js-line-number" data-line-number="2708"></td>
        <td id="file--LC2708" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2709" class="blob-num js-line-number" data-line-number="2709"></td>
        <td id="file--LC2709" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2710" class="blob-num js-line-number" data-line-number="2710"></td>
        <td id="file--LC2710" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2711" class="blob-num js-line-number" data-line-number="2711"></td>
        <td id="file--LC2711" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2712" class="blob-num js-line-number" data-line-number="2712"></td>
        <td id="file--LC2712" class="blob-code blob-code-inner js-file-line">        if (!visit[i])</td>
      </tr>
      <tr>
        <td id="file--L2713" class="blob-num js-line-number" data-line-number="2713"></td>
        <td id="file--LC2713" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2714" class="blob-num js-line-number" data-line-number="2714"></td>
        <td id="file--LC2714" class="blob-code blob-code-inner js-file-line">            visit[i] = true;</td>
      </tr>
      <tr>
        <td id="file--L2715" class="blob-num js-line-number" data-line-number="2715"></td>
        <td id="file--LC2715" class="blob-code blob-code-inner js-file-line">            vc.push_back(i);</td>
      </tr>
      <tr>
        <td id="file--L2716" class="blob-num js-line-number" data-line-number="2716"></td>
        <td id="file--LC2716" class="blob-code blob-code-inner js-file-line">            dfs();</td>
      </tr>
      <tr>
        <td id="file--L2717" class="blob-num js-line-number" data-line-number="2717"></td>
        <td id="file--LC2717" class="blob-code blob-code-inner js-file-line">            vc.pop_back();</td>
      </tr>
      <tr>
        <td id="file--L2718" class="blob-num js-line-number" data-line-number="2718"></td>
        <td id="file--LC2718" class="blob-code blob-code-inner js-file-line">            visit[i] = false;</td>
      </tr>
      <tr>
        <td id="file--L2719" class="blob-num js-line-number" data-line-number="2719"></td>
        <td id="file--LC2719" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2720" class="blob-num js-line-number" data-line-number="2720"></td>
        <td id="file--LC2720" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2721" class="blob-num js-line-number" data-line-number="2721"></td>
        <td id="file--LC2721" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2722" class="blob-num js-line-number" data-line-number="2722"></td>
        <td id="file--LC2722" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2723" class="blob-num js-line-number" data-line-number="2723"></td>
        <td id="file--LC2723" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L2724" class="blob-num js-line-number" data-line-number="2724"></td>
        <td id="file--LC2724" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2725" class="blob-num js-line-number" data-line-number="2725"></td>
        <td id="file--LC2725" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2726" class="blob-num js-line-number" data-line-number="2726"></td>
        <td id="file--LC2726" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2727" class="blob-num js-line-number" data-line-number="2727"></td>
        <td id="file--LC2727" class="blob-code blob-code-inner js-file-line">    dfs();</td>
      </tr>
      <tr>
        <td id="file--L2728" class="blob-num js-line-number" data-line-number="2728"></td>
        <td id="file--LC2728" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2729" class="blob-num js-line-number" data-line-number="2729"></td>
        <td id="file--LC2729" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2730" class="blob-num js-line-number" data-line-number="2730"></td>
        <td id="file--LC2730" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2731" class="blob-num js-line-number" data-line-number="2731"></td>
        <td id="file--LC2731" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2732" class="blob-num js-line-number" data-line-number="2732"></td>
        <td id="file--LC2732" class="blob-code blob-code-inner js-file-line">조합은 이전 수의 참조를 하면 안된다는 것을 생각하면 쉽게 구현 할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2733" class="blob-num js-line-number" data-line-number="2733"></td>
        <td id="file--LC2733" class="blob-code blob-code-inner js-file-line">재귀에 인자가 들어가는데 현재 인덱스 다음 인덱스를 인자로 보내어 이전 값을 참조 못하도록 하자.</td>
      </tr>
      <tr>
        <td id="file--L2734" class="blob-num js-line-number" data-line-number="2734"></td>
        <td id="file--LC2734" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2735" class="blob-num js-line-number" data-line-number="2735"></td>
        <td id="file--LC2735" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L2736" class="blob-num js-line-number" data-line-number="2736"></td>
        <td id="file--LC2736" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2737" class="blob-num js-line-number" data-line-number="2737"></td>
        <td id="file--LC2737" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2738" class="blob-num js-line-number" data-line-number="2738"></td>
        <td id="file--LC2738" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2739" class="blob-num js-line-number" data-line-number="2739"></td>
        <td id="file--LC2739" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2740" class="blob-num js-line-number" data-line-number="2740"></td>
        <td id="file--LC2740" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2741" class="blob-num js-line-number" data-line-number="2741"></td>
        <td id="file--LC2741" class="blob-code blob-code-inner js-file-line">int n, m;</td>
      </tr>
      <tr>
        <td id="file--L2742" class="blob-num js-line-number" data-line-number="2742"></td>
        <td id="file--LC2742" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2743" class="blob-num js-line-number" data-line-number="2743"></td>
        <td id="file--LC2743" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; vc;</td>
      </tr>
      <tr>
        <td id="file--L2744" class="blob-num js-line-number" data-line-number="2744"></td>
        <td id="file--LC2744" class="blob-code blob-code-inner js-file-line">void dfs(int cnt)</td>
      </tr>
      <tr>
        <td id="file--L2745" class="blob-num js-line-number" data-line-number="2745"></td>
        <td id="file--LC2745" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2746" class="blob-num js-line-number" data-line-number="2746"></td>
        <td id="file--LC2746" class="blob-code blob-code-inner js-file-line">    if (vc.size() == m)</td>
      </tr>
      <tr>
        <td id="file--L2747" class="blob-num js-line-number" data-line-number="2747"></td>
        <td id="file--LC2747" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2748" class="blob-num js-line-number" data-line-number="2748"></td>
        <td id="file--LC2748" class="blob-code blob-code-inner js-file-line">        for (auto i : vc)</td>
      </tr>
      <tr>
        <td id="file--L2749" class="blob-num js-line-number" data-line-number="2749"></td>
        <td id="file--LC2749" class="blob-code blob-code-inner js-file-line">            printf(&quot;%d &quot;, i);</td>
      </tr>
      <tr>
        <td id="file--L2750" class="blob-num js-line-number" data-line-number="2750"></td>
        <td id="file--LC2750" class="blob-code blob-code-inner js-file-line">        printf(&quot;\n&quot;);</td>
      </tr>
      <tr>
        <td id="file--L2751" class="blob-num js-line-number" data-line-number="2751"></td>
        <td id="file--LC2751" class="blob-code blob-code-inner js-file-line">        return;</td>
      </tr>
      <tr>
        <td id="file--L2752" class="blob-num js-line-number" data-line-number="2752"></td>
        <td id="file--LC2752" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2753" class="blob-num js-line-number" data-line-number="2753"></td>
        <td id="file--LC2753" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2754" class="blob-num js-line-number" data-line-number="2754"></td>
        <td id="file--LC2754" class="blob-code blob-code-inner js-file-line">    for (int i = cnt; i &lt;= n; i++)</td>
      </tr>
      <tr>
        <td id="file--L2755" class="blob-num js-line-number" data-line-number="2755"></td>
        <td id="file--LC2755" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L2756" class="blob-num js-line-number" data-line-number="2756"></td>
        <td id="file--LC2756" class="blob-code blob-code-inner js-file-line">        if (vc.size() &lt; m)</td>
      </tr>
      <tr>
        <td id="file--L2757" class="blob-num js-line-number" data-line-number="2757"></td>
        <td id="file--LC2757" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L2758" class="blob-num js-line-number" data-line-number="2758"></td>
        <td id="file--LC2758" class="blob-code blob-code-inner js-file-line">            vc.push_back(i);</td>
      </tr>
      <tr>
        <td id="file--L2759" class="blob-num js-line-number" data-line-number="2759"></td>
        <td id="file--LC2759" class="blob-code blob-code-inner js-file-line">            dfs(i + 1);</td>
      </tr>
      <tr>
        <td id="file--L2760" class="blob-num js-line-number" data-line-number="2760"></td>
        <td id="file--LC2760" class="blob-code blob-code-inner js-file-line">            vc.pop_back();</td>
      </tr>
      <tr>
        <td id="file--L2761" class="blob-num js-line-number" data-line-number="2761"></td>
        <td id="file--LC2761" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2762" class="blob-num js-line-number" data-line-number="2762"></td>
        <td id="file--LC2762" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2763" class="blob-num js-line-number" data-line-number="2763"></td>
        <td id="file--LC2763" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2764" class="blob-num js-line-number" data-line-number="2764"></td>
        <td id="file--LC2764" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L2765" class="blob-num js-line-number" data-line-number="2765"></td>
        <td id="file--LC2765" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L2766" class="blob-num js-line-number" data-line-number="2766"></td>
        <td id="file--LC2766" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d %d&quot;, &amp;n, &amp;m);</td>
      </tr>
      <tr>
        <td id="file--L2767" class="blob-num js-line-number" data-line-number="2767"></td>
        <td id="file--LC2767" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2768" class="blob-num js-line-number" data-line-number="2768"></td>
        <td id="file--LC2768" class="blob-code blob-code-inner js-file-line">    dfs(1);</td>
      </tr>
      <tr>
        <td id="file--L2769" class="blob-num js-line-number" data-line-number="2769"></td>
        <td id="file--LC2769" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2770" class="blob-num js-line-number" data-line-number="2770"></td>
        <td id="file--LC2770" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2771" class="blob-num js-line-number" data-line-number="2771"></td>
        <td id="file--LC2771" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L2772" class="blob-num js-line-number" data-line-number="2772"></td>
        <td id="file--LC2772" class="blob-code blob-code-inner js-file-line">출처: https://www.crocus.co.kr/1240?category=209527 [Crocus]</td>
      </tr>
      <tr>
        <td id="file--L2773" class="blob-num js-line-number" data-line-number="2773"></td>
        <td id="file--LC2773" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2774" class="blob-num js-line-number" data-line-number="2774"></td>
        <td id="file--LC2774" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2775" class="blob-num js-line-number" data-line-number="2775"></td>
        <td id="file--LC2775" class="blob-code blob-code-inner js-file-line">■ KMP 알고리즘(Knuth, Morris, Prett이기 때문에 앞글자를 하나씩 따서 KMP알고리즘)</td>
      </tr>
      <tr>
        <td id="file--L2776" class="blob-num js-line-number" data-line-number="2776"></td>
        <td id="file--LC2776" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2777" class="blob-num js-line-number" data-line-number="2777"></td>
        <td id="file--LC2777" class="blob-code blob-code-inner js-file-line">텍스트 &quot;ABCABABCDE&quot;에서 패턴 &quot;ABC&quot;가 어디서 등장하는지 찾을때 패턴 &quot;ABC&quot;를 한자리씩 옮기면서 같은지 비교한다.</td>
      </tr>
      <tr>
        <td id="file--L2778" class="blob-num js-line-number" data-line-number="2778"></td>
        <td id="file--LC2778" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2779" class="blob-num js-line-number" data-line-number="2779"></td>
        <td id="file--LC2779" class="blob-code blob-code-inner js-file-line">KMP알고리즘은 O(N+M)으로 위의 무식한 방법 O(NM)보다 빠르다.</td>
      </tr>
      <tr>
        <td id="file--L2780" class="blob-num js-line-number" data-line-number="2780"></td>
        <td id="file--LC2780" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2781" class="blob-num js-line-number" data-line-number="2781"></td>
        <td id="file--LC2781" class="blob-code blob-code-inner js-file-line">접두사(prefix)와 접미사(suffix)</td>
      </tr>
      <tr>
        <td id="file--L2782" class="blob-num js-line-number" data-line-number="2782"></td>
        <td id="file--LC2782" class="blob-code blob-code-inner js-file-line">&lt;banana의 접두사&gt;</td>
      </tr>
      <tr>
        <td id="file--L2783" class="blob-num js-line-number" data-line-number="2783"></td>
        <td id="file--LC2783" class="blob-code blob-code-inner js-file-line">b</td>
      </tr>
      <tr>
        <td id="file--L2784" class="blob-num js-line-number" data-line-number="2784"></td>
        <td id="file--LC2784" class="blob-code blob-code-inner js-file-line">ba</td>
      </tr>
      <tr>
        <td id="file--L2785" class="blob-num js-line-number" data-line-number="2785"></td>
        <td id="file--LC2785" class="blob-code blob-code-inner js-file-line">ban</td>
      </tr>
      <tr>
        <td id="file--L2786" class="blob-num js-line-number" data-line-number="2786"></td>
        <td id="file--LC2786" class="blob-code blob-code-inner js-file-line">bana</td>
      </tr>
      <tr>
        <td id="file--L2787" class="blob-num js-line-number" data-line-number="2787"></td>
        <td id="file--LC2787" class="blob-code blob-code-inner js-file-line">banan</td>
      </tr>
      <tr>
        <td id="file--L2788" class="blob-num js-line-number" data-line-number="2788"></td>
        <td id="file--LC2788" class="blob-code blob-code-inner js-file-line">banana</td>
      </tr>
      <tr>
        <td id="file--L2789" class="blob-num js-line-number" data-line-number="2789"></td>
        <td id="file--LC2789" class="blob-code blob-code-inner js-file-line">이 6개가 banana의 접두사(prefix)</td>
      </tr>
      <tr>
        <td id="file--L2790" class="blob-num js-line-number" data-line-number="2790"></td>
        <td id="file--LC2790" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2791" class="blob-num js-line-number" data-line-number="2791"></td>
        <td id="file--LC2791" class="blob-code blob-code-inner js-file-line">&lt;banana의 접미사&gt;</td>
      </tr>
      <tr>
        <td id="file--L2792" class="blob-num js-line-number" data-line-number="2792"></td>
        <td id="file--LC2792" class="blob-code blob-code-inner js-file-line">a</td>
      </tr>
      <tr>
        <td id="file--L2793" class="blob-num js-line-number" data-line-number="2793"></td>
        <td id="file--LC2793" class="blob-code blob-code-inner js-file-line">na</td>
      </tr>
      <tr>
        <td id="file--L2794" class="blob-num js-line-number" data-line-number="2794"></td>
        <td id="file--LC2794" class="blob-code blob-code-inner js-file-line">ana</td>
      </tr>
      <tr>
        <td id="file--L2795" class="blob-num js-line-number" data-line-number="2795"></td>
        <td id="file--LC2795" class="blob-code blob-code-inner js-file-line">nana</td>
      </tr>
      <tr>
        <td id="file--L2796" class="blob-num js-line-number" data-line-number="2796"></td>
        <td id="file--LC2796" class="blob-code blob-code-inner js-file-line">anana</td>
      </tr>
      <tr>
        <td id="file--L2797" class="blob-num js-line-number" data-line-number="2797"></td>
        <td id="file--LC2797" class="blob-code blob-code-inner js-file-line">banana</td>
      </tr>
      <tr>
        <td id="file--L2798" class="blob-num js-line-number" data-line-number="2798"></td>
        <td id="file--LC2798" class="blob-code blob-code-inner js-file-line">이 6개가 banana의 접미사(suffix)</td>
      </tr>
      <tr>
        <td id="file--L2799" class="blob-num js-line-number" data-line-number="2799"></td>
        <td id="file--LC2799" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2800" class="blob-num js-line-number" data-line-number="2800"></td>
        <td id="file--LC2800" class="blob-code blob-code-inner js-file-line">pi[i]는 주어진 문자열의 0~i 까지의 부분 문자열 중에서 prefix == suffix가 될 수 있는 부분 문자열 중에서 가장 긴 것의 길이</td>
      </tr>
      <tr>
        <td id="file--L2801" class="blob-num js-line-number" data-line-number="2801"></td>
        <td id="file--LC2801" class="blob-code blob-code-inner js-file-line">(이때 prefix가 0~i 까지의 부분 문자열과 같으면 안된다.)</td>
      </tr>
      <tr>
        <td id="file--L2802" class="blob-num js-line-number" data-line-number="2802"></td>
        <td id="file--LC2802" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2803" class="blob-num js-line-number" data-line-number="2803"></td>
        <td id="file--LC2803" class="blob-code blob-code-inner js-file-line">&quot;ABAABAB&quot;의 pi배열의 최대값은 3이다. ABA ABA일 때</td>
      </tr>
      <tr>
        <td id="file--L2804" class="blob-num js-line-number" data-line-number="2804"></td>
        <td id="file--LC2804" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2805" class="blob-num js-line-number" data-line-number="2805"></td>
        <td id="file--LC2805" class="blob-code blob-code-inner js-file-line">텍스트 &quot;ABCDABCDABEE&quot;에서 패턴 &quot;ABCDABE&quot;를 찾는 상황을 생각해보자.</td>
      </tr>
      <tr>
        <td id="file--L2806" class="blob-num js-line-number" data-line-number="2806"></td>
        <td id="file--LC2806" class="blob-code blob-code-inner js-file-line">첫번째 시도에서 패턴의 0~5부분 문자열(&quot;ABCDAB&quot;)는 텍스트와 일치했지만 6번째 인덱스의 E가 텍스트와 일치하지 않는다.</td>
      </tr>
      <tr>
        <td id="file--L2807" class="blob-num js-line-number" data-line-number="2807"></td>
        <td id="file--LC2807" class="blob-code blob-code-inner js-file-line">무식한 방법은 0-5부분이 일치했다는 정보를 무시한다. KMP는 이를 활용한다.</td>
      </tr>
      <tr>
        <td id="file--L2808" class="blob-num js-line-number" data-line-number="2808"></td>
        <td id="file--LC2808" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2809" class="blob-num js-line-number" data-line-number="2809"></td>
        <td id="file--LC2809" class="blob-code blob-code-inner js-file-line">&quot;ABCDABE&quot;의 pi[5] =2 (AB CD AB)이기에 pi[5]의 값이 2이니까 6-2 4인덱스 부터 시작해서 AB가 같을걸 알기에 C(i지점)부터 비교하면된다.</td>
      </tr>
      <tr>
        <td id="file--L2810" class="blob-num js-line-number" data-line-number="2810"></td>
        <td id="file--LC2810" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2811" class="blob-num js-line-number" data-line-number="2811"></td>
        <td id="file--LC2811" class="blob-code blob-code-inner js-file-line">ABCDABCDABEE</td>
      </tr>
      <tr>
        <td id="file--L2812" class="blob-num js-line-number" data-line-number="2812"></td>
        <td id="file--LC2812" class="blob-code blob-code-inner js-file-line">    ABCDABE</td>
      </tr>
      <tr>
        <td id="file--L2813" class="blob-num js-line-number" data-line-number="2813"></td>
        <td id="file--LC2813" class="blob-code blob-code-inner js-file-line">      i</td>
      </tr>
      <tr>
        <td id="file--L2814" class="blob-num js-line-number" data-line-number="2814"></td>
        <td id="file--LC2814" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2815" class="blob-num js-line-number" data-line-number="2815"></td>
        <td id="file--LC2815" class="blob-code blob-code-inner js-file-line">[구현코드]</td>
      </tr>
      <tr>
        <td id="file--L2816" class="blob-num js-line-number" data-line-number="2816"></td>
        <td id="file--LC2816" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; getPi(string p){</td>
      </tr>
      <tr>
        <td id="file--L2817" class="blob-num js-line-number" data-line-number="2817"></td>
        <td id="file--LC2817" class="blob-code blob-code-inner js-file-line">    int m = (int)p.size(), j=0;</td>
      </tr>
      <tr>
        <td id="file--L2818" class="blob-num js-line-number" data-line-number="2818"></td>
        <td id="file--LC2818" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; pi(m, 0);</td>
      </tr>
      <tr>
        <td id="file--L2819" class="blob-num js-line-number" data-line-number="2819"></td>
        <td id="file--LC2819" class="blob-code blob-code-inner js-file-line">    for(int i = 1; i&lt; m ; i++){</td>
      </tr>
      <tr>
        <td id="file--L2820" class="blob-num js-line-number" data-line-number="2820"></td>
        <td id="file--LC2820" class="blob-code blob-code-inner js-file-line">        while(j &gt; 0 &amp;&amp; p[i] !=  p[j])</td>
      </tr>
      <tr>
        <td id="file--L2821" class="blob-num js-line-number" data-line-number="2821"></td>
        <td id="file--LC2821" class="blob-code blob-code-inner js-file-line">            j = pi[j-1];</td>
      </tr>
      <tr>
        <td id="file--L2822" class="blob-num js-line-number" data-line-number="2822"></td>
        <td id="file--LC2822" class="blob-code blob-code-inner js-file-line">        if(p[i] == p[j])</td>
      </tr>
      <tr>
        <td id="file--L2823" class="blob-num js-line-number" data-line-number="2823"></td>
        <td id="file--LC2823" class="blob-code blob-code-inner js-file-line">            pi[i] = ++j;</td>
      </tr>
      <tr>
        <td id="file--L2824" class="blob-num js-line-number" data-line-number="2824"></td>
        <td id="file--LC2824" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2825" class="blob-num js-line-number" data-line-number="2825"></td>
        <td id="file--LC2825" class="blob-code blob-code-inner js-file-line">    return pi;</td>
      </tr>
      <tr>
        <td id="file--L2826" class="blob-num js-line-number" data-line-number="2826"></td>
        <td id="file--LC2826" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2827" class="blob-num js-line-number" data-line-number="2827"></td>
        <td id="file--LC2827" class="blob-code blob-code-inner js-file-line">vector&lt;int&gt; kmp(string s, string p){</td>
      </tr>
      <tr>
        <td id="file--L2828" class="blob-num js-line-number" data-line-number="2828"></td>
        <td id="file--LC2828" class="blob-code blob-code-inner js-file-line">    vector&lt;int&gt; ans;</td>
      </tr>
      <tr>
        <td id="file--L2829" class="blob-num js-line-number" data-line-number="2829"></td>
        <td id="file--LC2829" class="blob-code blob-code-inner js-file-line">    auto pi = getPi(p);</td>
      </tr>
      <tr>
        <td id="file--L2830" class="blob-num js-line-number" data-line-number="2830"></td>
        <td id="file--LC2830" class="blob-code blob-code-inner js-file-line">    int n = (int)s.size(), m = (int)p.size(), j =0;</td>
      </tr>
      <tr>
        <td id="file--L2831" class="blob-num js-line-number" data-line-number="2831"></td>
        <td id="file--LC2831" class="blob-code blob-code-inner js-file-line">    for(int i = 0 ; i &lt; n ; i++){</td>
      </tr>
      <tr>
        <td id="file--L2832" class="blob-num js-line-number" data-line-number="2832"></td>
        <td id="file--LC2832" class="blob-code blob-code-inner js-file-line">        while(j&gt;0 &amp;&amp; s[i] != p[j])</td>
      </tr>
      <tr>
        <td id="file--L2833" class="blob-num js-line-number" data-line-number="2833"></td>
        <td id="file--LC2833" class="blob-code blob-code-inner js-file-line">            j = pi[j-1];</td>
      </tr>
      <tr>
        <td id="file--L2834" class="blob-num js-line-number" data-line-number="2834"></td>
        <td id="file--LC2834" class="blob-code blob-code-inner js-file-line">        if(s[i] == p[j]){</td>
      </tr>
      <tr>
        <td id="file--L2835" class="blob-num js-line-number" data-line-number="2835"></td>
        <td id="file--LC2835" class="blob-code blob-code-inner js-file-line">            if(j==m-1){</td>
      </tr>
      <tr>
        <td id="file--L2836" class="blob-num js-line-number" data-line-number="2836"></td>
        <td id="file--LC2836" class="blob-code blob-code-inner js-file-line">                ans.push_back(i-m+1);</td>
      </tr>
      <tr>
        <td id="file--L2837" class="blob-num js-line-number" data-line-number="2837"></td>
        <td id="file--LC2837" class="blob-code blob-code-inner js-file-line">                j = pi[j];</td>
      </tr>
      <tr>
        <td id="file--L2838" class="blob-num js-line-number" data-line-number="2838"></td>
        <td id="file--LC2838" class="blob-code blob-code-inner js-file-line">            }else{</td>
      </tr>
      <tr>
        <td id="file--L2839" class="blob-num js-line-number" data-line-number="2839"></td>
        <td id="file--LC2839" class="blob-code blob-code-inner js-file-line">                j++;</td>
      </tr>
      <tr>
        <td id="file--L2840" class="blob-num js-line-number" data-line-number="2840"></td>
        <td id="file--LC2840" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L2841" class="blob-num js-line-number" data-line-number="2841"></td>
        <td id="file--LC2841" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2842" class="blob-num js-line-number" data-line-number="2842"></td>
        <td id="file--LC2842" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2843" class="blob-num js-line-number" data-line-number="2843"></td>
        <td id="file--LC2843" class="blob-code blob-code-inner js-file-line">    return ans;</td>
      </tr>
      <tr>
        <td id="file--L2844" class="blob-num js-line-number" data-line-number="2844"></td>
        <td id="file--LC2844" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2845" class="blob-num js-line-number" data-line-number="2845"></td>
        <td id="file--LC2845" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2846" class="blob-num js-line-number" data-line-number="2846"></td>
        <td id="file--LC2846" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2847" class="blob-num js-line-number" data-line-number="2847"></td>
        <td id="file--LC2847" class="blob-code blob-code-inner js-file-line">[다른구현코드]</td>
      </tr>
      <tr>
        <td id="file--L2848" class="blob-num js-line-number" data-line-number="2848"></td>
        <td id="file--LC2848" class="blob-code blob-code-inner js-file-line">void getpi(){</td>
      </tr>
      <tr>
        <td id="file--L2849" class="blob-num js-line-number" data-line-number="2849"></td>
        <td id="file--LC2849" class="blob-code blob-code-inner js-file-line">    pi.resize(b.length());</td>
      </tr>
      <tr>
        <td id="file--L2850" class="blob-num js-line-number" data-line-number="2850"></td>
        <td id="file--LC2850" class="blob-code blob-code-inner js-file-line">    int j = 0;</td>
      </tr>
      <tr>
        <td id="file--L2851" class="blob-num js-line-number" data-line-number="2851"></td>
        <td id="file--LC2851" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt; b.length(); i++){</td>
      </tr>
      <tr>
        <td id="file--L2852" class="blob-num js-line-number" data-line-number="2852"></td>
        <td id="file--LC2852" class="blob-code blob-code-inner js-file-line">        while (j &gt; 0 &amp;&amp; b[i] != b[j])    </td>
      </tr>
      <tr>
        <td id="file--L2853" class="blob-num js-line-number" data-line-number="2853"></td>
        <td id="file--LC2853" class="blob-code blob-code-inner js-file-line">            j = pi[j - 1];        //불일치가 일어날 경우</td>
      </tr>
      <tr>
        <td id="file--L2854" class="blob-num js-line-number" data-line-number="2854"></td>
        <td id="file--LC2854" class="blob-code blob-code-inner js-file-line">        if (b[i] == b[j])</td>
      </tr>
      <tr>
        <td id="file--L2855" class="blob-num js-line-number" data-line-number="2855"></td>
        <td id="file--LC2855" class="blob-code blob-code-inner js-file-line">            pi[i] = ++j;        //prefix가 같은 가중치만큼 pi를 정해줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2856" class="blob-num js-line-number" data-line-number="2856"></td>
        <td id="file--LC2856" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2857" class="blob-num js-line-number" data-line-number="2857"></td>
        <td id="file--LC2857" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2858" class="blob-num js-line-number" data-line-number="2858"></td>
        <td id="file--LC2858" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2859" class="blob-num js-line-number" data-line-number="2859"></td>
        <td id="file--LC2859" class="blob-code blob-code-inner js-file-line">void kmp(){</td>
      </tr>
      <tr>
        <td id="file--L2860" class="blob-num js-line-number" data-line-number="2860"></td>
        <td id="file--LC2860" class="blob-code blob-code-inner js-file-line">    int j = 0;</td>
      </tr>
      <tr>
        <td id="file--L2861" class="blob-num js-line-number" data-line-number="2861"></td>
        <td id="file--LC2861" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; a.length(); i++){</td>
      </tr>
      <tr>
        <td id="file--L2862" class="blob-num js-line-number" data-line-number="2862"></td>
        <td id="file--LC2862" class="blob-code blob-code-inner js-file-line">        while (j &gt; 0 &amp;&amp; a[i] != b[j])        //현재 j만큼 찾았는데 이번에 비교하는 문자가 다른 경우</td>
      </tr>
      <tr>
        <td id="file--L2863" class="blob-num js-line-number" data-line-number="2863"></td>
        <td id="file--LC2863" class="blob-code blob-code-inner js-file-line">            j = pi[j - 1];        //문자열 B를 failure function 이후 부터 비교를 해줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2864" class="blob-num js-line-number" data-line-number="2864"></td>
        <td id="file--LC2864" class="blob-code blob-code-inner js-file-line">        if (a[i] == b[j]){            //비교하는 문자가 같은 경우</td>
      </tr>
      <tr>
        <td id="file--L2865" class="blob-num js-line-number" data-line-number="2865"></td>
        <td id="file--LC2865" class="blob-code blob-code-inner js-file-line">            if (j == b.length() - 1){    //문자열 B를 전부 탐색하였기 때문에 답에 위치를 넣어줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2866" class="blob-num js-line-number" data-line-number="2866"></td>
        <td id="file--LC2866" class="blob-code blob-code-inner js-file-line">                res.push_back(i - b.length() + 1);</td>
      </tr>
      <tr>
        <td id="file--L2867" class="blob-num js-line-number" data-line-number="2867"></td>
        <td id="file--LC2867" class="blob-code blob-code-inner js-file-line">                j = pi[j];    //다음 탐색을 위하여 이번에도 failure function 이후 부터 비교를 해줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2868" class="blob-num js-line-number" data-line-number="2868"></td>
        <td id="file--LC2868" class="blob-code blob-code-inner js-file-line">            }</td>
      </tr>
      <tr>
        <td id="file--L2869" class="blob-num js-line-number" data-line-number="2869"></td>
        <td id="file--LC2869" class="blob-code blob-code-inner js-file-line">            else</td>
      </tr>
      <tr>
        <td id="file--L2870" class="blob-num js-line-number" data-line-number="2870"></td>
        <td id="file--LC2870" class="blob-code blob-code-inner js-file-line">                j++;    //문자열 B의 다음 단어를 비교해줍니다.</td>
      </tr>
      <tr>
        <td id="file--L2871" class="blob-num js-line-number" data-line-number="2871"></td>
        <td id="file--LC2871" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2872" class="blob-num js-line-number" data-line-number="2872"></td>
        <td id="file--LC2872" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2873" class="blob-num js-line-number" data-line-number="2873"></td>
        <td id="file--LC2873" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2874" class="blob-num js-line-number" data-line-number="2874"></td>
        <td id="file--LC2874" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2875" class="blob-num js-line-number" data-line-number="2875"></td>
        <td id="file--LC2875" class="blob-code blob-code-inner js-file-line">■ 세그먼트 트리(Segment Tree)</td>
      </tr>
      <tr>
        <td id="file--L2876" class="blob-num js-line-number" data-line-number="2876"></td>
        <td id="file--LC2876" class="blob-code blob-code-inner js-file-line">Segment Tree란 구간의 대표값을 이진 트리형태로 저장하는 자료구조</td>
      </tr>
      <tr>
        <td id="file--L2877" class="blob-num js-line-number" data-line-number="2877"></td>
        <td id="file--LC2877" class="blob-code blob-code-inner js-file-line">특정 값을 변경해서 합을 구할 때 유용함.</td>
      </tr>
      <tr>
        <td id="file--L2878" class="blob-num js-line-number" data-line-number="2878"></td>
        <td id="file--LC2878" class="blob-code blob-code-inner js-file-line">구간 a~b를 대표하는 노드의 왼쪽 자식은 a ~ (a+b)/2 구간을, 오른쪽 자식은 (a+b)/2+1 ~ b 구간을 대표</td>
      </tr>
      <tr>
        <td id="file--L2879" class="blob-num js-line-number" data-line-number="2879"></td>
        <td id="file--LC2879" class="blob-code blob-code-inner js-file-line">Segment Tree 에서 합이나 업데이트를 구하는 연산의 시간복잡도는 O(logN)입니다.  (N : 수열의 길이)</td>
      </tr>
      <tr>
        <td id="file--L2880" class="blob-num js-line-number" data-line-number="2880"></td>
        <td id="file--LC2880" class="blob-code blob-code-inner js-file-line">이진 트리인 Segment트리의 높이만큼의 대표노드가 최대로 선택, 업데이트될 수 있기 때문 (log == log(2))</td>
      </tr>
      <tr>
        <td id="file--L2881" class="blob-num js-line-number" data-line-number="2881"></td>
        <td id="file--LC2881" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2882" class="blob-num js-line-number" data-line-number="2882"></td>
        <td id="file--LC2882" class="blob-code blob-code-inner js-file-line">예) 1 10 3 6 5 6 4 7개의 수의 합을 세그먼트 트리로 나타내면</td>
      </tr>
      <tr>
        <td id="file--L2883" class="blob-num js-line-number" data-line-number="2883"></td>
        <td id="file--LC2883" class="blob-code blob-code-inner js-file-line">                   1~7/35</td>
      </tr>
      <tr>
        <td id="file--L2884" class="blob-num js-line-number" data-line-number="2884"></td>
        <td id="file--LC2884" class="blob-code blob-code-inner js-file-line">          1~4/20             5~7/15</td>
      </tr>
      <tr>
        <td id="file--L2885" class="blob-num js-line-number" data-line-number="2885"></td>
        <td id="file--LC2885" class="blob-code blob-code-inner js-file-line">     1~2/11    3~4/9      5~6/11   7/4</td>
      </tr>
      <tr>
        <td id="file--L2886" class="blob-num js-line-number" data-line-number="2886"></td>
        <td id="file--LC2886" class="blob-code blob-code-inner js-file-line">  1/1   2/10  3/3  4/6  5/5    6/6</td>
      </tr>
      <tr>
        <td id="file--L2887" class="blob-num js-line-number" data-line-number="2887"></td>
        <td id="file--LC2887" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2888" class="blob-num js-line-number" data-line-number="2888"></td>
        <td id="file--LC2888" class="blob-code blob-code-inner js-file-line">[구현코드]</td>
      </tr>
      <tr>
        <td id="file--L2889" class="blob-num js-line-number" data-line-number="2889"></td>
        <td id="file--LC2889" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L2890" class="blob-num js-line-number" data-line-number="2890"></td>
        <td id="file--LC2890" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2891" class="blob-num js-line-number" data-line-number="2891"></td>
        <td id="file--LC2891" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L2892" class="blob-num js-line-number" data-line-number="2892"></td>
        <td id="file--LC2892" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L2893" class="blob-num js-line-number" data-line-number="2893"></td>
        <td id="file--LC2893" class="blob-code blob-code-inner js-file-line">#define ll long long</td>
      </tr>
      <tr>
        <td id="file--L2894" class="blob-num js-line-number" data-line-number="2894"></td>
        <td id="file--LC2894" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2895" class="blob-num js-line-number" data-line-number="2895"></td>
        <td id="file--LC2895" class="blob-code blob-code-inner js-file-line">vector&lt;ll&gt; tree;</td>
      </tr>
      <tr>
        <td id="file--L2896" class="blob-num js-line-number" data-line-number="2896"></td>
        <td id="file--LC2896" class="blob-code blob-code-inner js-file-line">vector&lt;ll&gt; arr;</td>
      </tr>
      <tr>
        <td id="file--L2897" class="blob-num js-line-number" data-line-number="2897"></td>
        <td id="file--LC2897" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2898" class="blob-num js-line-number" data-line-number="2898"></td>
        <td id="file--LC2898" class="blob-code blob-code-inner js-file-line">// 최초로 Segment트리의 대표값을 지정하는 함수</td>
      </tr>
      <tr>
        <td id="file--L2899" class="blob-num js-line-number" data-line-number="2899"></td>
        <td id="file--LC2899" class="blob-code blob-code-inner js-file-line">ll init(int node, int l, int r) {</td>
      </tr>
      <tr>
        <td id="file--L2900" class="blob-num js-line-number" data-line-number="2900"></td>
        <td id="file--LC2900" class="blob-code blob-code-inner js-file-line">    if(l==r) return tree[node]=arr[l];</td>
      </tr>
      <tr>
        <td id="file--L2901" class="blob-num js-line-number" data-line-number="2901"></td>
        <td id="file--LC2901" class="blob-code blob-code-inner js-file-line">    else return tree[node] = init(node*2, l, (l+r)/2)+init(node*2+1, (l+r)/2+1, r);</td>
      </tr>
      <tr>
        <td id="file--L2902" class="blob-num js-line-number" data-line-number="2902"></td>
        <td id="file--LC2902" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2903" class="blob-num js-line-number" data-line-number="2903"></td>
        <td id="file--LC2903" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2904" class="blob-num js-line-number" data-line-number="2904"></td>
        <td id="file--LC2904" class="blob-code blob-code-inner js-file-line">// idx 번째 값을 v로 업데이트하는 함수</td>
      </tr>
      <tr>
        <td id="file--L2905" class="blob-num js-line-number" data-line-number="2905"></td>
        <td id="file--LC2905" class="blob-code blob-code-inner js-file-line">ll update(int node, int l, int r, int idx, int v){</td>
      </tr>
      <tr>
        <td id="file--L2906" class="blob-num js-line-number" data-line-number="2906"></td>
        <td id="file--LC2906" class="blob-code blob-code-inner js-file-line">    if(idx &lt; l || r &lt; idx) return tree[node];</td>
      </tr>
      <tr>
        <td id="file--L2907" class="blob-num js-line-number" data-line-number="2907"></td>
        <td id="file--LC2907" class="blob-code blob-code-inner js-file-line">    if(l==r) return tree[node] = v;</td>
      </tr>
      <tr>
        <td id="file--L2908" class="blob-num js-line-number" data-line-number="2908"></td>
        <td id="file--LC2908" class="blob-code blob-code-inner js-file-line">    return tree[node] = update(node*2, l, (l+r)/2, idx, v) + update(node*2+1, (l+r)/2+1, r, idx, v);</td>
      </tr>
      <tr>
        <td id="file--L2909" class="blob-num js-line-number" data-line-number="2909"></td>
        <td id="file--LC2909" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2910" class="blob-num js-line-number" data-line-number="2910"></td>
        <td id="file--LC2910" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2911" class="blob-num js-line-number" data-line-number="2911"></td>
        <td id="file--LC2911" class="blob-code blob-code-inner js-file-line">// a번째 값부터 b번째 값 까지의 합을 구하는 함수</td>
      </tr>
      <tr>
        <td id="file--L2912" class="blob-num js-line-number" data-line-number="2912"></td>
        <td id="file--LC2912" class="blob-code blob-code-inner js-file-line">ll query(int node, int l, int r, int a, int b){</td>
      </tr>
      <tr>
        <td id="file--L2913" class="blob-num js-line-number" data-line-number="2913"></td>
        <td id="file--LC2913" class="blob-code blob-code-inner js-file-line">    if(b &lt; l || r &lt; a) return 0;</td>
      </tr>
      <tr>
        <td id="file--L2914" class="blob-num js-line-number" data-line-number="2914"></td>
        <td id="file--LC2914" class="blob-code blob-code-inner js-file-line">    if(a &lt;= l &amp;&amp; r &lt;= b) return tree[node];</td>
      </tr>
      <tr>
        <td id="file--L2915" class="blob-num js-line-number" data-line-number="2915"></td>
        <td id="file--LC2915" class="blob-code blob-code-inner js-file-line">    return query(node*2, l, (l+r)/2, a, b)+query(node*2+1, (l+r)/2+1, r, a, b);</td>
      </tr>
      <tr>
        <td id="file--L2916" class="blob-num js-line-number" data-line-number="2916"></td>
        <td id="file--LC2916" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2917" class="blob-num js-line-number" data-line-number="2917"></td>
        <td id="file--LC2917" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2918" class="blob-num js-line-number" data-line-number="2918"></td>
        <td id="file--LC2918" class="blob-code blob-code-inner js-file-line">int main () {</td>
      </tr>
      <tr>
        <td id="file--L2919" class="blob-num js-line-number" data-line-number="2919"></td>
        <td id="file--LC2919" class="blob-code blob-code-inner js-file-line">    int N, M, K;</td>
      </tr>
      <tr>
        <td id="file--L2920" class="blob-num js-line-number" data-line-number="2920"></td>
        <td id="file--LC2920" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d%d%d&quot;, &amp;N, &amp;M, &amp;K);</td>
      </tr>
      <tr>
        <td id="file--L2921" class="blob-num js-line-number" data-line-number="2921"></td>
        <td id="file--LC2921" class="blob-code blob-code-inner js-file-line">    arr = vector&lt;ll&gt;(N+1);</td>
      </tr>
      <tr>
        <td id="file--L2922" class="blob-num js-line-number" data-line-number="2922"></td>
        <td id="file--LC2922" class="blob-code blob-code-inner js-file-line">    tree = vector&lt;ll&gt;(N*4);</td>
      </tr>
      <tr>
        <td id="file--L2923" class="blob-num js-line-number" data-line-number="2923"></td>
        <td id="file--LC2923" class="blob-code blob-code-inner js-file-line">    for (int i=1;i&lt;=N;i++) {</td>
      </tr>
      <tr>
        <td id="file--L2924" class="blob-num js-line-number" data-line-number="2924"></td>
        <td id="file--LC2924" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%lld&quot;, &amp;arr[i]);</td>
      </tr>
      <tr>
        <td id="file--L2925" class="blob-num js-line-number" data-line-number="2925"></td>
        <td id="file--LC2925" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2926" class="blob-num js-line-number" data-line-number="2926"></td>
        <td id="file--LC2926" class="blob-code blob-code-inner js-file-line">    init(1, 1, N);</td>
      </tr>
      <tr>
        <td id="file--L2927" class="blob-num js-line-number" data-line-number="2927"></td>
        <td id="file--LC2927" class="blob-code blob-code-inner js-file-line">    for(int i=1;i&lt;=M+K;i++) {</td>
      </tr>
      <tr>
        <td id="file--L2928" class="blob-num js-line-number" data-line-number="2928"></td>
        <td id="file--LC2928" class="blob-code blob-code-inner js-file-line">        int a, b, c;</td>
      </tr>
      <tr>
        <td id="file--L2929" class="blob-num js-line-number" data-line-number="2929"></td>
        <td id="file--LC2929" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d%d%d&quot;, &amp;a, &amp;b, &amp;c);</td>
      </tr>
      <tr>
        <td id="file--L2930" class="blob-num js-line-number" data-line-number="2930"></td>
        <td id="file--LC2930" class="blob-code blob-code-inner js-file-line">        if (a==1) {</td>
      </tr>
      <tr>
        <td id="file--L2931" class="blob-num js-line-number" data-line-number="2931"></td>
        <td id="file--LC2931" class="blob-code blob-code-inner js-file-line">            update(1, 1, N, b, c);</td>
      </tr>
      <tr>
        <td id="file--L2932" class="blob-num js-line-number" data-line-number="2932"></td>
        <td id="file--LC2932" class="blob-code blob-code-inner js-file-line">        } else {</td>
      </tr>
      <tr>
        <td id="file--L2933" class="blob-num js-line-number" data-line-number="2933"></td>
        <td id="file--LC2933" class="blob-code blob-code-inner js-file-line">            printf(&quot;%lld\n&quot;, query(1, 1, N, b, c));</td>
      </tr>
      <tr>
        <td id="file--L2934" class="blob-num js-line-number" data-line-number="2934"></td>
        <td id="file--LC2934" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L2935" class="blob-num js-line-number" data-line-number="2935"></td>
        <td id="file--LC2935" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L2936" class="blob-num js-line-number" data-line-number="2936"></td>
        <td id="file--LC2936" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L2937" class="blob-num js-line-number" data-line-number="2937"></td>
        <td id="file--LC2937" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L2938" class="blob-num js-line-number" data-line-number="2938"></td>
        <td id="file--LC2938" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2939" class="blob-num js-line-number" data-line-number="2939"></td>
        <td id="file--LC2939" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2940" class="blob-num js-line-number" data-line-number="2940"></td>
        <td id="file--LC2940" class="blob-code blob-code-inner js-file-line">■ 레이지 프로퍼게이션 (Lazy Propagation)</td>
      </tr>
      <tr>
        <td id="file--L2941" class="blob-num js-line-number" data-line-number="2941"></td>
        <td id="file--LC2941" class="blob-code blob-code-inner js-file-line">게으른 전파라는 뜻으로 게으르게 업데이트를 전파시켜서 O( logN )만에 Segment Tree에서 구간 업데이트를 달성하는 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L2942" class="blob-num js-line-number" data-line-number="2942"></td>
        <td id="file--LC2942" class="blob-code blob-code-inner js-file-line">7개의 수 1, 10, 3, 6, 5, 6, 4에 대해 2번째 수부터 6번째 수 까지 10씩 더하라는 것 같이</td>
      </tr>
      <tr>
        <td id="file--L2943" class="blob-num js-line-number" data-line-number="2943"></td>
        <td id="file--LC2943" class="blob-code blob-code-inner js-file-line">구간을 업데이트해야 하는 질의가 있을 경우, 세그먼트 트리는 한번에 하나의 수를 업데이트 한다.</td>
      </tr>
      <tr>
        <td id="file--L2944" class="blob-num js-line-number" data-line-number="2944"></td>
        <td id="file--LC2944" class="blob-code blob-code-inner js-file-line">길이 N인 수열에 질의가 K번 들어올 때 하나의 수를 Segement Tree에서 업데이트하는데 O(logN)이 필요하므로</td>
      </tr>
      <tr>
        <td id="file--L2945" class="blob-num js-line-number" data-line-number="2945"></td>
        <td id="file--LC2945" class="blob-code blob-code-inner js-file-line">한 번의 질의에 최악의 경우 O(NlogN)연산이 필요, 따라서 전체 업데이트에 O(NKlogN) 연산 필요</td>
      </tr>
      <tr>
        <td id="file--L2946" class="blob-num js-line-number" data-line-number="2946"></td>
        <td id="file--LC2946" class="blob-code blob-code-inner js-file-line">레이지 프로퍼게이션을 사용하면 한번에 그 구간을 대표하는 노드를 수정해서 O(logN)만에 구간을 업데이트 할 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L2947" class="blob-num js-line-number" data-line-number="2947"></td>
        <td id="file--LC2947" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2948" class="blob-num js-line-number" data-line-number="2948"></td>
        <td id="file--LC2948" class="blob-code blob-code-inner js-file-line">예) 1, 10, 3, 6, 5, 6, 4에 대한 Segment Tree에 대해 구간 [1,6]에 5를 더하는 업데이트</td>
      </tr>
      <tr>
        <td id="file--L2949" class="blob-num js-line-number" data-line-number="2949"></td>
        <td id="file--LC2949" class="blob-code blob-code-inner js-file-line">1-4노드에 Lazy(5) 5-6노드에 Lazy(5)</td>
      </tr>
      <tr>
        <td id="file--L2950" class="blob-num js-line-number" data-line-number="2950"></td>
        <td id="file--LC2950" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2951" class="blob-num js-line-number" data-line-number="2951"></td>
        <td id="file--LC2951" class="blob-code blob-code-inner js-file-line">구간 업데이트 정보를 반영하기 위해 조상노드의 lazy가 자손노드에 필요한 상황이라면 </td>
      </tr>
      <tr>
        <td id="file--L2952" class="blob-num js-line-number" data-line-number="2952"></td>
        <td id="file--LC2952" class="blob-code blob-code-inner js-file-line">반드시 조상노드를 거쳐야 자손노드에 도달할 수 있기 때문에</td>
      </tr>
      <tr>
        <td id="file--L2953" class="blob-num js-line-number" data-line-number="2953"></td>
        <td id="file--LC2953" class="blob-code blob-code-inner js-file-line">조상 노드를 지날 때 마다 아래쪽으로 lazy(5)를 전파시키면 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L2954" class="blob-num js-line-number" data-line-number="2954"></td>
        <td id="file--LC2954" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2955" class="blob-num js-line-number" data-line-number="2955"></td>
        <td id="file--LC2955" class="blob-code blob-code-inner js-file-line">예를들어 위의 업데이트 경우에서 [2,4]의 합을 구하라는 질의가 들어온 상황</td>
      </tr>
      <tr>
        <td id="file--L2956" class="blob-num js-line-number" data-line-number="2956"></td>
        <td id="file--LC2956" class="blob-code blob-code-inner js-file-line">1. 먼저 구간[2,4]를 대표하는 노드를 찾아서 출발합니다.</td>
      </tr>
      <tr>
        <td id="file--L2957" class="blob-num js-line-number" data-line-number="2957"></td>
        <td id="file--LC2957" class="blob-code blob-code-inner js-file-line">2. 가던 도중에 lazy가 있는 조상 노드를 만났습니다. lazy를 해당 노드에 반영하고 </td>
      </tr>
      <tr>
        <td id="file--L2958" class="blob-num js-line-number" data-line-number="2958"></td>
        <td id="file--LC2958" class="blob-code blob-code-inner js-file-line">(대표노드 값 20 + 5(구간 업데이트 정보인 lazy)*4(구간의 길이) = 40)</td>
      </tr>
      <tr>
        <td id="file--L2959" class="blob-num js-line-number" data-line-number="2959"></td>
        <td id="file--LC2959" class="blob-code blob-code-inner js-file-line">아래쪽 노드에 전파시켜준 뒤에 동일한 lazy가 두번 연속 전파되지 않기 위해 이 lazy를 0으로 수정합니다.</td>
      </tr>
      <tr>
        <td id="file--L2960" class="blob-num js-line-number" data-line-number="2960"></td>
        <td id="file--LC2960" class="blob-code blob-code-inner js-file-line">3. 위 과정을 반복합니다.</td>
      </tr>
      <tr>
        <td id="file--L2961" class="blob-num js-line-number" data-line-number="2961"></td>
        <td id="file--LC2961" class="blob-code blob-code-inner js-file-line">4. lazy를 전파하면서 아래쪽으로 내려오면서 [2,4] 구간을 대표하는 2노드, 3-4노드에 도달</td>
      </tr>
      <tr>
        <td id="file--L2962" class="blob-num js-line-number" data-line-number="2962"></td>
        <td id="file--LC2962" class="blob-code blob-code-inner js-file-line">이제 [2,4] 구간합을 계산하면 (10+5*1)15+(9+5*2)19=34로 올바른 값을 얻을 수 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L2963" class="blob-num js-line-number" data-line-number="2963"></td>
        <td id="file--LC2963" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2964" class="blob-num js-line-number" data-line-number="2964"></td>
        <td id="file--LC2964" class="blob-code blob-code-inner js-file-line">업데이트 함수(현재 노드){</td>
      </tr>
      <tr>
        <td id="file--L2965" class="blob-num js-line-number" data-line-number="2965"></td>
        <td id="file--LC2965" class="blob-code blob-code-inner js-file-line">//lazy 전파</td>
      </tr>
      <tr>
        <td id="file--L2966" class="blob-num js-line-number" data-line-number="2966"></td>
        <td id="file--LC2966" class="blob-code blob-code-inner js-file-line">업데이트 함수(왼쪽 자식 노드)</td>
      </tr>
      <tr>
        <td id="file--L2967" class="blob-num js-line-number" data-line-number="2967"></td>
        <td id="file--LC2967" class="blob-code blob-code-inner js-file-line">업데이트 함수(오른쪽 자식 노드)</td>
      </tr>
      <tr>
        <td id="file--L2968" class="blob-num js-line-number" data-line-number="2968"></td>
        <td id="file--LC2968" class="blob-code blob-code-inner js-file-line">//여기!</td>
      </tr>
      <tr>
        <td id="file--L2969" class="blob-num js-line-number" data-line-number="2969"></td>
        <td id="file--LC2969" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2970" class="blob-num js-line-number" data-line-number="2970"></td>
        <td id="file--LC2970" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2971" class="blob-num js-line-number" data-line-number="2971"></td>
        <td id="file--LC2971" class="blob-code blob-code-inner js-file-line">이때 //여기! 부분에서 재귀적으로 호출된 두 업데이트 함수가 종료된 상태입니다.</td>
      </tr>
      <tr>
        <td id="file--L2972" class="blob-num js-line-number" data-line-number="2972"></td>
        <td id="file--LC2972" class="blob-code blob-code-inner js-file-line">따라서  자식노드에 대한 업데이트가 완료된 상태이므로 자식 노드에는 올바른 값 저장되어 있을 것입니다.</td>
      </tr>
      <tr>
        <td id="file--L2973" class="blob-num js-line-number" data-line-number="2973"></td>
        <td id="file--LC2973" class="blob-code blob-code-inner js-file-line">또한 이 트리의 값은 자식 노드의 합을 나타내므로, 아래와 같은 코드를 /여기! 에 추가하여 현재 노드 또한  올바른 값을 얻을 수 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L2974" class="blob-num js-line-number" data-line-number="2974"></td>
        <td id="file--LC2974" class="blob-code blob-code-inner js-file-line">tree[현재 노드].value = tree[왼쪽 자식 노드].value + tree[오른쪽 자식 노드].value;</td>
      </tr>
      <tr>
        <td id="file--L2975" class="blob-num js-line-number" data-line-number="2975"></td>
        <td id="file--LC2975" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2976" class="blob-num js-line-number" data-line-number="2976"></td>
        <td id="file--LC2976" class="blob-code blob-code-inner js-file-line">Segment Tree의 update와 sum함수에 lazy 전파 부분만 추가하면</td>
      </tr>
      <tr>
        <td id="file--L2977" class="blob-num js-line-number" data-line-number="2977"></td>
        <td id="file--LC2977" class="blob-code blob-code-inner js-file-line">쉽게 Lazy Propagation을 적용하여 구간 업데이트가 가능한 자료구조인 Segment Tree를 이용할 수 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L2978" class="blob-num js-line-number" data-line-number="2978"></td>
        <td id="file--LC2978" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2979" class="blob-num js-line-number" data-line-number="2979"></td>
        <td id="file--LC2979" class="blob-code blob-code-inner js-file-line">[구현코드]</td>
      </tr>
      <tr>
        <td id="file--L2980" class="blob-num js-line-number" data-line-number="2980"></td>
        <td id="file--LC2980" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L2981" class="blob-num js-line-number" data-line-number="2981"></td>
        <td id="file--LC2981" class="blob-code blob-code-inner js-file-line">#define MAXN 1000010</td>
      </tr>
      <tr>
        <td id="file--L2982" class="blob-num js-line-number" data-line-number="2982"></td>
        <td id="file--LC2982" class="blob-code blob-code-inner js-file-line">#define ll long long</td>
      </tr>
      <tr>
        <td id="file--L2983" class="blob-num js-line-number" data-line-number="2983"></td>
        <td id="file--LC2983" class="blob-code blob-code-inner js-file-line">ll arr[MAXN];</td>
      </tr>
      <tr>
        <td id="file--L2984" class="blob-num js-line-number" data-line-number="2984"></td>
        <td id="file--LC2984" class="blob-code blob-code-inner js-file-line">typedef struct Tree{</td>
      </tr>
      <tr>
        <td id="file--L2985" class="blob-num js-line-number" data-line-number="2985"></td>
        <td id="file--LC2985" class="blob-code blob-code-inner js-file-line">    ll value, lazy;</td>
      </tr>
      <tr>
        <td id="file--L2986" class="blob-num js-line-number" data-line-number="2986"></td>
        <td id="file--LC2986" class="blob-code blob-code-inner js-file-line">}Tree;</td>
      </tr>
      <tr>
        <td id="file--L2987" class="blob-num js-line-number" data-line-number="2987"></td>
        <td id="file--LC2987" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2988" class="blob-num js-line-number" data-line-number="2988"></td>
        <td id="file--LC2988" class="blob-code blob-code-inner js-file-line">Tree tree[3*MAXN];</td>
      </tr>
      <tr>
        <td id="file--L2989" class="blob-num js-line-number" data-line-number="2989"></td>
        <td id="file--LC2989" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2990" class="blob-num js-line-number" data-line-number="2990"></td>
        <td id="file--LC2990" class="blob-code blob-code-inner js-file-line">//최초로 Segment트리의 대표값을 지정하는 함수</td>
      </tr>
      <tr>
        <td id="file--L2991" class="blob-num js-line-number" data-line-number="2991"></td>
        <td id="file--LC2991" class="blob-code blob-code-inner js-file-line">ll init(int node, int start, int end){</td>
      </tr>
      <tr>
        <td id="file--L2992" class="blob-num js-line-number" data-line-number="2992"></td>
        <td id="file--LC2992" class="blob-code blob-code-inner js-file-line">    if(start == end)</td>
      </tr>
      <tr>
        <td id="file--L2993" class="blob-num js-line-number" data-line-number="2993"></td>
        <td id="file--LC2993" class="blob-code blob-code-inner js-file-line">        return tree[node].value = arr[start];</td>
      </tr>
      <tr>
        <td id="file--L2994" class="blob-num js-line-number" data-line-number="2994"></td>
        <td id="file--LC2994" class="blob-code blob-code-inner js-file-line">    else</td>
      </tr>
      <tr>
        <td id="file--L2995" class="blob-num js-line-number" data-line-number="2995"></td>
        <td id="file--LC2995" class="blob-code blob-code-inner js-file-line">        return tree[node].value = init(node*2, start, (start+end)/2)+init(node*2+1, (start+end)/2+1, end);</td>
      </tr>
      <tr>
        <td id="file--L2996" class="blob-num js-line-number" data-line-number="2996"></td>
        <td id="file--LC2996" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L2997" class="blob-num js-line-number" data-line-number="2997"></td>
        <td id="file--LC2997" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L2998" class="blob-num js-line-number" data-line-number="2998"></td>
        <td id="file--LC2998" class="blob-code blob-code-inner js-file-line">//i~j 구간에 diff만큼 더해줄 때 SegmentTree를 업데이트 하는 함수</td>
      </tr>
      <tr>
        <td id="file--L2999" class="blob-num js-line-number" data-line-number="2999"></td>
        <td id="file--LC2999" class="blob-code blob-code-inner js-file-line">void update_range(int node, int start, int end, int i, int j, ll diff){</td>
      </tr>
      <tr>
        <td id="file--L3000" class="blob-num js-line-number" data-line-number="3000"></td>
        <td id="file--LC3000" class="blob-code blob-code-inner js-file-line">    //lazy가 남아있을 때</td>
      </tr>
      <tr>
        <td id="file--L3001" class="blob-num js-line-number" data-line-number="3001"></td>
        <td id="file--LC3001" class="blob-code blob-code-inner js-file-line">    if(tree[node].lazy != 0){</td>
      </tr>
      <tr>
        <td id="file--L3002" class="blob-num js-line-number" data-line-number="3002"></td>
        <td id="file--LC3002" class="blob-code blob-code-inner js-file-line">        tree[node].value += (end-start+1)*tree[node].lazy;</td>
      </tr>
      <tr>
        <td id="file--L3003" class="blob-num js-line-number" data-line-number="3003"></td>
        <td id="file--LC3003" class="blob-code blob-code-inner js-file-line">        if(start != end){</td>
      </tr>
      <tr>
        <td id="file--L3004" class="blob-num js-line-number" data-line-number="3004"></td>
        <td id="file--LC3004" class="blob-code blob-code-inner js-file-line">            tree[node*2].lazy += tree[node].lazy;</td>
      </tr>
      <tr>
        <td id="file--L3005" class="blob-num js-line-number" data-line-number="3005"></td>
        <td id="file--LC3005" class="blob-code blob-code-inner js-file-line">            tree[node*2+1].lazy += tree[node].lazy;</td>
      </tr>
      <tr>
        <td id="file--L3006" class="blob-num js-line-number" data-line-number="3006"></td>
        <td id="file--LC3006" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3007" class="blob-num js-line-number" data-line-number="3007"></td>
        <td id="file--LC3007" class="blob-code blob-code-inner js-file-line">        tree[node].lazy =0;</td>
      </tr>
      <tr>
        <td id="file--L3008" class="blob-num js-line-number" data-line-number="3008"></td>
        <td id="file--LC3008" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3009" class="blob-num js-line-number" data-line-number="3009"></td>
        <td id="file--LC3009" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L3010" class="blob-num js-line-number" data-line-number="3010"></td>
        <td id="file--LC3010" class="blob-code blob-code-inner js-file-line">    if(j &lt; start || i &gt; end) return;</td>
      </tr>
      <tr>
        <td id="file--L3011" class="blob-num js-line-number" data-line-number="3011"></td>
        <td id="file--LC3011" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L3012" class="blob-num js-line-number" data-line-number="3012"></td>
        <td id="file--LC3012" class="blob-code blob-code-inner js-file-line">    //대표 구간을 찾았을 때</td>
      </tr>
      <tr>
        <td id="file--L3013" class="blob-num js-line-number" data-line-number="3013"></td>
        <td id="file--LC3013" class="blob-code blob-code-inner js-file-line">    if(i &lt;= start &amp;&amp;  end &lt;= j){</td>
      </tr>
      <tr>
        <td id="file--L3014" class="blob-num js-line-number" data-line-number="3014"></td>
        <td id="file--LC3014" class="blob-code blob-code-inner js-file-line">        tree[node].value += (end-start+1)*diff;</td>
      </tr>
      <tr>
        <td id="file--L3015" class="blob-num js-line-number" data-line-number="3015"></td>
        <td id="file--LC3015" class="blob-code blob-code-inner js-file-line">        if(start != end){</td>
      </tr>
      <tr>
        <td id="file--L3016" class="blob-num js-line-number" data-line-number="3016"></td>
        <td id="file--LC3016" class="blob-code blob-code-inner js-file-line">            tree[node*2].lazy += diff;</td>
      </tr>
      <tr>
        <td id="file--L3017" class="blob-num js-line-number" data-line-number="3017"></td>
        <td id="file--LC3017" class="blob-code blob-code-inner js-file-line">            tree[node*2+1].lazy += diff;</td>
      </tr>
      <tr>
        <td id="file--L3018" class="blob-num js-line-number" data-line-number="3018"></td>
        <td id="file--LC3018" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3019" class="blob-num js-line-number" data-line-number="3019"></td>
        <td id="file--LC3019" class="blob-code blob-code-inner js-file-line">        return;</td>
      </tr>
      <tr>
        <td id="file--L3020" class="blob-num js-line-number" data-line-number="3020"></td>
        <td id="file--LC3020" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3021" class="blob-num js-line-number" data-line-number="3021"></td>
        <td id="file--LC3021" class="blob-code blob-code-inner js-file-line">    update_range(node*2, start, (start+end)/2, i, j, diff);</td>
      </tr>
      <tr>
        <td id="file--L3022" class="blob-num js-line-number" data-line-number="3022"></td>
        <td id="file--LC3022" class="blob-code blob-code-inner js-file-line">    update_range(node*2+1, (start+end)/2+1, end, i, j, diff);</td>
      </tr>
      <tr>
        <td id="file--L3023" class="blob-num js-line-number" data-line-number="3023"></td>
        <td id="file--LC3023" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L3024" class="blob-num js-line-number" data-line-number="3024"></td>
        <td id="file--LC3024" class="blob-code blob-code-inner js-file-line">    tree[node].value = tree[node*2].value+tree[node*2+1].value;</td>
      </tr>
      <tr>
        <td id="file--L3025" class="blob-num js-line-number" data-line-number="3025"></td>
        <td id="file--LC3025" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3026" class="blob-num js-line-number" data-line-number="3026"></td>
        <td id="file--LC3026" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3027" class="blob-num js-line-number" data-line-number="3027"></td>
        <td id="file--LC3027" class="blob-code blob-code-inner js-file-line">//i번째 값부터 j번째 값 까지의 합을 구하는 함수</td>
      </tr>
      <tr>
        <td id="file--L3028" class="blob-num js-line-number" data-line-number="3028"></td>
        <td id="file--LC3028" class="blob-code blob-code-inner js-file-line">ll sum(int node, int start, int end, int i, int j){</td>
      </tr>
      <tr>
        <td id="file--L3029" class="blob-num js-line-number" data-line-number="3029"></td>
        <td id="file--LC3029" class="blob-code blob-code-inner js-file-line">    if(tree[node].lazy != 0){</td>
      </tr>
      <tr>
        <td id="file--L3030" class="blob-num js-line-number" data-line-number="3030"></td>
        <td id="file--LC3030" class="blob-code blob-code-inner js-file-line">        tree[node].value += (end-start+1)*tree[node].lazy;</td>
      </tr>
      <tr>
        <td id="file--L3031" class="blob-num js-line-number" data-line-number="3031"></td>
        <td id="file--LC3031" class="blob-code blob-code-inner js-file-line">        if(start != end){</td>
      </tr>
      <tr>
        <td id="file--L3032" class="blob-num js-line-number" data-line-number="3032"></td>
        <td id="file--LC3032" class="blob-code blob-code-inner js-file-line">            tree[node*2].lazy += tree[node].lazy;</td>
      </tr>
      <tr>
        <td id="file--L3033" class="blob-num js-line-number" data-line-number="3033"></td>
        <td id="file--LC3033" class="blob-code blob-code-inner js-file-line">            tree[node*2+1].lazy += tree[node].lazy;</td>
      </tr>
      <tr>
        <td id="file--L3034" class="blob-num js-line-number" data-line-number="3034"></td>
        <td id="file--LC3034" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3035" class="blob-num js-line-number" data-line-number="3035"></td>
        <td id="file--LC3035" class="blob-code blob-code-inner js-file-line">        tree[node].lazy =0;</td>
      </tr>
      <tr>
        <td id="file--L3036" class="blob-num js-line-number" data-line-number="3036"></td>
        <td id="file--LC3036" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3037" class="blob-num js-line-number" data-line-number="3037"></td>
        <td id="file--LC3037" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L3038" class="blob-num js-line-number" data-line-number="3038"></td>
        <td id="file--LC3038" class="blob-code blob-code-inner js-file-line">    if(i&gt; end || j &lt; start) return 0;</td>
      </tr>
      <tr>
        <td id="file--L3039" class="blob-num js-line-number" data-line-number="3039"></td>
        <td id="file--LC3039" class="blob-code blob-code-inner js-file-line">    if(i &lt;= start &amp;&amp; end &lt;= j) return tree[node].value;</td>
      </tr>
      <tr>
        <td id="file--L3040" class="blob-num js-line-number" data-line-number="3040"></td>
        <td id="file--LC3040" class="blob-code blob-code-inner js-file-line">    return sum(node*2, start, (start+end)/2, i, j)+sum(node*2+1, (start+end)/2+1, end, i, j);</td>
      </tr>
      <tr>
        <td id="file--L3041" class="blob-num js-line-number" data-line-number="3041"></td>
        <td id="file--LC3041" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3042" class="blob-num js-line-number" data-line-number="3042"></td>
        <td id="file--LC3042" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3043" class="blob-num js-line-number" data-line-number="3043"></td>
        <td id="file--LC3043" class="blob-code blob-code-inner js-file-line">int main(){</td>
      </tr>
      <tr>
        <td id="file--L3044" class="blob-num js-line-number" data-line-number="3044"></td>
        <td id="file--LC3044" class="blob-code blob-code-inner js-file-line">    int N, M, K;</td>
      </tr>
      <tr>
        <td id="file--L3045" class="blob-num js-line-number" data-line-number="3045"></td>
        <td id="file--LC3045" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d%d%d&quot;, &amp;N, &amp;M, &amp;K);</td>
      </tr>
      <tr>
        <td id="file--L3046" class="blob-num js-line-number" data-line-number="3046"></td>
        <td id="file--LC3046" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;= N; i++)</td>
      </tr>
      <tr>
        <td id="file--L3047" class="blob-num js-line-number" data-line-number="3047"></td>
        <td id="file--LC3047" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%lld&quot;, &amp;arr[i]);</td>
      </tr>
      <tr>
        <td id="file--L3048" class="blob-num js-line-number" data-line-number="3048"></td>
        <td id="file--LC3048" class="blob-code blob-code-inner js-file-line">    init(1, 1, N);</td>
      </tr>
      <tr>
        <td id="file--L3049" class="blob-num js-line-number" data-line-number="3049"></td>
        <td id="file--LC3049" class="blob-code blob-code-inner js-file-line">    for(int i=1; i&lt;= M+K; i++){</td>
      </tr>
      <tr>
        <td id="file--L3050" class="blob-num js-line-number" data-line-number="3050"></td>
        <td id="file--LC3050" class="blob-code blob-code-inner js-file-line">        int t1, a, b;</td>
      </tr>
      <tr>
        <td id="file--L3051" class="blob-num js-line-number" data-line-number="3051"></td>
        <td id="file--LC3051" class="blob-code blob-code-inner js-file-line">        ll diff;</td>
      </tr>
      <tr>
        <td id="file--L3052" class="blob-num js-line-number" data-line-number="3052"></td>
        <td id="file--LC3052" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d&quot;, &amp;t1);</td>
      </tr>
      <tr>
        <td id="file--L3053" class="blob-num js-line-number" data-line-number="3053"></td>
        <td id="file--LC3053" class="blob-code blob-code-inner js-file-line">        if(t1==1){</td>
      </tr>
      <tr>
        <td id="file--L3054" class="blob-num js-line-number" data-line-number="3054"></td>
        <td id="file--LC3054" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d%d%lld&quot;, &amp;a, &amp;b, &amp;diff);</td>
      </tr>
      <tr>
        <td id="file--L3055" class="blob-num js-line-number" data-line-number="3055"></td>
        <td id="file--LC3055" class="blob-code blob-code-inner js-file-line">            update_range(1, 1, N, a, b, diff);</td>
      </tr>
      <tr>
        <td id="file--L3056" class="blob-num js-line-number" data-line-number="3056"></td>
        <td id="file--LC3056" class="blob-code blob-code-inner js-file-line">        }else{</td>
      </tr>
      <tr>
        <td id="file--L3057" class="blob-num js-line-number" data-line-number="3057"></td>
        <td id="file--LC3057" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d%d&quot;, &amp;a, &amp;b);</td>
      </tr>
      <tr>
        <td id="file--L3058" class="blob-num js-line-number" data-line-number="3058"></td>
        <td id="file--LC3058" class="blob-code blob-code-inner js-file-line">            printf(&quot;%lld\n&quot;, sum(1, 1, N, a, b));</td>
      </tr>
      <tr>
        <td id="file--L3059" class="blob-num js-line-number" data-line-number="3059"></td>
        <td id="file--LC3059" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3060" class="blob-num js-line-number" data-line-number="3060"></td>
        <td id="file--LC3060" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3061" class="blob-num js-line-number" data-line-number="3061"></td>
        <td id="file--LC3061" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L3062" class="blob-num js-line-number" data-line-number="3062"></td>
        <td id="file--LC3062" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3063" class="blob-num js-line-number" data-line-number="3063"></td>
        <td id="file--LC3063" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3064" class="blob-num js-line-number" data-line-number="3064"></td>
        <td id="file--LC3064" class="blob-code blob-code-inner js-file-line">출처: http://bowbowbow.tistory.com/4?category=159621 [멍멍멍]</td>
      </tr>
      <tr>
        <td id="file--L3065" class="blob-num js-line-number" data-line-number="3065"></td>
        <td id="file--LC3065" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3066" class="blob-num js-line-number" data-line-number="3066"></td>
        <td id="file--LC3066" class="blob-code blob-code-inner js-file-line">■ 펜윅 트리 알고리즘(Fenwick Tree) - 바이너리 인덱스 트리</td>
      </tr>
      <tr>
        <td id="file--L3067" class="blob-num js-line-number" data-line-number="3067"></td>
        <td id="file--LC3067" class="blob-code blob-code-inner js-file-line">-펜윅 트리는 세그먼트 트리의 변형으로, update O(lgN)에 그리고 query를 O(lgN)에 수행 할 수 있으며 메모리는 세그먼트 트리에 비해 덜 소모됨.</td>
      </tr>
      <tr>
        <td id="file--L3068" class="blob-num js-line-number" data-line-number="3068"></td>
        <td id="file--LC3068" class="blob-code blob-code-inner js-file-line">펜윅 트리의 핵심은 구간 합 대신 부분 합만을 빠르게 계산할 수 있는 자료 구조를 만들어도 구간 합을 계산할 수 있다는 것이다.</td>
      </tr>
      <tr>
        <td id="file--L3069" class="blob-num js-line-number" data-line-number="3069"></td>
        <td id="file--LC3069" class="blob-code blob-code-inner js-file-line">(이때 부분 합은 0~k까지 합이고 구간 합은 a~b까지 합을 의미한다.)</td>
      </tr>
      <tr>
        <td id="file--L3070" class="blob-num js-line-number" data-line-number="3070"></td>
        <td id="file--LC3070" class="blob-code blob-code-inner js-file-line">                   1~7/35</td>
      </tr>
      <tr>
        <td id="file--L3071" class="blob-num js-line-number" data-line-number="3071"></td>
        <td id="file--LC3071" class="blob-code blob-code-inner js-file-line">          1~4/20               -</td>
      </tr>
      <tr>
        <td id="file--L3072" class="blob-num js-line-number" data-line-number="3072"></td>
        <td id="file--LC3072" class="blob-code blob-code-inner js-file-line">     1~2/11      -      5~6/11    -</td>
      </tr>
      <tr>
        <td id="file--L3073" class="blob-num js-line-number" data-line-number="3073"></td>
        <td id="file--LC3073" class="blob-code blob-code-inner js-file-line">  1/1     -  3/3   -   5/5     -</td>
      </tr>
      <tr>
        <td id="file--L3074" class="blob-num js-line-number" data-line-number="3074"></td>
        <td id="file--LC3074" class="blob-code blob-code-inner js-file-line">우선 펜윅 트리는 비트를 가지고 놀기 때문에 인덱스를 0번부터가 아닌 1번부터로 바꾸어준다.(코드에서 +1만 하면된다.)</td>
      </tr>
      <tr>
        <td id="file--L3075" class="blob-num js-line-number" data-line-number="3075"></td>
        <td id="file--LC3075" class="blob-code blob-code-inner js-file-line">만약 인덱스 3~6번 사이의 구간합을 구하고 싶다면 어떻게 해야 할까?</td>
      </tr>
      <tr>
        <td id="file--L3076" class="blob-num js-line-number" data-line-number="3076"></td>
        <td id="file--LC3076" class="blob-code blob-code-inner js-file-line">(1-4) + (5-6) - (1-2)를 하면 3-6의 구간합을 얻을 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L3077" class="blob-num js-line-number" data-line-number="3077"></td>
        <td id="file--LC3077" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3078" class="blob-num js-line-number" data-line-number="3078"></td>
        <td id="file--LC3078" class="blob-code blob-code-inner js-file-line">[구현코드]</td>
      </tr>
      <tr>
        <td id="file--L3079" class="blob-num js-line-number" data-line-number="3079"></td>
        <td id="file--LC3079" class="blob-code blob-code-inner js-file-line">#include &lt;cstdio&gt;</td>
      </tr>
      <tr>
        <td id="file--L3080" class="blob-num js-line-number" data-line-number="3080"></td>
        <td id="file--LC3080" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L3081" class="blob-num js-line-number" data-line-number="3081"></td>
        <td id="file--LC3081" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3082" class="blob-num js-line-number" data-line-number="3082"></td>
        <td id="file--LC3082" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L3083" class="blob-num js-line-number" data-line-number="3083"></td>
        <td id="file--LC3083" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3084" class="blob-num js-line-number" data-line-number="3084"></td>
        <td id="file--LC3084" class="blob-code blob-code-inner js-file-line">typedef long long ll;</td>
      </tr>
      <tr>
        <td id="file--L3085" class="blob-num js-line-number" data-line-number="3085"></td>
        <td id="file--LC3085" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3086" class="blob-num js-line-number" data-line-number="3086"></td>
        <td id="file--LC3086" class="blob-code blob-code-inner js-file-line">ll sum(vector&lt;ll&gt; &amp;tree, int i)</td>
      </tr>
      <tr>
        <td id="file--L3087" class="blob-num js-line-number" data-line-number="3087"></td>
        <td id="file--LC3087" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L3088" class="blob-num js-line-number" data-line-number="3088"></td>
        <td id="file--LC3088" class="blob-code blob-code-inner js-file-line">    ll ans = 0;</td>
      </tr>
      <tr>
        <td id="file--L3089" class="blob-num js-line-number" data-line-number="3089"></td>
        <td id="file--LC3089" class="blob-code blob-code-inner js-file-line">    while (i &gt; 0)</td>
      </tr>
      <tr>
        <td id="file--L3090" class="blob-num js-line-number" data-line-number="3090"></td>
        <td id="file--LC3090" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L3091" class="blob-num js-line-number" data-line-number="3091"></td>
        <td id="file--LC3091" class="blob-code blob-code-inner js-file-line">        ans += tree[i];</td>
      </tr>
      <tr>
        <td id="file--L3092" class="blob-num js-line-number" data-line-number="3092"></td>
        <td id="file--LC3092" class="blob-code blob-code-inner js-file-line">        i -= (i &amp; -i); // 최하위 비트 지우기 </td>
      </tr>
      <tr>
        <td id="file--L3093" class="blob-num js-line-number" data-line-number="3093"></td>
        <td id="file--LC3093" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3094" class="blob-num js-line-number" data-line-number="3094"></td>
        <td id="file--LC3094" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3095" class="blob-num js-line-number" data-line-number="3095"></td>
        <td id="file--LC3095" class="blob-code blob-code-inner js-file-line">    return ans;</td>
      </tr>
      <tr>
        <td id="file--L3096" class="blob-num js-line-number" data-line-number="3096"></td>
        <td id="file--LC3096" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3097" class="blob-num js-line-number" data-line-number="3097"></td>
        <td id="file--LC3097" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3098" class="blob-num js-line-number" data-line-number="3098"></td>
        <td id="file--LC3098" class="blob-code blob-code-inner js-file-line">void update(vector&lt;ll&gt; &amp;tree, int i, ll diff)</td>
      </tr>
      <tr>
        <td id="file--L3099" class="blob-num js-line-number" data-line-number="3099"></td>
        <td id="file--LC3099" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L3100" class="blob-num js-line-number" data-line-number="3100"></td>
        <td id="file--LC3100" class="blob-code blob-code-inner js-file-line">    while (i &lt; tree.size())</td>
      </tr>
      <tr>
        <td id="file--L3101" class="blob-num js-line-number" data-line-number="3101"></td>
        <td id="file--LC3101" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L3102" class="blob-num js-line-number" data-line-number="3102"></td>
        <td id="file--LC3102" class="blob-code blob-code-inner js-file-line">        tree[i] += diff;</td>
      </tr>
      <tr>
        <td id="file--L3103" class="blob-num js-line-number" data-line-number="3103"></td>
        <td id="file--LC3103" class="blob-code blob-code-inner js-file-line">        i += (i &amp; -i);</td>
      </tr>
      <tr>
        <td id="file--L3104" class="blob-num js-line-number" data-line-number="3104"></td>
        <td id="file--LC3104" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3105" class="blob-num js-line-number" data-line-number="3105"></td>
        <td id="file--LC3105" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3106" class="blob-num js-line-number" data-line-number="3106"></td>
        <td id="file--LC3106" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3107" class="blob-num js-line-number" data-line-number="3107"></td>
        <td id="file--LC3107" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L3108" class="blob-num js-line-number" data-line-number="3108"></td>
        <td id="file--LC3108" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L3109" class="blob-num js-line-number" data-line-number="3109"></td>
        <td id="file--LC3109" class="blob-code blob-code-inner js-file-line">    int n, m, k;</td>
      </tr>
      <tr>
        <td id="file--L3110" class="blob-num js-line-number" data-line-number="3110"></td>
        <td id="file--LC3110" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3111" class="blob-num js-line-number" data-line-number="3111"></td>
        <td id="file--LC3111" class="blob-code blob-code-inner js-file-line">    scanf(&quot;%d %d %d&quot;, &amp;n, &amp;m, &amp;k);</td>
      </tr>
      <tr>
        <td id="file--L3112" class="blob-num js-line-number" data-line-number="3112"></td>
        <td id="file--LC3112" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3113" class="blob-num js-line-number" data-line-number="3113"></td>
        <td id="file--LC3113" class="blob-code blob-code-inner js-file-line">    vector&lt;ll&gt; arr(n + 1);</td>
      </tr>
      <tr>
        <td id="file--L3114" class="blob-num js-line-number" data-line-number="3114"></td>
        <td id="file--LC3114" class="blob-code blob-code-inner js-file-line">    vector&lt;ll&gt; tree(n + 1);</td>
      </tr>
      <tr>
        <td id="file--L3115" class="blob-num js-line-number" data-line-number="3115"></td>
        <td id="file--LC3115" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3116" class="blob-num js-line-number" data-line-number="3116"></td>
        <td id="file--LC3116" class="blob-code blob-code-inner js-file-line">    for (int i = 1; i &lt;= n; i++)</td>
      </tr>
      <tr>
        <td id="file--L3117" class="blob-num js-line-number" data-line-number="3117"></td>
        <td id="file--LC3117" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L3118" class="blob-num js-line-number" data-line-number="3118"></td>
        <td id="file--LC3118" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%lld&quot;, &amp;arr[i]);</td>
      </tr>
      <tr>
        <td id="file--L3119" class="blob-num js-line-number" data-line-number="3119"></td>
        <td id="file--LC3119" class="blob-code blob-code-inner js-file-line">        update(tree, i, arr[i]);</td>
      </tr>
      <tr>
        <td id="file--L3120" class="blob-num js-line-number" data-line-number="3120"></td>
        <td id="file--LC3120" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3121" class="blob-num js-line-number" data-line-number="3121"></td>
        <td id="file--LC3121" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3122" class="blob-num js-line-number" data-line-number="3122"></td>
        <td id="file--LC3122" class="blob-code blob-code-inner js-file-line">    m += k;</td>
      </tr>
      <tr>
        <td id="file--L3123" class="blob-num js-line-number" data-line-number="3123"></td>
        <td id="file--LC3123" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3124" class="blob-num js-line-number" data-line-number="3124"></td>
        <td id="file--LC3124" class="blob-code blob-code-inner js-file-line">    while (m--)</td>
      </tr>
      <tr>
        <td id="file--L3125" class="blob-num js-line-number" data-line-number="3125"></td>
        <td id="file--LC3125" class="blob-code blob-code-inner js-file-line">    {</td>
      </tr>
      <tr>
        <td id="file--L3126" class="blob-num js-line-number" data-line-number="3126"></td>
        <td id="file--LC3126" class="blob-code blob-code-inner js-file-line">        int num;</td>
      </tr>
      <tr>
        <td id="file--L3127" class="blob-num js-line-number" data-line-number="3127"></td>
        <td id="file--LC3127" class="blob-code blob-code-inner js-file-line">        scanf(&quot;%d&quot;, &amp;num);</td>
      </tr>
      <tr>
        <td id="file--L3128" class="blob-num js-line-number" data-line-number="3128"></td>
        <td id="file--LC3128" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3129" class="blob-num js-line-number" data-line-number="3129"></td>
        <td id="file--LC3129" class="blob-code blob-code-inner js-file-line">        if (num == 1)</td>
      </tr>
      <tr>
        <td id="file--L3130" class="blob-num js-line-number" data-line-number="3130"></td>
        <td id="file--LC3130" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L3131" class="blob-num js-line-number" data-line-number="3131"></td>
        <td id="file--LC3131" class="blob-code blob-code-inner js-file-line">            int index;</td>
      </tr>
      <tr>
        <td id="file--L3132" class="blob-num js-line-number" data-line-number="3132"></td>
        <td id="file--LC3132" class="blob-code blob-code-inner js-file-line">            ll val;</td>
      </tr>
      <tr>
        <td id="file--L3133" class="blob-num js-line-number" data-line-number="3133"></td>
        <td id="file--LC3133" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d %lld&quot;, &amp;index, &amp;val);</td>
      </tr>
      <tr>
        <td id="file--L3134" class="blob-num js-line-number" data-line-number="3134"></td>
        <td id="file--LC3134" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3135" class="blob-num js-line-number" data-line-number="3135"></td>
        <td id="file--LC3135" class="blob-code blob-code-inner js-file-line">            ll diff = val - arr[index];</td>
      </tr>
      <tr>
        <td id="file--L3136" class="blob-num js-line-number" data-line-number="3136"></td>
        <td id="file--LC3136" class="blob-code blob-code-inner js-file-line">            arr[index] = val;</td>
      </tr>
      <tr>
        <td id="file--L3137" class="blob-num js-line-number" data-line-number="3137"></td>
        <td id="file--LC3137" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3138" class="blob-num js-line-number" data-line-number="3138"></td>
        <td id="file--LC3138" class="blob-code blob-code-inner js-file-line">            update(tree, index, diff);</td>
      </tr>
      <tr>
        <td id="file--L3139" class="blob-num js-line-number" data-line-number="3139"></td>
        <td id="file--LC3139" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3140" class="blob-num js-line-number" data-line-number="3140"></td>
        <td id="file--LC3140" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3141" class="blob-num js-line-number" data-line-number="3141"></td>
        <td id="file--LC3141" class="blob-code blob-code-inner js-file-line">        else if (num == 2)</td>
      </tr>
      <tr>
        <td id="file--L3142" class="blob-num js-line-number" data-line-number="3142"></td>
        <td id="file--LC3142" class="blob-code blob-code-inner js-file-line">        {</td>
      </tr>
      <tr>
        <td id="file--L3143" class="blob-num js-line-number" data-line-number="3143"></td>
        <td id="file--LC3143" class="blob-code blob-code-inner js-file-line">            int left, right;</td>
      </tr>
      <tr>
        <td id="file--L3144" class="blob-num js-line-number" data-line-number="3144"></td>
        <td id="file--LC3144" class="blob-code blob-code-inner js-file-line">            scanf(&quot;%d %d&quot;, &amp;left, &amp;right);</td>
      </tr>
      <tr>
        <td id="file--L3145" class="blob-num js-line-number" data-line-number="3145"></td>
        <td id="file--LC3145" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3146" class="blob-num js-line-number" data-line-number="3146"></td>
        <td id="file--LC3146" class="blob-code blob-code-inner js-file-line">            printf(&quot;%lld\n&quot;, sum(tree, right) - sum(tree, left - 1));</td>
      </tr>
      <tr>
        <td id="file--L3147" class="blob-num js-line-number" data-line-number="3147"></td>
        <td id="file--LC3147" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3148" class="blob-num js-line-number" data-line-number="3148"></td>
        <td id="file--LC3148" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3149" class="blob-num js-line-number" data-line-number="3149"></td>
        <td id="file--LC3149" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3150" class="blob-num js-line-number" data-line-number="3150"></td>
        <td id="file--LC3150" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L3151" class="blob-num js-line-number" data-line-number="3151"></td>
        <td id="file--LC3151" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3152" class="blob-num js-line-number" data-line-number="3152"></td>
        <td id="file--LC3152" class="blob-code blob-code-inner js-file-line">출처: https://www.crocus.co.kr/666 [Crocus]</td>
      </tr>
      <tr>
        <td id="file--L3153" class="blob-num js-line-number" data-line-number="3153"></td>
        <td id="file--LC3153" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3154" class="blob-num js-line-number" data-line-number="3154"></td>
        <td id="file--LC3154" class="blob-code blob-code-inner js-file-line">■ 플러드필 Flood Fill (= 시드필 Seed Fill)</td>
      </tr>
      <tr>
        <td id="file--L3155" class="blob-num js-line-number" data-line-number="3155"></td>
        <td id="file--LC3155" class="blob-code blob-code-inner js-file-line">다차원 배열의 어떤 칸과 연결된 영역을 찾는 알고리즘이다.</td>
      </tr>
      <tr>
        <td id="file--L3156" class="blob-num js-line-number" data-line-number="3156"></td>
        <td id="file--LC3156" class="blob-code blob-code-inner js-file-line">이 알고리즘은 그림 프로그램에서 연결된 비슷한 색을 가지는 영역에 &quot;채우기&quot; 도구에 사용되며,</td>
      </tr>
      <tr>
        <td id="file--L3157" class="blob-num js-line-number" data-line-number="3157"></td>
        <td id="file--LC3157" class="blob-code blob-code-inner js-file-line">바둑이나 지뢰 찾기 같은 게임에서 어떤 비어 있는 칸을 표시 할 지를 결정할 때에도 사용된다.</td>
      </tr>
      <tr>
        <td id="file--L3158" class="blob-num js-line-number" data-line-number="3158"></td>
        <td id="file--LC3158" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3159" class="blob-num js-line-number" data-line-number="3159"></td>
        <td id="file--LC3159" class="blob-code blob-code-inner js-file-line">대부분 큐나 스택과 같은 자료구조를 사용한다.</td>
      </tr>
      <tr>
        <td id="file--L3160" class="blob-num js-line-number" data-line-number="3160"></td>
        <td id="file--LC3160" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3161" class="blob-num js-line-number" data-line-number="3161"></td>
        <td id="file--LC3161" class="blob-code blob-code-inner js-file-line">4방향 재귀적 플러드 필, 8방향 재귀적 플러드 필</td>
      </tr>
      <tr>
        <td id="file--L3162" class="blob-num js-line-number" data-line-number="3162"></td>
        <td id="file--LC3162" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3163" class="blob-num js-line-number" data-line-number="3163"></td>
        <td id="file--LC3163" class="blob-code blob-code-inner js-file-line">u와 v로 연결된 에지가 주어지는게 아니라 </td>
      </tr>
      <tr>
        <td id="file--L3164" class="blob-num js-line-number" data-line-number="3164"></td>
        <td id="file--LC3164" class="blob-code blob-code-inner js-file-line">에지가 이런 문제처럼 상하좌우로만 연결되있을때 쓰는 방법</td>
      </tr>
      <tr>
        <td id="file--L3165" class="blob-num js-line-number" data-line-number="3165"></td>
        <td id="file--LC3165" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3166" class="blob-num js-line-number" data-line-number="3166"></td>
        <td id="file--LC3166" class="blob-code blob-code-inner js-file-line">int dr[4] = { 0,0,1,-1 };</td>
      </tr>
      <tr>
        <td id="file--L3167" class="blob-num js-line-number" data-line-number="3167"></td>
        <td id="file--LC3167" class="blob-code blob-code-inner js-file-line">int dc[4] = { 1,-1,0,0 };</td>
      </tr>
      <tr>
        <td id="file--L3168" class="blob-num js-line-number" data-line-number="3168"></td>
        <td id="file--LC3168" class="blob-code blob-code-inner js-file-line">//우좌하상을 나타내는 인덱스배열</td>
      </tr>
      <tr>
        <td id="file--L3169" class="blob-num js-line-number" data-line-number="3169"></td>
        <td id="file--LC3169" class="blob-code blob-code-inner js-file-line">문제에 따라 8방면을 봐야되면 해당 좌표를 추가해주면 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L3170" class="blob-num js-line-number" data-line-number="3170"></td>
        <td id="file--LC3170" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3171" class="blob-num js-line-number" data-line-number="3171"></td>
        <td id="file--LC3171" class="blob-code blob-code-inner js-file-line">for (int k = 0; k &lt; 4; k++) {</td>
      </tr>
      <tr>
        <td id="file--L3172" class="blob-num js-line-number" data-line-number="3172"></td>
        <td id="file--LC3172" class="blob-code blob-code-inner js-file-line">	int nr = r + dr[k], nc = c + dc[k];</td>
      </tr>
      <tr>
        <td id="file--L3173" class="blob-num js-line-number" data-line-number="3173"></td>
        <td id="file--LC3173" class="blob-code blob-code-inner js-file-line">	if (0 &lt;= nr &amp;&amp; nr &lt; n &amp;&amp; 0 &lt;= nc&amp;&amp; nc &lt; n&amp;&amp;!check[nr][nc]&amp;&amp; arr[nr][nc]) {</td>
      </tr>
      <tr>
        <td id="file--L3174" class="blob-num js-line-number" data-line-number="3174"></td>
        <td id="file--LC3174" class="blob-code blob-code-inner js-file-line">		cnt+=dfs(nr, nc)+1;</td>
      </tr>
      <tr>
        <td id="file--L3175" class="blob-num js-line-number" data-line-number="3175"></td>
        <td id="file--LC3175" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L3176" class="blob-num js-line-number" data-line-number="3176"></td>
        <td id="file--LC3176" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3177" class="blob-num js-line-number" data-line-number="3177"></td>
        <td id="file--LC3177" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3178" class="blob-num js-line-number" data-line-number="3178"></td>
        <td id="file--LC3178" class="blob-code blob-code-inner js-file-line">■ 시뮬레이션 문제(Simulation)</td>
      </tr>
      <tr>
        <td id="file--L3179" class="blob-num js-line-number" data-line-number="3179"></td>
        <td id="file--LC3179" class="blob-code blob-code-inner js-file-line">알고리즘을 풀 때 모든 과정이 제시되어 그 과정을 거쳐 나온 결과를 추론하는 문제입니다.</td>
      </tr>
      <tr>
        <td id="file--L3180" class="blob-num js-line-number" data-line-number="3180"></td>
        <td id="file--LC3180" class="blob-code blob-code-inner js-file-line">시뮬레이션은 설명해 준 대로 쭉 이행하면 됩니다.</td>
      </tr>
      <tr>
        <td id="file--L3181" class="blob-num js-line-number" data-line-number="3181"></td>
        <td id="file--LC3181" class="blob-code blob-code-inner js-file-line">어떠한 작업을 수행할지 적혀 있으면 시뮬레이션 문제이고 없으면 전체 탐색 문제입니다.</td>
      </tr>
      <tr>
        <td id="file--L3182" class="blob-num js-line-number" data-line-number="3182"></td>
        <td id="file--LC3182" class="blob-code blob-code-inner js-file-line">* 문제 A - 요구하는 것이 같으므로 시뮬레이션이라고 볼 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L3183" class="blob-num js-line-number" data-line-number="3183"></td>
        <td id="file--LC3183" class="blob-code blob-code-inner js-file-line">3만원, 5만원, 8만원의 가치가 있는 물건이 있습니다. 여기서 2개의 물건을 들고 갈 수 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L3184" class="blob-num js-line-number" data-line-number="3184"></td>
        <td id="file--LC3184" class="blob-code blob-code-inner js-file-line">가치의 합이 최대가 되도록 고르려고 합니다. 여러분이 들고 돌아갈 수 있는 최대 가치의 합계는 얼마인가요?</td>
      </tr>
      <tr>
        <td id="file--L3185" class="blob-num js-line-number" data-line-number="3185"></td>
        <td id="file--LC3185" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3186" class="blob-num js-line-number" data-line-number="3186"></td>
        <td id="file--LC3186" class="blob-code blob-code-inner js-file-line">* 문제 B - 시뮬레이션</td>
      </tr>
      <tr>
        <td id="file--L3187" class="blob-num js-line-number" data-line-number="3187"></td>
        <td id="file--LC3187" class="blob-code blob-code-inner js-file-line">3만원, 5만원, 8만원의 가치가 있는 물건이 있습니다. 여기서 2개의 물건을 들고 갈 수 있습니다.</td>
      </tr>
      <tr>
        <td id="file--L3188" class="blob-num js-line-number" data-line-number="3188"></td>
        <td id="file--LC3188" class="blob-code blob-code-inner js-file-line">가치의 합이 최대가 되도록 비싼 순서대로 2개를 들고 돌아왔습니다. 여러분이 들고 온 물건의 가치 합계는 얼마인가요?</td>
      </tr>
      <tr>
        <td id="file--L3189" class="blob-num js-line-number" data-line-number="3189"></td>
        <td id="file--LC3189" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3190" class="blob-num js-line-number" data-line-number="3190"></td>
        <td id="file--LC3190" class="blob-code blob-code-inner js-file-line">■ 이진탐색, 이분탐색(Binary Search)와 파라메트릭 서치(Parametric Search)</td>
      </tr>
      <tr>
        <td id="file--L3191" class="blob-num js-line-number" data-line-number="3191"></td>
        <td id="file--LC3191" class="blob-code blob-code-inner js-file-line">우선 이진탐색은 O(N)-&gt; O(logN) 가능하게 하는 서칭기법 가운데 값을 기준으로 비교를 해 나가면서, 비교의 범위를 절반씩 줄여 나갈수 있게 된다.</td>
      </tr>
      <tr>
        <td id="file--L3192" class="blob-num js-line-number" data-line-number="3192"></td>
        <td id="file--LC3192" class="blob-code blob-code-inner js-file-line">그러기 위해 정렬이 필수다.</td>
      </tr>
      <tr>
        <td id="file--L3193" class="blob-num js-line-number" data-line-number="3193"></td>
        <td id="file--LC3193" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3194" class="blob-num js-line-number" data-line-number="3194"></td>
        <td id="file--LC3194" class="blob-code blob-code-inner js-file-line">int bSearch(int *arr,int size, int value) {</td>
      </tr>
      <tr>
        <td id="file--L3195" class="blob-num js-line-number" data-line-number="3195"></td>
        <td id="file--LC3195" class="blob-code blob-code-inner js-file-line">    int left = 0;</td>
      </tr>
      <tr>
        <td id="file--L3196" class="blob-num js-line-number" data-line-number="3196"></td>
        <td id="file--LC3196" class="blob-code blob-code-inner js-file-line">    int right = size - 1;</td>
      </tr>
      <tr>
        <td id="file--L3197" class="blob-num js-line-number" data-line-number="3197"></td>
        <td id="file--LC3197" class="blob-code blob-code-inner js-file-line">    int mid;</td>
      </tr>
      <tr>
        <td id="file--L3198" class="blob-num js-line-number" data-line-number="3198"></td>
        <td id="file--LC3198" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3199" class="blob-num js-line-number" data-line-number="3199"></td>
        <td id="file--LC3199" class="blob-code blob-code-inner js-file-line">    while (left&lt;right) {</td>
      </tr>
      <tr>
        <td id="file--L3200" class="blob-num js-line-number" data-line-number="3200"></td>
        <td id="file--LC3200" class="blob-code blob-code-inner js-file-line">        mid = (left + right) / 2;</td>
      </tr>
      <tr>
        <td id="file--L3201" class="blob-num js-line-number" data-line-number="3201"></td>
        <td id="file--LC3201" class="blob-code blob-code-inner js-file-line">        if (arr[mid] == value) return mid;</td>
      </tr>
      <tr>
        <td id="file--L3202" class="blob-num js-line-number" data-line-number="3202"></td>
        <td id="file--LC3202" class="blob-code blob-code-inner js-file-line">        else if (arr[mid] &gt; value) right = mid - 1;</td>
      </tr>
      <tr>
        <td id="file--L3203" class="blob-num js-line-number" data-line-number="3203"></td>
        <td id="file--LC3203" class="blob-code blob-code-inner js-file-line">        else left = mid + 1;</td>
      </tr>
      <tr>
        <td id="file--L3204" class="blob-num js-line-number" data-line-number="3204"></td>
        <td id="file--LC3204" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3205" class="blob-num js-line-number" data-line-number="3205"></td>
        <td id="file--LC3205" class="blob-code blob-code-inner js-file-line">    return -1;</td>
      </tr>
      <tr>
        <td id="file--L3206" class="blob-num js-line-number" data-line-number="3206"></td>
        <td id="file--LC3206" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3207" class="blob-num js-line-number" data-line-number="3207"></td>
        <td id="file--LC3207" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3208" class="blob-num js-line-number" data-line-number="3208"></td>
        <td id="file--LC3208" class="blob-code blob-code-inner js-file-line">int main() {</td>
      </tr>
      <tr>
        <td id="file--L3209" class="blob-num js-line-number" data-line-number="3209"></td>
        <td id="file--LC3209" class="blob-code blob-code-inner js-file-line">    int arr[10] = { 1,2,3,4,5,6,7,8,9,10 };</td>
      </tr>
      <tr>
        <td id="file--L3210" class="blob-num js-line-number" data-line-number="3210"></td>
        <td id="file--LC3210" class="blob-code blob-code-inner js-file-line">    printf(&quot;%d에 %d가 존재합니다.\n&quot;, bSearch(arr,10,3),3);</td>
      </tr>
      <tr>
        <td id="file--L3211" class="blob-num js-line-number" data-line-number="3211"></td>
        <td id="file--LC3211" class="blob-code blob-code-inner js-file-line">    printf(&quot;%d에 %d가 존재합니다.\n&quot;, bSearch(arr, 10, 100), 100);</td>
      </tr>
      <tr>
        <td id="file--L3212" class="blob-num js-line-number" data-line-number="3212"></td>
        <td id="file--LC3212" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L3213" class="blob-num js-line-number" data-line-number="3213"></td>
        <td id="file--LC3213" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3214" class="blob-num js-line-number" data-line-number="3214"></td>
        <td id="file--LC3214" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3215" class="blob-num js-line-number" data-line-number="3215"></td>
        <td id="file--LC3215" class="blob-code blob-code-inner js-file-line">파라매트릭 서치는 </td>
      </tr>
      <tr>
        <td id="file--L3216" class="blob-num js-line-number" data-line-number="3216"></td>
        <td id="file--LC3216" class="blob-code blob-code-inner js-file-line">배열의 들어가 있는 값이 아닌, 수직선 상 위에서 내가 원하는 값을 이진탐색으로 찾아가는 느낌으로 이해하는 것이 이해하기 편하다.</td>
      </tr>
      <tr>
        <td id="file--L3217" class="blob-num js-line-number" data-line-number="3217"></td>
        <td id="file--LC3217" class="blob-code blob-code-inner js-file-line">주로 내가 원하는 조건을 만족하는 가장 알맞는 값을 특정한 오차범위 이내에서 알고싶어 할 때 사용할 경우가 많다.</td>
      </tr>
      <tr>
        <td id="file--L3218" class="blob-num js-line-number" data-line-number="3218"></td>
        <td id="file--LC3218" class="blob-code blob-code-inner js-file-line">내가 가지고 있는 값이 아닌 값의 범위를 기준으로 답을 탐색한다. </td>
      </tr>
      <tr>
        <td id="file--L3219" class="blob-num js-line-number" data-line-number="3219"></td>
        <td id="file--LC3219" class="blob-code blob-code-inner js-file-line">그러기 위해서는 답에 가까워 질수 있게 만드는 compare 함수를 적절히 만들어야 한다.</td>
      </tr>
      <tr>
        <td id="file--L3220" class="blob-num js-line-number" data-line-number="3220"></td>
        <td id="file--LC3220" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3221" class="blob-num js-line-number" data-line-number="3221"></td>
        <td id="file--LC3221" class="blob-code blob-code-inner js-file-line">간단한 예를 들어보면, 방정식을 푼다고 생각해 보자.</td>
      </tr>
      <tr>
        <td id="file--L3222" class="blob-num js-line-number" data-line-number="3222"></td>
        <td id="file--LC3222" class="blob-code blob-code-inner js-file-line">Y= X^4+X^3+X^2+X 라는 방정식의 Y값이 주어졌을 때 0~10 사이에 값중 알맞는 것을 소수점 5자리 이내의 오차범위에서 구해보자고 하자.</td>
      </tr>
      <tr>
        <td id="file--L3223" class="blob-num js-line-number" data-line-number="3223"></td>
        <td id="file--LC3223" class="blob-code blob-code-inner js-file-line">ex) Y= 15</td>
      </tr>
      <tr>
        <td id="file--L3224" class="blob-num js-line-number" data-line-number="3224"></td>
        <td id="file--LC3224" class="blob-code blob-code-inner js-file-line">1- 10 이므로 MID X= 5</td>
      </tr>
      <tr>
        <td id="file--L3225" class="blob-num js-line-number" data-line-number="3225"></td>
        <td id="file--LC3225" class="blob-code blob-code-inner js-file-line">625+125+25+5 = 780 더 작아야함.</td>
      </tr>
      <tr>
        <td id="file--L3226" class="blob-num js-line-number" data-line-number="3226"></td>
        <td id="file--LC3226" class="blob-code blob-code-inner js-file-line">1 X=2.4999995 4.9999999</td>
      </tr>
      <tr>
        <td id="file--L3227" class="blob-num js-line-number" data-line-number="3227"></td>
        <td id="file--LC3227" class="blob-code blob-code-inner js-file-line">39+16+6+3=64  더 작아야함</td>
      </tr>
      <tr>
        <td id="file--L3228" class="blob-num js-line-number" data-line-number="3228"></td>
        <td id="file--LC3228" class="blob-code blob-code-inner js-file-line">...반복</td>
      </tr>
      <tr>
        <td id="file--L3229" class="blob-num js-line-number" data-line-number="3229"></td>
        <td id="file--LC3229" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3230" class="blob-num js-line-number" data-line-number="3230"></td>
        <td id="file--LC3230" class="blob-code blob-code-inner js-file-line">파라메트릭 문제 - 입국심사 문제</td>
      </tr>
      <tr>
        <td id="file--L3231" class="blob-num js-line-number" data-line-number="3231"></td>
        <td id="file--LC3231" class="blob-code blob-code-inner js-file-line">입국심사대는 총 N개가 있다. 각 입국심사관이 심사를 하는데 걸리는 시간은 사람마다 모두 다르다. k번 심사대에 앉아있는 심사관이 한 명을 심사를 하는데 드는 시간은 Tk이다.</td>
      </tr>
      <tr>
        <td id="file--L3232" class="blob-num js-line-number" data-line-number="3232"></td>
        <td id="file--LC3232" class="blob-code blob-code-inner js-file-line">가장 처음에 모든 심사대는 비어있고, 심사를 할 준비를 모두 끝냈다. 상근이와 친구들은 비행기 하나를 전세내고 놀러갔기 때문에, 지금 심사를 기다리고 있는 사람은</td>
      </tr>
      <tr>
        <td id="file--L3233" class="blob-num js-line-number" data-line-number="3233"></td>
        <td id="file--LC3233" class="blob-code blob-code-inner js-file-line">모두 상근이와 친구들이다. 한 심사대에서는 한 번에 한 사람만 심사를 할 수 있다. 가장 앞에 서 있는 사람은 비어있는 심사대가 보이면 거기로 가서 심사를 받을 수 있다.</td>
      </tr>
      <tr>
        <td id="file--L3234" class="blob-num js-line-number" data-line-number="3234"></td>
        <td id="file--LC3234" class="blob-code blob-code-inner js-file-line">하지만 항상 이동을 해야 하는 것은 아니다. 더 빠른 심사대의 심사가 끝나길 기다린 다음에 그 곳으로 가서 심사를 받아도 된다.</td>
      </tr>
      <tr>
        <td id="file--L3235" class="blob-num js-line-number" data-line-number="3235"></td>
        <td id="file--LC3235" class="blob-code blob-code-inner js-file-line">상근이와 친구들은 모두 컴퓨터 공학과 학생이기 때문에, 어떻게 심사를 받으면 모든 사람이 심사를 받는데 걸리는 시간이 최소가 될지 궁금해졌다.</td>
      </tr>
      <tr>
        <td id="file--L3236" class="blob-num js-line-number" data-line-number="3236"></td>
        <td id="file--LC3236" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3237" class="blob-num js-line-number" data-line-number="3237"></td>
        <td id="file--LC3237" class="blob-code blob-code-inner js-file-line">예를 들어, 두 심사대가 있고, 심사를 하는데 걸리는 시간이 각각 7초와 10초라고 하자. 줄에 서 있는 사람이 6명이라면, 가장 첫 두 사람은 즉시 심사를 받으러 가게 된다.</td>
      </tr>
      <tr>
        <td id="file--L3238" class="blob-num js-line-number" data-line-number="3238"></td>
        <td id="file--LC3238" class="blob-code blob-code-inner js-file-line">7초가 되었을 때, 첫 번째 심사대는 비어있게 되고, 세 번째 사람이 그곳으로 이동해서 심사를 받으면 된다.</td>
      </tr>
      <tr>
        <td id="file--L3239" class="blob-num js-line-number" data-line-number="3239"></td>
        <td id="file--LC3239" class="blob-code blob-code-inner js-file-line">10초가 되는 순간, 네 번째 사람이 이곳으로 이동해서 심사를 받으면 되고, 14초가 되었을 때는</td>
      </tr>
      <tr>
        <td id="file--L3240" class="blob-num js-line-number" data-line-number="3240"></td>
        <td id="file--LC3240" class="blob-code blob-code-inner js-file-line">다섯 번째 사람이 첫 번째 심사대로 이동해서 심사를 받으면 된다. 20초가 되었을 때, 두 번째 심사대가 비어있게 된다.</td>
      </tr>
      <tr>
        <td id="file--L3241" class="blob-num js-line-number" data-line-number="3241"></td>
        <td id="file--LC3241" class="blob-code blob-code-inner js-file-line">하지만, 여섯 번째 사람이 그 곳으로 이동하지 않고, 1초를 더 기다린 다음에 첫 번째 심사대로 이동해서 심사를 받으면,</td>
      </tr>
      <tr>
        <td id="file--L3242" class="blob-num js-line-number" data-line-number="3242"></td>
        <td id="file--LC3242" class="blob-code blob-code-inner js-file-line">모든 사람이 심사를 받는데 걸리는 시간이 28초가 된다. 만약, 마지막 사람이 1초를 더 기다리지않고,</td>
      </tr>
      <tr>
        <td id="file--L3243" class="blob-num js-line-number" data-line-number="3243"></td>
        <td id="file--LC3243" class="blob-code blob-code-inner js-file-line">첫 번째 심사대로 이동하지 않았다면, 모든 사람이 심사를 받는데 걸리는 시간이 30초가 되게 된다.</td>
      </tr>
      <tr>
        <td id="file--L3244" class="blob-num js-line-number" data-line-number="3244"></td>
        <td id="file--LC3244" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3245" class="blob-num js-line-number" data-line-number="3245"></td>
        <td id="file--LC3245" class="blob-code blob-code-inner js-file-line">상근이와 친구들이 심사를 받는데 걸리는 시간의 최솟값을 구하는 프로그램을 작성하시오.</td>
      </tr>
      <tr>
        <td id="file--L3246" class="blob-num js-line-number" data-line-number="3246"></td>
        <td id="file--LC3246" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3247" class="blob-num js-line-number" data-line-number="3247"></td>
        <td id="file--LC3247" class="blob-code blob-code-inner js-file-line">입력</td>
      </tr>
      <tr>
        <td id="file--L3248" class="blob-num js-line-number" data-line-number="3248"></td>
        <td id="file--LC3248" class="blob-code blob-code-inner js-file-line">첫째 줄에 N과 M이 주어진다. (1 ≤ N ≤ 100,000, 1 ≤ M ≤ 1,000,000,000)</td>
      </tr>
      <tr>
        <td id="file--L3249" class="blob-num js-line-number" data-line-number="3249"></td>
        <td id="file--LC3249" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3250" class="blob-num js-line-number" data-line-number="3250"></td>
        <td id="file--LC3250" class="blob-code blob-code-inner js-file-line">다음 N개 줄에는 각 심사대에서 심사를 하는데 걸리는 시간인 Tk가 주어진다. (1 ≤ Tk ≤ 109)</td>
      </tr>
      <tr>
        <td id="file--L3251" class="blob-num js-line-number" data-line-number="3251"></td>
        <td id="file--LC3251" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3252" class="blob-num js-line-number" data-line-number="3252"></td>
        <td id="file--LC3252" class="blob-code blob-code-inner js-file-line">그냥 무작정 찍기로 총 걸린 시간을 찍는다. 이 때 이분탐색으로 찍는다.</td>
      </tr>
      <tr>
        <td id="file--L3253" class="blob-num js-line-number" data-line-number="3253"></td>
        <td id="file--LC3253" class="blob-code blob-code-inner js-file-line">최대시간은 제일 오래걸리는 심사대*인원수 이다. (초기 right 값)</td>
      </tr>
      <tr>
        <td id="file--L3254" class="blob-num js-line-number" data-line-number="3254"></td>
        <td id="file--LC3254" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3255" class="blob-num js-line-number" data-line-number="3255"></td>
        <td id="file--LC3255" class="blob-code blob-code-inner js-file-line">l=1  </td>
      </tr>
      <tr>
        <td id="file--L3256" class="blob-num js-line-number" data-line-number="3256"></td>
        <td id="file--LC3256" class="blob-code blob-code-inner js-file-line">r=60 </td>
      </tr>
      <tr>
        <td id="file--L3257" class="blob-num js-line-number" data-line-number="3257"></td>
        <td id="file--LC3257" class="blob-code blob-code-inner js-file-line">mid  = 30 </td>
      </tr>
      <tr>
        <td id="file--L3258" class="blob-num js-line-number" data-line-number="3258"></td>
        <td id="file--LC3258" class="blob-code blob-code-inner js-file-line">tot = 30/7 + 30/10 = 7 //총 걸린시간으로 몇명이 지나갔는지 확인 ( 30분동안 최대 몇명이 지나갈수있는가 ) </td>
      </tr>
      <tr>
        <td id="file--L3259" class="blob-num js-line-number" data-line-number="3259"></td>
        <td id="file--LC3259" class="blob-code blob-code-inner js-file-line">-&gt;몫만 있으면 됨 </td>
      </tr>
      <tr>
        <td id="file--L3260" class="blob-num js-line-number" data-line-number="3260"></td>
        <td id="file--LC3260" class="blob-code blob-code-inner js-file-line">이시간안으로는 총인원이 턱도없으면 </td>
      </tr>
      <tr>
        <td id="file--L3261" class="blob-num js-line-number" data-line-number="3261"></td>
        <td id="file--LC3261" class="blob-code blob-code-inner js-file-line">시간을 늘려줘야되고 </td>
      </tr>
      <tr>
        <td id="file--L3262" class="blob-num js-line-number" data-line-number="3262"></td>
        <td id="file--LC3262" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3263" class="blob-num js-line-number" data-line-number="3263"></td>
        <td id="file--LC3263" class="blob-code blob-code-inner js-file-line">총인원보다 많은인원을 통과시킬수있으면 시간을 줄이고 </td>
      </tr>
      <tr>
        <td id="file--L3264" class="blob-num js-line-number" data-line-number="3264"></td>
        <td id="file--LC3264" class="blob-code blob-code-inner js-file-line">총인원보다 같더라도 시간을 줄여봐야한다. 왜냐하면 어느게이트에 갔냐에 따라서 시간이 더 줄어들수있기 때문 </td>
      </tr>
      <tr>
        <td id="file--L3265" class="blob-num js-line-number" data-line-number="3265"></td>
        <td id="file--LC3265" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3266" class="blob-num js-line-number" data-line-number="3266"></td>
        <td id="file--LC3266" class="blob-code blob-code-inner js-file-line">right= 29 </td>
      </tr>
      <tr>
        <td id="file--L3267" class="blob-num js-line-number" data-line-number="3267"></td>
        <td id="file--LC3267" class="blob-code blob-code-inner js-file-line">left=1 </td>
      </tr>
      <tr>
        <td id="file--L3268" class="blob-num js-line-number" data-line-number="3268"></td>
        <td id="file--LC3268" class="blob-code blob-code-inner js-file-line">mid=15 </td>
      </tr>
      <tr>
        <td id="file--L3269" class="blob-num js-line-number" data-line-number="3269"></td>
        <td id="file--LC3269" class="blob-code blob-code-inner js-file-line">tot=15/7+15/10=3 //모자름 </td>
      </tr>
      <tr>
        <td id="file--L3270" class="blob-num js-line-number" data-line-number="3270"></td>
        <td id="file--LC3270" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3271" class="blob-num js-line-number" data-line-number="3271"></td>
        <td id="file--LC3271" class="blob-code blob-code-inner js-file-line">r=29 </td>
      </tr>
      <tr>
        <td id="file--L3272" class="blob-num js-line-number" data-line-number="3272"></td>
        <td id="file--LC3272" class="blob-code blob-code-inner js-file-line">l=16 </td>
      </tr>
      <tr>
        <td id="file--L3273" class="blob-num js-line-number" data-line-number="3273"></td>
        <td id="file--LC3273" class="blob-code blob-code-inner js-file-line">m=22 </td>
      </tr>
      <tr>
        <td id="file--L3274" class="blob-num js-line-number" data-line-number="3274"></td>
        <td id="file--LC3274" class="blob-code blob-code-inner js-file-line">tot=22/7+22/10 = 5 //모자름 </td>
      </tr>
      <tr>
        <td id="file--L3275" class="blob-num js-line-number" data-line-number="3275"></td>
        <td id="file--LC3275" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3276" class="blob-num js-line-number" data-line-number="3276"></td>
        <td id="file--LC3276" class="blob-code blob-code-inner js-file-line">r=29 </td>
      </tr>
      <tr>
        <td id="file--L3277" class="blob-num js-line-number" data-line-number="3277"></td>
        <td id="file--LC3277" class="blob-code blob-code-inner js-file-line">l=23 </td>
      </tr>
      <tr>
        <td id="file--L3278" class="blob-num js-line-number" data-line-number="3278"></td>
        <td id="file--LC3278" class="blob-code blob-code-inner js-file-line">m=26 </td>
      </tr>
      <tr>
        <td id="file--L3279" class="blob-num js-line-number" data-line-number="3279"></td>
        <td id="file--LC3279" class="blob-code blob-code-inner js-file-line">tot=26/7+26/10=5 //모자름 </td>
      </tr>
      <tr>
        <td id="file--L3280" class="blob-num js-line-number" data-line-number="3280"></td>
        <td id="file--LC3280" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3281" class="blob-num js-line-number" data-line-number="3281"></td>
        <td id="file--LC3281" class="blob-code blob-code-inner js-file-line">r=29 </td>
      </tr>
      <tr>
        <td id="file--L3282" class="blob-num js-line-number" data-line-number="3282"></td>
        <td id="file--LC3282" class="blob-code blob-code-inner js-file-line">l=27 </td>
      </tr>
      <tr>
        <td id="file--L3283" class="blob-num js-line-number" data-line-number="3283"></td>
        <td id="file--LC3283" class="blob-code blob-code-inner js-file-line">m=28 </td>
      </tr>
      <tr>
        <td id="file--L3284" class="blob-num js-line-number" data-line-number="3284"></td>
        <td id="file--LC3284" class="blob-code blob-code-inner js-file-line">tot=28/7+28/10=6 //충분 </td>
      </tr>
      <tr>
        <td id="file--L3285" class="blob-num js-line-number" data-line-number="3285"></td>
        <td id="file--LC3285" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3286" class="blob-num js-line-number" data-line-number="3286"></td>
        <td id="file--LC3286" class="blob-code blob-code-inner js-file-line">r=27 </td>
      </tr>
      <tr>
        <td id="file--L3287" class="blob-num js-line-number" data-line-number="3287"></td>
        <td id="file--LC3287" class="blob-code blob-code-inner js-file-line">l=27 </td>
      </tr>
      <tr>
        <td id="file--L3288" class="blob-num js-line-number" data-line-number="3288"></td>
        <td id="file--LC3288" class="blob-code blob-code-inner js-file-line">m=27 </td>
      </tr>
      <tr>
        <td id="file--L3289" class="blob-num js-line-number" data-line-number="3289"></td>
        <td id="file--LC3289" class="blob-code blob-code-inner js-file-line">tot=27/7+27/10=5 // 모자름 </td>
      </tr>
      <tr>
        <td id="file--L3290" class="blob-num js-line-number" data-line-number="3290"></td>
        <td id="file--LC3290" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3291" class="blob-num js-line-number" data-line-number="3291"></td>
        <td id="file--LC3291" class="blob-code blob-code-inner js-file-line">●이분탐색 : 답을 찍어보는 경우에 사용된다</td>
      </tr>
      <tr>
        <td id="file--L3292" class="blob-num js-line-number" data-line-number="3292"></td>
        <td id="file--LC3292" class="blob-code blob-code-inner js-file-line">●이분탐색 다음 타겟 정하기 : </td>
      </tr>
      <tr>
        <td id="file--L3293" class="blob-num js-line-number" data-line-number="3293"></td>
        <td id="file--LC3293" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3294" class="blob-num js-line-number" data-line-number="3294"></td>
        <td id="file--LC3294" class="blob-code blob-code-inner js-file-line">최적의 해를 구하는 과정에서 </td>
      </tr>
      <tr>
        <td id="file--L3295" class="blob-num js-line-number" data-line-number="3295"></td>
        <td id="file--LC3295" class="blob-code blob-code-inner js-file-line">내가 구한값이 너무 작으면 더큰게 필요하니까 left=mid+1 해주고 </td>
      </tr>
      <tr>
        <td id="file--L3296" class="blob-num js-line-number" data-line-number="3296"></td>
        <td id="file--LC3296" class="blob-code blob-code-inner js-file-line">구한값이 너무 크면 더 작은게 필요하니까 right=mid-1 해주고 </td>
      </tr>
      <tr>
        <td id="file--L3297" class="blob-num js-line-number" data-line-number="3297"></td>
        <td id="file--LC3297" class="blob-code blob-code-inner js-file-line">구한값으로 만족하다면 ? (==일때는) -&gt; 최적의해가 최소값이라면 right=mid-1 해서 더 줄여서 시도해본다. </td>
      </tr>
      <tr>
        <td id="file--L3298" class="blob-num js-line-number" data-line-number="3298"></td>
        <td id="file--LC3298" class="blob-code blob-code-inner js-file-line">최적의 해가 최대값이라면 left=mid+1 해주면된다. </td>
      </tr>
      <tr>
        <td id="file--L3299" class="blob-num js-line-number" data-line-number="3299"></td>
        <td id="file--LC3299" class="blob-code blob-code-inner js-file-line">어차피 이분탐색은 반복되더라도 l&lt;=r일때까지만 하고 logN의 시간복잡도이기 때문에 끝까지 가봐도 시간이 충분하다.</td>
      </tr>
      <tr>
        <td id="file--L3300" class="blob-num js-line-number" data-line-number="3300"></td>
        <td id="file--LC3300" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3301" class="blob-num js-line-number" data-line-number="3301"></td>
        <td id="file--LC3301" class="blob-code blob-code-inner js-file-line">[나의 풀이]</td>
      </tr>
      <tr>
        <td id="file--L3302" class="blob-num js-line-number" data-line-number="3302"></td>
        <td id="file--LC3302" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L3303" class="blob-num js-line-number" data-line-number="3303"></td>
        <td id="file--LC3303" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3304" class="blob-num js-line-number" data-line-number="3304"></td>
        <td id="file--LC3304" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L3305" class="blob-num js-line-number" data-line-number="3305"></td>
        <td id="file--LC3305" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3306" class="blob-num js-line-number" data-line-number="3306"></td>
        <td id="file--LC3306" class="blob-code blob-code-inner js-file-line">long solution(int n, vector&lt;int&gt; times) {</td>
      </tr>
      <tr>
        <td id="file--L3307" class="blob-num js-line-number" data-line-number="3307"></td>
        <td id="file--LC3307" class="blob-code blob-code-inner js-file-line">    int tSize=times.size();</td>
      </tr>
      <tr>
        <td id="file--L3308" class="blob-num js-line-number" data-line-number="3308"></td>
        <td id="file--LC3308" class="blob-code blob-code-inner js-file-line">    long answer = 0, s=0, e=1e9*n, mid, doneN; //e= Max takeTime * peopleNum</td>
      </tr>
      <tr>
        <td id="file--L3309" class="blob-num js-line-number" data-line-number="3309"></td>
        <td id="file--LC3309" class="blob-code blob-code-inner js-file-line">    </td>
      </tr>
      <tr>
        <td id="file--L3310" class="blob-num js-line-number" data-line-number="3310"></td>
        <td id="file--LC3310" class="blob-code blob-code-inner js-file-line">    while(s&lt;e) {</td>
      </tr>
      <tr>
        <td id="file--L3311" class="blob-num js-line-number" data-line-number="3311"></td>
        <td id="file--LC3311" class="blob-code blob-code-inner js-file-line">        mid=(s+e)&gt;&gt;1;</td>
      </tr>
      <tr>
        <td id="file--L3312" class="blob-num js-line-number" data-line-number="3312"></td>
        <td id="file--LC3312" class="blob-code blob-code-inner js-file-line">        doneN=0;</td>
      </tr>
      <tr>
        <td id="file--L3313" class="blob-num js-line-number" data-line-number="3313"></td>
        <td id="file--LC3313" class="blob-code blob-code-inner js-file-line">        for(int i=0; i&lt;tSize; i++) doneN += mid/times[i];</td>
      </tr>
      <tr>
        <td id="file--L3314" class="blob-num js-line-number" data-line-number="3314"></td>
        <td id="file--LC3314" class="blob-code blob-code-inner js-file-line">        if(doneN&gt;=n) e=mid;</td>
      </tr>
      <tr>
        <td id="file--L3315" class="blob-num js-line-number" data-line-number="3315"></td>
        <td id="file--LC3315" class="blob-code blob-code-inner js-file-line">        else s=mid+1;</td>
      </tr>
      <tr>
        <td id="file--L3316" class="blob-num js-line-number" data-line-number="3316"></td>
        <td id="file--LC3316" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3317" class="blob-num js-line-number" data-line-number="3317"></td>
        <td id="file--LC3317" class="blob-code blob-code-inner js-file-line">        </td>
      </tr>
      <tr>
        <td id="file--L3318" class="blob-num js-line-number" data-line-number="3318"></td>
        <td id="file--LC3318" class="blob-code blob-code-inner js-file-line">    return answer=s;</td>
      </tr>
      <tr>
        <td id="file--L3319" class="blob-num js-line-number" data-line-number="3319"></td>
        <td id="file--LC3319" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3320" class="blob-num js-line-number" data-line-number="3320"></td>
        <td id="file--LC3320" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3321" class="blob-num js-line-number" data-line-number="3321"></td>
        <td id="file--LC3321" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3322" class="blob-num js-line-number" data-line-number="3322"></td>
        <td id="file--LC3322" class="blob-code blob-code-inner js-file-line">■ 비트 마스크(Bit Mask)</td>
      </tr>
      <tr>
        <td id="file--L3323" class="blob-num js-line-number" data-line-number="3323"></td>
        <td id="file--LC3323" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3324" class="blob-num js-line-number" data-line-number="3324"></td>
        <td id="file--LC3324" class="blob-code blob-code-inner js-file-line">■ 외판원 문제(TSP:traveling salesperson problem)</td>
      </tr>
      <tr>
        <td id="file--L3325" class="blob-num js-line-number" data-line-number="3325"></td>
        <td id="file--LC3325" class="blob-code blob-code-inner js-file-line">여러 도시들이 있고 한 도시에서 다른 도시로 이동하는 비용이 모두 주어졌을 때,</td>
      </tr>
      <tr>
        <td id="file--L3326" class="blob-num js-line-number" data-line-number="3326"></td>
        <td id="file--LC3326" class="blob-code blob-code-inner js-file-line">모든 도시들을 단 한 번만 방문하고 원래 시작점으로 돌아오는 최소 비용의 이동 순서를 구하는 것이다.</td>
      </tr>
      <tr>
        <td id="file--L3327" class="blob-num js-line-number" data-line-number="3327"></td>
        <td id="file--LC3327" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3328" class="blob-num js-line-number" data-line-number="3328"></td>
        <td id="file--LC3328" class="blob-code blob-code-inner js-file-line">[구현]</td>
      </tr>
      <tr>
        <td id="file--L3329" class="blob-num js-line-number" data-line-number="3329"></td>
        <td id="file--LC3329" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L3330" class="blob-num js-line-number" data-line-number="3330"></td>
        <td id="file--LC3330" class="blob-code blob-code-inner js-file-line">#include &lt;algorithm&gt;</td>
      </tr>
      <tr>
        <td id="file--L3331" class="blob-num js-line-number" data-line-number="3331"></td>
        <td id="file--LC3331" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3332" class="blob-num js-line-number" data-line-number="3332"></td>
        <td id="file--LC3332" class="blob-code blob-code-inner js-file-line">#define MAX_NUM 987654321</td>
      </tr>
      <tr>
        <td id="file--L3333" class="blob-num js-line-number" data-line-number="3333"></td>
        <td id="file--LC3333" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3334" class="blob-num js-line-number" data-line-number="3334"></td>
        <td id="file--LC3334" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L3335" class="blob-num js-line-number" data-line-number="3335"></td>
        <td id="file--LC3335" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3336" class="blob-num js-line-number" data-line-number="3336"></td>
        <td id="file--LC3336" class="blob-code blob-code-inner js-file-line">int city[16][16];</td>
      </tr>
      <tr>
        <td id="file--L3337" class="blob-num js-line-number" data-line-number="3337"></td>
        <td id="file--LC3337" class="blob-code blob-code-inner js-file-line">int cache[16][65536];</td>
      </tr>
      <tr>
        <td id="file--L3338" class="blob-num js-line-number" data-line-number="3338"></td>
        <td id="file--LC3338" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3339" class="blob-num js-line-number" data-line-number="3339"></td>
        <td id="file--LC3339" class="blob-code blob-code-inner js-file-line">int num;</td>
      </tr>
      <tr>
        <td id="file--L3340" class="blob-num js-line-number" data-line-number="3340"></td>
        <td id="file--LC3340" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3341" class="blob-num js-line-number" data-line-number="3341"></td>
        <td id="file--LC3341" class="blob-code blob-code-inner js-file-line">int tsp(int cur, int visited) {</td>
      </tr>
      <tr>
        <td id="file--L3342" class="blob-num js-line-number" data-line-number="3342"></td>
        <td id="file--LC3342" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3343" class="blob-num js-line-number" data-line-number="3343"></td>
        <td id="file--LC3343" class="blob-code blob-code-inner js-file-line">    // 다 방문 했다면</td>
      </tr>
      <tr>
        <td id="file--L3344" class="blob-num js-line-number" data-line-number="3344"></td>
        <td id="file--LC3344" class="blob-code blob-code-inner js-file-line">    if (visited == (1 &lt;&lt; num) - 1) {</td>
      </tr>
      <tr>
        <td id="file--L3345" class="blob-num js-line-number" data-line-number="3345"></td>
        <td id="file--LC3345" class="blob-code blob-code-inner js-file-line">        return city[cur][0];</td>
      </tr>
      <tr>
        <td id="file--L3346" class="blob-num js-line-number" data-line-number="3346"></td>
        <td id="file--LC3346" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3347" class="blob-num js-line-number" data-line-number="3347"></td>
        <td id="file--LC3347" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3348" class="blob-num js-line-number" data-line-number="3348"></td>
        <td id="file--LC3348" class="blob-code blob-code-inner js-file-line">    int &amp; ret = cache[cur][visited];</td>
      </tr>
      <tr>
        <td id="file--L3349" class="blob-num js-line-number" data-line-number="3349"></td>
        <td id="file--LC3349" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3350" class="blob-num js-line-number" data-line-number="3350"></td>
        <td id="file--LC3350" class="blob-code blob-code-inner js-file-line">    // 메모이제이션 반환</td>
      </tr>
      <tr>
        <td id="file--L3351" class="blob-num js-line-number" data-line-number="3351"></td>
        <td id="file--LC3351" class="blob-code blob-code-inner js-file-line">    if (ret != 0) {</td>
      </tr>
      <tr>
        <td id="file--L3352" class="blob-num js-line-number" data-line-number="3352"></td>
        <td id="file--LC3352" class="blob-code blob-code-inner js-file-line">        return ret;</td>
      </tr>
      <tr>
        <td id="file--L3353" class="blob-num js-line-number" data-line-number="3353"></td>
        <td id="file--LC3353" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3354" class="blob-num js-line-number" data-line-number="3354"></td>
        <td id="file--LC3354" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3355" class="blob-num js-line-number" data-line-number="3355"></td>
        <td id="file--LC3355" class="blob-code blob-code-inner js-file-line">    ret = MAX_NUM;</td>
      </tr>
      <tr>
        <td id="file--L3356" class="blob-num js-line-number" data-line-number="3356"></td>
        <td id="file--LC3356" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3357" class="blob-num js-line-number" data-line-number="3357"></td>
        <td id="file--LC3357" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; num; i++) {</td>
      </tr>
      <tr>
        <td id="file--L3358" class="blob-num js-line-number" data-line-number="3358"></td>
        <td id="file--LC3358" class="blob-code blob-code-inner js-file-line">        // 방문했으면 패스</td>
      </tr>
      <tr>
        <td id="file--L3359" class="blob-num js-line-number" data-line-number="3359"></td>
        <td id="file--LC3359" class="blob-code blob-code-inner js-file-line">        if (visited &amp; (1 &lt;&lt; i))</td>
      </tr>
      <tr>
        <td id="file--L3360" class="blob-num js-line-number" data-line-number="3360"></td>
        <td id="file--LC3360" class="blob-code blob-code-inner js-file-line">            continue;</td>
      </tr>
      <tr>
        <td id="file--L3361" class="blob-num js-line-number" data-line-number="3361"></td>
        <td id="file--LC3361" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3362" class="blob-num js-line-number" data-line-number="3362"></td>
        <td id="file--LC3362" class="blob-code blob-code-inner js-file-line">        // 갈 수 없는 길이라면 패스</td>
      </tr>
      <tr>
        <td id="file--L3363" class="blob-num js-line-number" data-line-number="3363"></td>
        <td id="file--LC3363" class="blob-code blob-code-inner js-file-line">        if (city[cur][i] == 0)</td>
      </tr>
      <tr>
        <td id="file--L3364" class="blob-num js-line-number" data-line-number="3364"></td>
        <td id="file--LC3364" class="blob-code blob-code-inner js-file-line">            continue;</td>
      </tr>
      <tr>
        <td id="file--L3365" class="blob-num js-line-number" data-line-number="3365"></td>
        <td id="file--LC3365" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3366" class="blob-num js-line-number" data-line-number="3366"></td>
        <td id="file--LC3366" class="blob-code blob-code-inner js-file-line">        ret = min(ret, tsp(i, visited | (1 &lt;&lt; i)) + city[cur][i]);</td>
      </tr>
      <tr>
        <td id="file--L3367" class="blob-num js-line-number" data-line-number="3367"></td>
        <td id="file--LC3367" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3368" class="blob-num js-line-number" data-line-number="3368"></td>
        <td id="file--LC3368" class="blob-code blob-code-inner js-file-line">    return ret;</td>
      </tr>
      <tr>
        <td id="file--L3369" class="blob-num js-line-number" data-line-number="3369"></td>
        <td id="file--LC3369" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3370" class="blob-num js-line-number" data-line-number="3370"></td>
        <td id="file--LC3370" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3371" class="blob-num js-line-number" data-line-number="3371"></td>
        <td id="file--LC3371" class="blob-code blob-code-inner js-file-line">int main()</td>
      </tr>
      <tr>
        <td id="file--L3372" class="blob-num js-line-number" data-line-number="3372"></td>
        <td id="file--LC3372" class="blob-code blob-code-inner js-file-line">{</td>
      </tr>
      <tr>
        <td id="file--L3373" class="blob-num js-line-number" data-line-number="3373"></td>
        <td id="file--LC3373" class="blob-code blob-code-inner js-file-line">    cin &gt;&gt; num;</td>
      </tr>
      <tr>
        <td id="file--L3374" class="blob-num js-line-number" data-line-number="3374"></td>
        <td id="file--LC3374" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3375" class="blob-num js-line-number" data-line-number="3375"></td>
        <td id="file--LC3375" class="blob-code blob-code-inner js-file-line">    for (int i = 0; i &lt; num; i++) {</td>
      </tr>
      <tr>
        <td id="file--L3376" class="blob-num js-line-number" data-line-number="3376"></td>
        <td id="file--LC3376" class="blob-code blob-code-inner js-file-line">        for (int j = 0; j &lt; num; j++) {</td>
      </tr>
      <tr>
        <td id="file--L3377" class="blob-num js-line-number" data-line-number="3377"></td>
        <td id="file--LC3377" class="blob-code blob-code-inner js-file-line">            cin &gt;&gt; city[i][j];</td>
      </tr>
      <tr>
        <td id="file--L3378" class="blob-num js-line-number" data-line-number="3378"></td>
        <td id="file--LC3378" class="blob-code blob-code-inner js-file-line">        }</td>
      </tr>
      <tr>
        <td id="file--L3379" class="blob-num js-line-number" data-line-number="3379"></td>
        <td id="file--LC3379" class="blob-code blob-code-inner js-file-line">    }</td>
      </tr>
      <tr>
        <td id="file--L3380" class="blob-num js-line-number" data-line-number="3380"></td>
        <td id="file--LC3380" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3381" class="blob-num js-line-number" data-line-number="3381"></td>
        <td id="file--LC3381" class="blob-code blob-code-inner js-file-line">    cout &lt;&lt; tsp(0, 1);</td>
      </tr>
      <tr>
        <td id="file--L3382" class="blob-num js-line-number" data-line-number="3382"></td>
        <td id="file--LC3382" class="blob-code blob-code-inner js-file-line"> </td>
      </tr>
      <tr>
        <td id="file--L3383" class="blob-num js-line-number" data-line-number="3383"></td>
        <td id="file--LC3383" class="blob-code blob-code-inner js-file-line">    return 0;</td>
      </tr>
      <tr>
        <td id="file--L3384" class="blob-num js-line-number" data-line-number="3384"></td>
        <td id="file--LC3384" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3385" class="blob-num js-line-number" data-line-number="3385"></td>
        <td id="file--LC3385" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3386" class="blob-num js-line-number" data-line-number="3386"></td>
        <td id="file--LC3386" class="blob-code blob-code-inner js-file-line">출처: http://moohyo97.tistory.com/entry/알고리즘-외판원-문제-해설 [물음표 공작소]</td>
      </tr>
      <tr>
        <td id="file--L3387" class="blob-num js-line-number" data-line-number="3387"></td>
        <td id="file--LC3387" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3388" class="blob-num js-line-number" data-line-number="3388"></td>
        <td id="file--LC3388" class="blob-code blob-code-inner js-file-line">■ 메모이제이션(memoization)</td>
      </tr>
      <tr>
        <td id="file--L3389" class="blob-num js-line-number" data-line-number="3389"></td>
        <td id="file--LC3389" class="blob-code blob-code-inner js-file-line">컴퓨터 프로그램이 동일한 계산을 반복해야 할 때, 이전에 계산한 값을 메모리에 저장함으로써</td>
      </tr>
      <tr>
        <td id="file--L3390" class="blob-num js-line-number" data-line-number="3390"></td>
        <td id="file--LC3390" class="blob-code blob-code-inner js-file-line">동일한 계산의 반복 수행을 제거하여 프로그램 실행 속도를 빠르게 하는 기술이다.</td>
      </tr>
      <tr>
        <td id="file--L3391" class="blob-num js-line-number" data-line-number="3391"></td>
        <td id="file--LC3391" class="blob-code blob-code-inner js-file-line">동적 계획법의 핵심이 되는 기술이다.</td>
      </tr>
      <tr>
        <td id="file--L3392" class="blob-num js-line-number" data-line-number="3392"></td>
        <td id="file--LC3392" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3393" class="blob-num js-line-number" data-line-number="3393"></td>
        <td id="file--LC3393" class="blob-code blob-code-inner js-file-line">■ 최단거리 3대 플로이드워셜,벨만포드 알고리즘</td>
      </tr>
      <tr>
        <td id="file--L3394" class="blob-num js-line-number" data-line-number="3394"></td>
        <td id="file--LC3394" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3395" class="blob-num js-line-number" data-line-number="3395"></td>
        <td id="file--LC3395" class="blob-code blob-code-inner js-file-line">■ 문자열 4대 아호코라식, suffix array</td>
      </tr>
      <tr>
        <td id="file--L3396" class="blob-num js-line-number" data-line-number="3396"></td>
        <td id="file--LC3396" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3397" class="blob-num js-line-number" data-line-number="3397"></td>
        <td id="file--LC3397" class="blob-code blob-code-inner js-file-line">■ Best First Search(최선 우선 탐색), 레드블랙트리</td>
      </tr>
      <tr>
        <td id="file--L3398" class="blob-num js-line-number" data-line-number="3398"></td>
        <td id="file--LC3398" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3399" class="blob-num js-line-number" data-line-number="3399"></td>
        <td id="file--LC3399" class="blob-code blob-code-inner js-file-line">■ 라면공장 (Heap 문제) </td>
      </tr>
      <tr>
        <td id="file--L3400" class="blob-num js-line-number" data-line-number="3400"></td>
        <td id="file--LC3400" class="blob-code blob-code-inner js-file-line">알고리즘을 풀기전에 충분히 고민하지 않아 복잡하게 생각해 이상한 방향으로 흘러간 케이스였다.</td>
      </tr>
      <tr>
        <td id="file--L3401" class="blob-num js-line-number" data-line-number="3401"></td>
        <td id="file--LC3401" class="blob-code blob-code-inner js-file-line">케이스를 지워가며 문제를 풀려하는 방식을 지양해야겠다는 것도 피드백됬다.</td>
      </tr>
      <tr>
        <td id="file--L3402" class="blob-num js-line-number" data-line-number="3402"></td>
        <td id="file--LC3402" class="blob-code blob-code-inner js-file-line">그냥 단순히 최소의 경우이므로 stock==시간 보다 작은 supplies 공급량만 pq에 넣고 top 빼내고를 반복하면 되는 문제였다.</td>
      </tr>
      <tr>
        <td id="file--L3403" class="blob-num js-line-number" data-line-number="3403"></td>
        <td id="file--LC3403" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3404" class="blob-num js-line-number" data-line-number="3404"></td>
        <td id="file--LC3404" class="blob-code blob-code-inner js-file-line">■ 셀프 넘버 (Self Number)</td>
      </tr>
      <tr>
        <td id="file--L3405" class="blob-num js-line-number" data-line-number="3405"></td>
        <td id="file--LC3405" class="blob-code blob-code-inner js-file-line">인도 수학자 D.R Kaprekar</td>
      </tr>
      <tr>
        <td id="file--L3406" class="blob-num js-line-number" data-line-number="3406"></td>
        <td id="file--LC3406" class="blob-code blob-code-inner js-file-line">양의 정수 n에 대해서 d(n)을 n과 n의 각자리 수를 더하는 함수. d(75) = 75+7+5 = 87 이다.</td>
      </tr>
      <tr>
        <td id="file--L3407" class="blob-num js-line-number" data-line-number="3407"></td>
        <td id="file--LC3407" class="blob-code blob-code-inner js-file-line">n,d(n),d(d(n)) ... 무한 수열을 만들 수 있다. n을 d(n)의 생성자라고 하는데 생성자가 한 개보다 많은 경우도 있다. 101은 생성자가 2개 91, 100이 있다.</td>
      </tr>
      <tr>
        <td id="file--L3408" class="blob-num js-line-number" data-line-number="3408"></td>
        <td id="file--LC3408" class="blob-code blob-code-inner js-file-line">생성자가 없는 숫자를 셀프 넘버라고 한다.</td>
      </tr>
      <tr>
        <td id="file--L3409" class="blob-num js-line-number" data-line-number="3409"></td>
        <td id="file--LC3409" class="blob-code blob-code-inner js-file-line">100보다 작은 셀프 넘버는 총 13개 1,3,5,7,9,20,31,42,53,64,75,86,97</td>
      </tr>
      <tr>
        <td id="file--L3410" class="blob-num js-line-number" data-line-number="3410"></td>
        <td id="file--LC3410" class="blob-code blob-code-inner js-file-line">10000보다 작은 셀프 넘버를 찍어봐라</td>
      </tr>
      <tr>
        <td id="file--L3411" class="blob-num js-line-number" data-line-number="3411"></td>
        <td id="file--LC3411" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3412" class="blob-num js-line-number" data-line-number="3412"></td>
        <td id="file--LC3412" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3413" class="blob-num js-line-number" data-line-number="3413"></td>
        <td id="file--LC3413" class="blob-code blob-code-inner js-file-line">규칙 모르겠음.. </td>
      </tr>
      <tr>
        <td id="file--L3414" class="blob-num js-line-number" data-line-number="3414"></td>
        <td id="file--LC3414" class="blob-code blob-code-inner js-file-line">9 19 29 39 49 59 ... 의 d(n)을 구해서 +2 하는데 99 199 299..10번 마다 전에 (89, 189, 289..의 +2)한 걸로 대체 </td>
      </tr>
      <tr>
        <td id="file--L3415" class="blob-num js-line-number" data-line-number="3415"></td>
        <td id="file--LC3415" class="blob-code blob-code-inner js-file-line">1자리는 13579</td>
      </tr>
      <tr>
        <td id="file--L3416" class="blob-num js-line-number" data-line-number="3416"></td>
        <td id="file--LC3416" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3417" class="blob-num js-line-number" data-line-number="3417"></td>
        <td id="file--LC3417" class="blob-code blob-code-inner js-file-line">그냥 노가다..</td>
      </tr>
      <tr>
        <td id="file--L3418" class="blob-num js-line-number" data-line-number="3418"></td>
        <td id="file--LC3418" class="blob-code blob-code-inner js-file-line">#include &lt;iostream&gt;</td>
      </tr>
      <tr>
        <td id="file--L3419" class="blob-num js-line-number" data-line-number="3419"></td>
        <td id="file--LC3419" class="blob-code blob-code-inner js-file-line">#include &lt;vector&gt;</td>
      </tr>
      <tr>
        <td id="file--L3420" class="blob-num js-line-number" data-line-number="3420"></td>
        <td id="file--LC3420" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3421" class="blob-num js-line-number" data-line-number="3421"></td>
        <td id="file--LC3421" class="blob-code blob-code-inner js-file-line">using namespace std;</td>
      </tr>
      <tr>
        <td id="file--L3422" class="blob-num js-line-number" data-line-number="3422"></td>
        <td id="file--LC3422" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3423" class="blob-num js-line-number" data-line-number="3423"></td>
        <td id="file--LC3423" class="blob-code blob-code-inner js-file-line">vector&lt;bool&gt; selfNum(10100, true);</td>
      </tr>
      <tr>
        <td id="file--L3424" class="blob-num js-line-number" data-line-number="3424"></td>
        <td id="file--LC3424" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3425" class="blob-num js-line-number" data-line-number="3425"></td>
        <td id="file--LC3425" class="blob-code blob-code-inner js-file-line">int dN(int n) {</td>
      </tr>
      <tr>
        <td id="file--L3426" class="blob-num js-line-number" data-line-number="3426"></td>
        <td id="file--LC3426" class="blob-code blob-code-inner js-file-line">	int res = n;</td>
      </tr>
      <tr>
        <td id="file--L3427" class="blob-num js-line-number" data-line-number="3427"></td>
        <td id="file--LC3427" class="blob-code blob-code-inner js-file-line">	n*=10;</td>
      </tr>
      <tr>
        <td id="file--L3428" class="blob-num js-line-number" data-line-number="3428"></td>
        <td id="file--LC3428" class="blob-code blob-code-inner js-file-line">	do { res+=(n/=10)%10; } while(n&gt;0); </td>
      </tr>
      <tr>
        <td id="file--L3429" class="blob-num js-line-number" data-line-number="3429"></td>
        <td id="file--LC3429" class="blob-code blob-code-inner js-file-line">	</td>
      </tr>
      <tr>
        <td id="file--L3430" class="blob-num js-line-number" data-line-number="3430"></td>
        <td id="file--LC3430" class="blob-code blob-code-inner js-file-line">	return res;</td>
      </tr>
      <tr>
        <td id="file--L3431" class="blob-num js-line-number" data-line-number="3431"></td>
        <td id="file--LC3431" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3432" class="blob-num js-line-number" data-line-number="3432"></td>
        <td id="file--LC3432" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3433" class="blob-num js-line-number" data-line-number="3433"></td>
        <td id="file--LC3433" class="blob-code blob-code-inner js-file-line">int main() {</td>
      </tr>
      <tr>
        <td id="file--L3434" class="blob-num js-line-number" data-line-number="3434"></td>
        <td id="file--LC3434" class="blob-code blob-code-inner js-file-line">	for(int i=1; i&lt;=10000; i++) {</td>
      </tr>
      <tr>
        <td id="file--L3435" class="blob-num js-line-number" data-line-number="3435"></td>
        <td id="file--LC3435" class="blob-code blob-code-inner js-file-line">		selfNum[dN(i)]=false;</td>
      </tr>
      <tr>
        <td id="file--L3436" class="blob-num js-line-number" data-line-number="3436"></td>
        <td id="file--LC3436" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L3437" class="blob-num js-line-number" data-line-number="3437"></td>
        <td id="file--LC3437" class="blob-code blob-code-inner js-file-line">	</td>
      </tr>
      <tr>
        <td id="file--L3438" class="blob-num js-line-number" data-line-number="3438"></td>
        <td id="file--LC3438" class="blob-code blob-code-inner js-file-line">	for(int i=1; i&lt;=10000; i++) {</td>
      </tr>
      <tr>
        <td id="file--L3439" class="blob-num js-line-number" data-line-number="3439"></td>
        <td id="file--LC3439" class="blob-code blob-code-inner js-file-line">		if(selfNum[i]) cout&lt;&lt;i&lt;&lt;endl;</td>
      </tr>
      <tr>
        <td id="file--L3440" class="blob-num js-line-number" data-line-number="3440"></td>
        <td id="file--LC3440" class="blob-code blob-code-inner js-file-line">	}</td>
      </tr>
      <tr>
        <td id="file--L3441" class="blob-num js-line-number" data-line-number="3441"></td>
        <td id="file--LC3441" class="blob-code blob-code-inner js-file-line">	</td>
      </tr>
      <tr>
        <td id="file--L3442" class="blob-num js-line-number" data-line-number="3442"></td>
        <td id="file--LC3442" class="blob-code blob-code-inner js-file-line">	return 0;</td>
      </tr>
      <tr>
        <td id="file--L3443" class="blob-num js-line-number" data-line-number="3443"></td>
        <td id="file--LC3443" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
      <tr>
        <td id="file--L3444" class="blob-num js-line-number" data-line-number="3444"></td>
        <td id="file--LC3444" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3445" class="blob-num js-line-number" data-line-number="3445"></td>
        <td id="file--LC3445" class="blob-code blob-code-inner js-file-line">■ 마방진(Magic Square)</td>
      </tr>
      <tr>
        <td id="file--L3446" class="blob-num js-line-number" data-line-number="3446"></td>
        <td id="file--LC3446" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3447" class="blob-num js-line-number" data-line-number="3447"></td>
        <td id="file--LC3447" class="blob-code blob-code-inner js-file-line">n2개의 수를 가로, 세로, 대각선 방향의 수를 더하면 모두 같은 값이 나오도록 n × n 행렬에 배열한 것이다.</td>
      </tr>
      <tr>
        <td id="file--L3448" class="blob-num js-line-number" data-line-number="3448"></td>
        <td id="file--LC3448" class="blob-code blob-code-inner js-file-line">마법진(魔法陣), 낙서(洛書)라고도 한다.</td>
      </tr>
      <tr>
        <td id="file--L3449" class="blob-num js-line-number" data-line-number="3449"></td>
        <td id="file--LC3449" class="blob-code blob-code-inner js-file-line">합은 n(n^2 + 1) / 2 그 원리는 여기에 들어가는 숫자들의 평균을 가로, 혹은 세로 개수로 곱한 값이다.</td>
      </tr>
      <tr>
        <td id="file--L3450" class="blob-num js-line-number" data-line-number="3450"></td>
        <td id="file--LC3450" class="blob-code blob-code-inner js-file-line">1~n^2까지 합이 n^2(n^2+1)/2 이므로 여기서 한줄에 들어가는 수의 합은 n으로 나눠준  n(n^2 + 1) / 2 이 되는 것이다.</td>
      </tr>
      <tr>
        <td id="file--L3451" class="blob-num js-line-number" data-line-number="3451"></td>
        <td id="file--LC3451" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3452" class="blob-num js-line-number" data-line-number="3452"></td>
        <td id="file--LC3452" class="blob-code blob-code-inner js-file-line">①   1행 가운뎃 열에 숫자 1을 놓는다. 3 by 3이면 2열에, 5 by 5면 3열에.</td>
      </tr>
      <tr>
        <td id="file--L3453" class="blob-num js-line-number" data-line-number="3453"></td>
        <td id="file--LC3453" class="blob-code blob-code-inner js-file-line">②   해당 위치에서 한 칸 왼쪽으로(열 감소), 한 칸 위쪽으로(행 감소) 이동한다.</td>
      </tr>
      <tr>
        <td id="file--L3454" class="blob-num js-line-number" data-line-number="3454"></td>
        <td id="file--LC3454" class="blob-code blob-code-inner js-file-line">③   만약 해당 줄의 끝에 다다라서 더 이상 이동할 수 없을 때 그 줄의 반대쪽 끝으로 이동한다. (ex - 3행 1열일 경우 &gt;&gt; 2행 5열, 1행 2열일 경우 &gt;&gt; 5행 1열)</td>
      </tr>
      <tr>
        <td id="file--L3455" class="blob-num js-line-number" data-line-number="3455"></td>
        <td id="file--LC3455" class="blob-code blob-code-inner js-file-line">④   만약 이동한 위치에 이미 숫자가 놓여져 있다면, 그 자리에서 한 칸 아래로(행 증가) 이동한다.</td>
      </tr>
      <tr>
        <td id="file--L3456" class="blob-num js-line-number" data-line-number="3456"></td>
        <td id="file--LC3456" class="blob-code blob-code-inner js-file-line">⑤   이동한 위치에 2를 놓는다.</td>
      </tr>
      <tr>
        <td id="file--L3457" class="blob-num js-line-number" data-line-number="3457"></td>
        <td id="file--LC3457" class="blob-code blob-code-inner js-file-line">⑥   2~5의 과정을 계속 반복하여 25를 놓을 때까지 진행한다.</td>
      </tr>
      <tr>
        <td id="file--L3458" class="blob-num js-line-number" data-line-number="3458"></td>
        <td id="file--LC3458" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3459" class="blob-num js-line-number" data-line-number="3459"></td>
        <td id="file--LC3459" class="blob-code blob-code-inner js-file-line">1. 정사각형의 맨 아랫줄 가운데에 숫자 1 을 둔다.</td>
      </tr>
      <tr>
        <td id="file--L3460" class="blob-num js-line-number" data-line-number="3460"></td>
        <td id="file--LC3460" class="blob-code blob-code-inner js-file-line">2. 이전 숫자 위치에서 오른쪽 아래칸이 비어 있으면 다음 숫자를 채운다.</td>
      </tr>
      <tr>
        <td id="file--L3461" class="blob-num js-line-number" data-line-number="3461"></td>
        <td id="file--LC3461" class="blob-code blob-code-inner js-file-line">3. 이전 숫자 위치에서 오른쪽 아래칸이 채워져 있으면 이전 숫자의 위칸에 다음 숫자를 채운다.</td>
      </tr>
      <tr>
        <td id="file--L3462" class="blob-num js-line-number" data-line-number="3462"></td>
        <td id="file--LC3462" class="blob-code blob-code-inner js-file-line">4. 오른쪽 아래칸이 사각형의 영역 밖이면 다음의 규칙을 따른다.</td>
      </tr>
      <tr>
        <td id="file--L3463" class="blob-num js-line-number" data-line-number="3463"></td>
        <td id="file--LC3463" class="blob-code blob-code-inner js-file-line">4-1. 수평 및 수직으로 이동해서 마지막 칸이 비어 있으면 해당 칸에 숫자를 채운다.</td>
      </tr>
      <tr>
        <td id="file--L3464" class="blob-num js-line-number" data-line-number="3464"></td>
        <td id="file--LC3464" class="blob-code blob-code-inner js-file-line">4-2. 수평 및 수직으로 이동해도 칸이 없는 경우 이전의 숫자 위치 위쪽 칸에 다음 숫자를 채운다.</td>
      </tr>
      <tr>
        <td id="file--L3465" class="blob-num js-line-number" data-line-number="3465"></td>
        <td id="file--LC3465" class="blob-code blob-code-inner js-file-line">
</td>
      </tr>
      <tr>
        <td id="file--L3466" class="blob-num js-line-number" data-line-number="3466"></td>
        <td id="file--LC3466" class="blob-code blob-code-inner js-file-line">*** 홀수 요거임 </td>
      </tr>
      <tr>
        <td id="file--L3467" class="blob-num js-line-number" data-line-number="3467"></td>
        <td id="file--LC3467" class="blob-code blob-code-inner js-file-line">가운데 테두리 변에 1을 시작 숫자를 둔다. 1행 가운데라면 왼쪽 위나 오른 쪽위 처럼 (변에서 나가게)</td>
      </tr>
      <tr>
        <td id="file--L3468" class="blob-num js-line-number" data-line-number="3468"></td>
        <td id="file--LC3468" class="blob-code blob-code-inner js-file-line">대각선으로 이동 만약 다음 것이 행이 나가면 반대 행 지점으로, 열이 나가면 반대열 가다가 </td>
      </tr>
      <tr>
        <td id="file--L3469" class="blob-num js-line-number" data-line-number="3469"></td>
        <td id="file--LC3469" class="blob-code blob-code-inner js-file-line">이미 체워진 곳이면 진행방향의 반대쪽(아래)에 체우고 다시 시작</td>
      </tr>
      <tr>
        <td id="file--L3470" class="blob-num js-line-number" data-line-number="3470"></td>
        <td id="file--LC3470" class="blob-code blob-code-inner js-file-line">만약 열과 행이 모두 나가버리면 체워진것 처럼 진행방향 반대쪽(아래)에 체우고 다시시작.</td>
      </tr>
</table>


  </div>

  </div>
</div>


    <a name="comments"></a>
    <div class="discussion-timeline width-full js-quote-selection-container float-none" data-quote-markdown=".js-comment-body">
      <div class="js-discussion js-socket-channel" data-channel="marked-as-read:gist:87792707">
        
  <div class="timeline-comment-wrapper js-comment-container">
      

<div class="avatar-parent-child timeline-comment-avatar">
    <a class="d-inline-block" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie"><img class="avatar rounded-1" height="44" width="44" alt="@Curookie" src="https://avatars2.githubusercontent.com/u/20276670?s=180&amp;v=4" /></a>

</div>


    
<div class="timeline-comment-group js-minimizable-comment-group js-targetable-comment" id="gistcomment-2696139">
    <div class="minimized-comment d-none ">
      

  

<details class="Details-element details-reset border rounded-1 bg-white"
       data-body-version="b1826d5ea69ae7e5a81ea8e6fcce73e5">
    <summary class="bg-gray border-bottom-0 py-0 px-2">
      <div class="d-flex flex-justify-between flex-items-center">
        <h3 class="timeline-comment-header-text f5 text-gray text-normal text-italic">
              This comment has been minimized.

        </h3>
        <div class="text-gray text-small">
          <a rel="nofollow" class="link-gray" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;minimized comment&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="b3773f3cc96ed032b98ef9a9d523dc9d64b9d9eae0ff19467669c5a6ee188649" href="/login?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">Sign in to view</a>
        </div>
      </div>
    </summary>
</details>


    </div>
  <div class="unminimized-comment comment previewable-edit js-comment js-task-list-container timeline-comment  "
       data-body-version="b1826d5ea69ae7e5a81ea8e6fcce73e5"
       data-unfurl-hide-url="/content_reference_attachments/hide"
       data-unfurl-authenticity-token="mEg45EYrzhMSyUYKlrE9IJvKpXY38k9IqwukGLWwI2sQ2JtxSROgxssagfIG/N4q7a1N7t+vVp5iWw/GMSpBFA==">

    
<div class="timeline-comment-header clearfix">
  <div class="timeline-comment-actions">
    

















<details class="details-overlay details-reset position-relative d-inline-block ">
  <summary class="btn-link timeline-comment-action">
    <svg aria-label="Show options" class="octicon octicon-kebab-horizontal" viewBox="0 0 13 16" version="1.1" width="13" height="16" role="img"><path fill-rule="evenodd" d="M1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM13 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg>
  </summary>
  <details-menu class="dropdown-menu dropdown-menu-sw show-more-popover text-gray-dark anim-scale-in" style="width:185px">
        <clipboard-copy
    class="dropdown-item btn-link"
    for="gistcomment-2696139-permalink"
    role="menuitem"
    
    >
    Copy link
  </clipboard-copy>

        <button
    type="button"
    class="dropdown-item btn-link d-none js-comment-quote-reply"
    role="menuitem">
    Quote reply
  </button>

      
  </details-menu>
</details>

  </div>

    
  <span class="timeline-comment-label text-bold tooltipped tooltipped-multiline tooltipped-s" aria-label="This user is the owner of the gist.">
    Owner
  </span>


  <span
  class="timeline-comment-label tooltipped tooltipped-multiline tooltipped-s"
  aria-label="This user is the author of this gist.">
  Author
</span>



  <h3 class="timeline-comment-header-text f5 text-normal">


    <strong class="css-truncate expandable">
      

  <a class="author text-inherit css-truncate-target" show_full_name="false" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie">Curookie</a>
  

    </strong>

    commented


      <a href="#gistcomment-2696139" id="gistcomment-2696139-permalink" class="timestamp js-timestamp"><relative-time datetime="2018-09-03T11:27:43Z">Sep 3, 2018</relative-time></a>


    <span class="js-comment-edit-history">
        
  <span class="d-inline-block text-gray-light">&#8226;</span>

  <details class="details-overlay details-reset d-inline-block dropdown">
    <summary class="btn-link no-underline text-gray js-notice">
      <div class="position-relative">
        <span>
            edited
        </span>
        <svg height="11" class="octicon octicon-triangle-down v-align-middle" viewBox="0 0 12 16" version="1.1" width="8" aria-hidden="true"><path fill-rule="evenodd" d="M0 5l6 6 6-6H0z"/></svg>
      </div>
    </summary>
    <details-menu class="anim-scale-in dropdown-menu dropdown-menu-se py-0" style="width:352px" src="/_render_node/MDExOkdpc3RDb21tZW50NTQwODMyNGQ4NzZhNTEzODQ1NjRmYWMxZjE4NjkzOGU6MjY5NjEzOQ==/comments/comment_edit_history_log" preload>
      <include-fragment class="octocat-spinner my-3" aria-label="Loading"></include-fragment>
    </details-menu>
  </details>

    </span>
  </h3>
</div>


    <div class="edit-comment-hide">

      
<task-lists disabled sortable>
<table class="d-block">
  <tbody class="d-block">
    <tr class="d-block">
      <td class="d-block comment-body markdown-body  js-comment-body">
          <h1>C++</h1>
<h2>0. 헤더파일</h2>
<p><code>#include &lt;bits/stdc++.h&gt;</code><br>
모든 표준 라이브러리가 포함된 헤더입니다. 프로그래밍 대회에서 위 해더를 사용하는 것은 좋은 아이디어 입니다. 문제를 풀 때 마다<br>
include  등등을 작성하는 반복적인 일을 줄여서 시간안배를 도와줍니다.<br>
단점</p>
<ul>
<li>bits/stdc++.h 헤더는 GNU C++ 라이브러리의 표준 헤더가 아니기 때문에, GCC가 아닌 다른 컴파일러로 빌드를 하려고 한다면 실패합니다.</li>
<li>쓸대없는 파일들을 추가시켜서 컴파일 시간이 늘어납니다.</li>
<li>표준 C++이 아니기 때문에 이식성이 있지도 않고, 컴파일러 종속적입니다.</li>
</ul>
<pre><code>// C++ includes used for precompiling -*- C++ -*-

// Copyright (C) 2003-2015 Free Software Foundation, Inc.
//
// This file is part of the GNU ISO C++ Library.  This library is free
// software; you can redistribute it and/or modify it under the
// terms of the GNU General Public License as published by the
// Free Software Foundation; either version 3, or (at your option)
// any later version.

// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// Under Section 7 of GPL version 3, you are granted additional
// permissions described in the GCC Runtime Library Exception, version
// 3.1, as published by the Free Software Foundation.

// You should have received a copy of the GNU General Public License and
// a copy of the GCC Runtime Library Exception along with this program;
// see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
// &lt;http://www.gnu.org/licenses/&gt;.

/** @file stdc++.h
 *  This is an implementation file for a precompiled header.
 */

// 17.4.1.2 Headers

// C
#ifndef _GLIBCXX_NO_ASSERT
#include &lt;cassert&gt;
#endif
#include &lt;cctype&gt;
#include &lt;cerrno&gt;
#include &lt;cfloat&gt;
#include &lt;ciso646&gt;
#include &lt;climits&gt;
#include &lt;clocale&gt;
#include &lt;cmath&gt;
#include &lt;csetjmp&gt;
#include &lt;csignal&gt;
#include &lt;cstdarg&gt;
#include &lt;cstddef&gt;
#include &lt;cstdio&gt;
#include &lt;cstdlib&gt;
#include &lt;cstring&gt;
#include &lt;ctime&gt;

#if __cplusplus &gt;= 201103L
#include &lt;ccomplex&gt;
#include &lt;cfenv&gt;
#include &lt;cinttypes&gt;
#include &lt;cstdalign&gt;
#include &lt;cstdbool&gt;
#include &lt;cstdint&gt;
#include &lt;ctgmath&gt;
#include &lt;cwchar&gt;
#include &lt;cwctype&gt;
#endif

// C++
#include &lt;algorithm&gt;
#include &lt;bitset&gt;
#include &lt;complex&gt;
#include &lt;deque&gt;
#include &lt;exception&gt;
#include &lt;fstream&gt;
#include &lt;functional&gt;
#include &lt;iomanip&gt;
#include &lt;ios&gt;
#include &lt;iosfwd&gt;
#include &lt;iostream&gt;
#include &lt;istream&gt;
#include &lt;iterator&gt;
#include &lt;limits&gt;
#include &lt;list&gt;
#include &lt;locale&gt;
#include &lt;map&gt;
#include &lt;memory&gt;
#include &lt;new&gt;
#include &lt;numeric&gt;
#include &lt;ostream&gt;
#include &lt;queue&gt;
#include &lt;set&gt;
#include &lt;sstream&gt;
#include &lt;stack&gt;
#include &lt;stdexcept&gt;
#include &lt;streambuf&gt;
#include &lt;string&gt;
#include &lt;typeinfo&gt;
#include &lt;utility&gt;
#include &lt;valarray&gt;
#include &lt;vector&gt;

#if __cplusplus &gt;= 201103L
#include &lt;array&gt;
#include &lt;atomic&gt;
#include &lt;chrono&gt;
#include &lt;condition_variable&gt;
#include &lt;forward_list&gt;
#include &lt;future&gt;
#include &lt;initializer_list&gt;
#include &lt;mutex&gt;
#include &lt;random&gt;
#include &lt;ratio&gt;
#include &lt;regex&gt;
#include &lt;scoped_allocator&gt;
#include &lt;system_error&gt;
#include &lt;thread&gt;
#include &lt;tuple&gt;
#include &lt;typeindex&gt;
#include &lt;type_traits&gt;
#include &lt;unordered_map&gt;
#include &lt;unordered_set&gt;
#endif
</code></pre>
<p><code>for(auto i = s.begin();i!=s.end();i++){</code> 포문 iterator형태로 속도를 올리자.</p>
<h2>1. 문자열 (#include string&gt; 은 당연하니까 뺀다.)</h2>
<p>문자열에서 문자열 추출</p>
<pre><code>string str.substr(시작인덱스,갯수);
</code></pre>
<p>문자열 찾기 str.find : str에서 특정 문자열을 찾고, 그 시작위치를 반환<br>
( 문자 ) : 인덱스 0부터 해당 문자를 찾고, 시작위치를 반환한다.<br>
( 찾는문자열 ) : 인덱스 0부터 해당 문자열을 찾고, 그 시작위치를 반환한다.<br>
( 찾는문자열, 시작위치 ) : 시작위치부터 문자열을 찾고, 시작위치를 반환한다.<br>
string::npos // 찾는 문자열이 없는 경우에는 string::npos를 반환한다.</p>
<pre><code>string s1 = "abcd" ;  
string s2 = "b" ;   
int location = s1.find( s2 ) ;  
location = s1.find( s2, x ) ;
</code></pre>
<p>문자/문자열 찾기 (응용) 특정 문자열을 찾아서 *로 바꾼다음 *의 갯수로 특정 문자열의 수를 구한 예<br>
문자나 문자열을 size_t str.find(찾을문자/문자열, 찾는 위치(int)) 로 찾을 수 있다.</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;string&gt;
 
using namespace std;
 
string str;
int main() 
{
    cin &gt;&gt; str;
    int pos = 0;
 
    string croatia[8] = { "c=","c-","dz=","d-","lj","nj","s=","z=" };
    string tmp;
    string star = "*";
 
    for (int i = 0; i &lt; 8; i++) 
    {
        tmp = croatia[i];
 
        if (str.find(tmp) != string::npos) 
        {
            while ((pos = str.find(tmp)) != string::npos) 
            {
                str.erase(pos, tmp.length());
                str.insert(pos, star);
            }
        }
    }
    cout &lt;&lt; str.size() &lt;&lt; endl;
    return 0;
}
</code></pre>
<p>대/소 문자 처리</p>
<pre><code>#include &lt;algorithm&gt; // transform() 함수용

std::string str = "Hello World";
std::transform(str.begin(), str.end(), str.begin(), ::toupper); 
//문자열 전체 대문자로 소문자는 마지막 인자를 ::tolower *주의: 뒤에 ()안붙이고 앞에 :: 붙이기

char ch = toupper(a);
char ch = tolower(a);
//char 한 글자 처리 #include &lt;algorithm&gt; 필요없다.
</code></pre>
<p>문자열 치환</p>
<pre><code>std::string ReplaceAll(std::string &amp;str, const std::string&amp; from, const std::string&amp; to){
    size_t start_pos = 0; //string처음부터 검사
    while((start_pos = str.find(from, start_pos)) != std::string::npos)  //from을 찾을 수 없을 때까지
    {
        str.replace(start_pos, from.length(), to);
        start_pos += to.length(); // 중복검사를 피하고 from.length() &gt; to.length()인 경우를 위해서
    }
    return str;
}

...

std::cout &lt;&lt; ReplaceAll(string("Number Of Beans"), std::string(" "), std::string("_")) &lt;&lt; std::endl;
std::cout &lt;&lt; ReplaceAll(string("ghghjghugtghty"), std::string("gh"), std::string("X")) &lt;&lt; std::endl;
std::cout &lt;&lt; ReplaceAll(string("ghghjghugtghty"), std::string("gh"), std::string("h")) &lt;&lt; std::endl;
</code></pre>
<p>문자열 제거</p>
<pre><code> str.erase (std::remove(str.begin(), str.end(), chars[i]), str.end());
</code></pre>
<p>토큰으로 문자열 나누기</p>
<pre><code>#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;sstream&gt; //istringstream 용
 
std::string myText("some-text-to-tokenize");
std::istringstream iss(myText);  // iss를 string을 넣어 생성자로 생성한거구
//iss.str(myText); 이렇게하면 생성자 아닐 때 반복문에서 string을 넣어주는 방법, 단, 저거하기전에 iss.clear(); 먼저 해주기
//char ch = iss.get(); 하면 한개의 문자를 꺼내올 수 있다. 
//여기서 iss.unget(); 하면 가져온걸 다시 넣는다. 조건 검사하고 아니면 다시 넣을 때 필요.
std::string token;
while(getline(iss, token, '-')) // "abc-def" 일 때 getline(iss, token, '-'); 을 하면 나눠지고 token으로 abc만 들어감 iss엔 "-def"가 남아있다.
{
      std::cout &lt;&lt; token &lt;&lt; std::endl;
}
</code></pre>
<p>문자를 가지고 반복해 문자열 생성 [특이한 방법, 참고]</p>
<pre><code> *(new string(n, '*')); //n=5 "*****"
</code></pre>
<p>string-&gt;int  /  stoi() 이 (내장 함수)가 (+ - 부호)까지 처리한다!!! *다른 변환도 비슷함 atoi는 문자-&gt;숫자 itos 숫자를 스트링</p>
<pre><code>int i = stoi(str);
</code></pre>
<p>숫자 자료형(int, double..)-&gt; string / to_string(값)</p>
<pre><code>string str = to_string(i);
</code></pre>
<h2>2. 자료 구조</h2>
<h3>Vector 가장 기본적인 동적 배열같은 스택(?) 리스트(??)</h3>
<p>백터를 스택처럼 사용가능 top() -&gt; back(), push() -&gt; push_back(), pop() -&gt; pop_back()</p>
<p>생성, 초기화, 복사</p>
<pre><code>vector.resize(n); n범위 생성
vector&lt;int&gt;(n, 0); n범위 0으로 생성해 체우기
vector&lt;int&gt;v, c; 
// c에 내용을 넣었다고 가정
v = c; // 개꿀팁 ㅎㅎ 오버라이딩 연산자 되어있어서 그냥 백터끼리 '= '연산자로 복사 붙여넣기 할 수 있음.
</code></pre>
<p>백터의 특정 범위에 같은 값 넣기 algorithm 필요</p>
<pre><code>fill (v.begin(), v.begin()+4, 1); // 1번째 위치부터 4번째 위치까지 1로 할당
fill (v.begin()+4, v.end(), 2); // 5번째 위치부터 끝까지 2로 할당
</code></pre>
<p>백터의 요소의 합을 구하는 함수</p>
<pre><code>#include &lt;numeric&gt;
sum_of_elems = accumulate(vector.begin(), vector.end(), 0); //int형
sum_of_elems = accumulate(vector.begin(), vector.end(), 0L); //long형 반환
</code></pre>
<p>백터에서 최고값/ 최솟값 요소 값 구하기</p>
<pre><code>#include &lt;algorithm&gt;
*max_element(works.begin(), works.end()) -= 1;
*min_element(v.begin(), v.end())
</code></pre>
<p>벡터에 특정위치(인덱스)에 값을 삽입하기</p>
<pre><code>v.insert(v.begin()+1, 3, 4); //2번째 위치(1번 뒤에)에 3개의 4값을 삽입합니다. (뒤엣놈들은 뒤로 밀림)
v.insert(v.begin()+1,sub.begin(),sub.end()); //2번째 위치(1번 뒤에)에 sub백터의 begin()과 end()까지 요소들을 삽입합니다.
q=v.insert(v.begin()+1, 3); //2번째 위치(1번 뒤에)에 3의 값을 삽입합니다. 삽입한 곳의 iterator를 반환합니다.

</code></pre>
<p>백터의 중복된 요소 제거하기 ( -&gt;다른방법으로 set에 넣어 중복방지 시키는 방법이 있음)</p>
<pre><code>vector&lt;int&gt; v({1,1,1,1,2,2,2,3,3,4,4,5,6,7,7,7,7,8,8,9,9,9});
sort(v.begin(), v.end());
v.erase(unique(v.begin(), v.end()), v.end());
</code></pre>
<p>백터 요소 정렬하는 함수</p>
<pre><code>#include &lt;algorithm&gt;          // sort,reverse 사용 위해 필요
#include &lt;functional&gt;         // greater 사용 위해 필요

sort(v.begin(), v.end()); 오름차순 정렬 해버림
sort(v.rbegin(), v.rend()); 내림차순 정렬
sort(v.begin(), v.end(), std::greater&lt;int&gt;()); 내림차순 정렬
reverse(v.begin(),v.end()); 오름차순 했다가 이 함수 쓰면 내림차순됨 (이건, Vector가지구 큐 흉내낼 때 쓰면 좋음)
</code></pre>
<p>2차 백터일 경우 요소 동적 추가하는법</p>
<pre><code>vector&lt;vector&lt;int&gt;&gt; a;
a.push_back(vector&lt;int&gt;()); //동적추가로 a[0]을 만듬.
a[0].push_back(14); //이런식으로 동적추가 a[0][0] 만들고 거기에 14를 넣을 수 있다.
</code></pre>
<p>백터 요소 삭제 (1개 이상일 경우 1에 개수 입력)</p>
<pre><code>vector.erase(vector.begin(), vector.begin()+1[개수]); // [0]~[n]
vector.erase(vector.begin()); // 이러면 그냥 맨처음 한개 삭제될거임 [0]
vector.erase(--vector.end()); // 마지막 요소 1개 삭제할때
</code></pre>
<p>백터 요소를 일부만 새로운 백터로 만들기 (시작, 끝 인덱스 적힌곳에 숫자 적으면 됨)</p>
<pre><code>pastedVec.assign(copiedVec.begin()+[시작 인덱스], copiedVec.begin()+[끝 인덱스 +1]) 
//반복자는 (b,e) 일 경우 (0, 1) -&gt; 이래야 0인덱스를 가리킨다. (0, 0) no no!
</code></pre>
<h3>T[ 10] 정적 배열 / T* p = new T[ n]동적 배열</h3>
<p>배열 첫번째 항목만 특정 숫자로 초기화 방법</p>
<pre><code>int count1[676] = { 1, }; // index [0]만 1로 초기화
</code></pre>
<p>배열 전부 0으로 효율적이게 채우기 1이상의 값 쓰면 쓰레기값 들어감!!<br>
(int형이지만 내부에서는 unsigned char(1 byte)로 변환되어서 저장된다.)</p>
<pre><code>int r[501][501];
memset(r, 0, sizeof r); // 0으로 초기화
</code></pre>
<p>1차배열 특정 숫자(-1)로 100개 채우기<br>
2차배열 (3)으로 다 채우기</p>
<pre><code>fill_n(array, 100, -1);

char data[26][80]; //2차 배열
fill_n(&amp;data[0][0], 26*80, 3);  // or fill_n(*data, 26*80, 3);
</code></pre>
<h3>pair&lt;T, T&gt;</h3>
<p>해더파일 #include utility&gt;에 있지만<br>
algorithm&gt;, vector&gt;와 같은 헤더파일에서 이미 include하고 있기에 이게 있다면 따로 utility를 include해 줄 필요는 없다.<br>
생성할 때 make_pair(i, str)나 pair int,string&gt;(i, str) 이렇게 사용할 수 있다.  (백터와 엮기 좋음 K, V 흉내내기도)<br>
p.first : p의 첫번째 인자를 반환해 줍니다.<br>
p.second : p의 두번째 인자를 반환해 줍니다.<br>
sort() 알고리즘에 의해 정렬이 가능한 장점 때문에 사실 백터랑 엮어서 자주 씀.</p>
<pre><code>// ~#include&lt;utility&gt;~ vector, algorithm이 있으므로 NO필요! 
#include&lt;string&gt;
#include&lt;vector&gt;
#include&lt;algorithm&gt;
using namespace std;
 
int main(void){
    vector&lt;pair&lt;int, string&gt; &gt; v;

    v.push_back(make_pair(1, "Tiger JK"));  // 개인적으로 이 방법이 더 편함
    v.push_back(pair&lt;int, string&gt;(3, "Dok2"));    
    v.push_back(pair&lt;int, string&gt;(6, "DMask"));    
    v.push_back(pair&lt;int, string&gt;(1, "Tiger JK"));    
    
</code></pre>
<h3>set, map&lt;K, V&gt;, multiset, multimap&lt;K, V&gt;, unordered_set, unodered_map&lt;K, V&gt;</h3>
<pre><code>map&lt;string,int&gt; m;
m[key] = 1;              //맵은 m[key] = value 이런식으로 넣을수 있다. m[key] ++; 이런식으로도 가능
for(auto&amp; x: m) answer *= (x.second + 1);             //auto&amp; x: m 이런식으로 요소를 쉽게 사용할 수 있다. x.first -&gt;key,  x.second -&gt; value 
</code></pre>
<p>map set 기본적으로 key,value값에 따른 오름차순인데 이런식으로 바꿀 수 있다.</p>
<pre><code>map&lt;int, string, greater&lt;int&gt; &gt; m3;  키값 내림차순
map&lt;int, string, string.less&lt;int&gt;&gt;    -&gt; map의 오름차순 (그냥 map&lt;key, value&gt; 사용시 오름차순)
map&lt;int, string, string.greater&lt;int&gt;&gt;  -&gt; map의 키값 내림차순
</code></pre>
<p>set,map,multiset,multimap 에서 마지막 요소(가장 큰 값) 참조하는 법 (지우는 법)</p>
<pre><code>minheap.erase( std::prev(minheap.end()));
minheap.erase(--minheap.end());
</code></pre>
<p>unique한 집합을 순서대로 출력해야 할 필요성이 있다면 그냥 set을 사용하고, unique 함 만을 체크해야 한다면 효율 좋은 unordered_set</p>
<pre><code>#include &lt;unordered_set&gt;
unordered_set&lt;string&gt; mySet;
</code></pre>
<p>multimap, multiset의 경우 count로 원소의 개수를 알수 있다.</p>
<pre><code>s.count(k); //0,1 set,map 일 경우
</code></pre>
<h3>Priority Queue와 Heap</h3>
<p>priority queue는 queue의 일종으로, 기본적으로 삽입(push), 꺼내기(pop) 연산을 가집니다.<br>
pop 연산을 할 때, 현재 자료구조에 삽입된 원소들 중 우선순위가 가장 높은 원소를 꺼내는 연산을 하는 것이 priority queue 입니다.</p>
<p>heap은 priority queue의 한 종류로서, push와 pop이 O(log n) 시간에 빠르게 처리되는 구조입니다.<br>
min-heap은 pop 연산 수행 시 원소들 중 최소값을 꺼냅니다. 반면 max-heap은 pop 연산 수행 시 최대값을 꺼냅니다.</p>
<p>priority_queue 일 때<br>
min-heap은 priority_queue&lt;int, vecter,greater&gt; pq 이런식으로 선언하면 됨. (&lt;T,vector,greater&gt;)</p>
<pre><code>// 오름차순 정렬 ****기존 순서와 반대로 해야한다!! 내림차순 오름차순 역순이다.
struct cmp{
    bool operator()(Custom t, Custom u){
        return t.value &gt; u.value;
    }
};



int main(){

	// priority_queue
	priority_queue&lt; Custom, vector&lt;Custom&gt;,  cmp &gt; pq;
</code></pre>
<p>max-heap을 min heap 처럼 사용하는 특이한 방법으로<br>
push할때 -를 붙여주어 순서를 역으로 만들고 -pq.top() 탑을쓸때도 -붙여주면 원래가장 작은 값이 나옴.</p>
<p>C++ STL의 priority_queue 자료형을 통해 min-heap 혹은 max-heap 중 사용자가 원하는 것을 쉽게 구현할 수 있습니다.</p>
<p>STL의 Queue 컨테이너 경우 다른 컨테이너와 다르게 clear 멤버 변수가 없습니다. 그래서 이를 초기화 해주려고 하면, 아래와 같이 일일히 루프를 돌며 pop을 해주거나하죠</p>
<pre><code>while (!mQueue.empty())
{
    mQueue.pop();
}
</code></pre>
<pre><code>void ClearQueue(std::queue&lt;int&gt; &amp;someQueue)
{
    std::queue&lt;int&gt; empty;
    std::swap(someQueue, empty);
}
</code></pre>
<p>algorithm의 swap을 이용해 빈 큐와 바꿔치기 하는 방식이죠. 글 쓴이는 이 같은 방법이 실제 queue내의 메모리를 해제함과 동시에 queue를 초기화 할수 있다고 합니다.</p>
<pre><code>#include queue&gt; 헤더파일 필요

1. max-heap 구현 

#include &lt;iostream&gt; 
#include &lt;queue&gt; 
using namespace std; 

int main () 
{ 
    priority_queue&lt;int&gt; q; 
    q.push (8); 
    q.push (1); 
    q.push (6); 
    q.push (2); 

    while (!q.empty ()) { 
        cout &lt;&lt; q.top () &lt;&lt; endl;  // print 8 6 2 1 
        q.pop (); 
    } 
    
    return 0; 
} 
</code></pre>
<h2>3. 정렬</h2>
<p>숫자를 문자열로 변경해서 정렬하는 방식 [참고]</p>
<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;functional&gt;

using namespace std;

long long solution(long long n) {
    long long answer = 0;

    string str = to_string(n);
    sort(str.begin(), str.end(), greater&lt;char&gt;());
    answer = stoll(str);

    return answer;
}
</code></pre>
<p>sort(퀵 정렬), stable_sort(합병 정렬), partial_sort(힙 정렬)</p>
<ul>
<li>평균적인 소요시간이 중요할 때에는 sort를 사용한다.</li>
<li>최악조건에서의 소요시간이 중요하다면 stable_sort나 partial_sort를 사용한다.</li>
<li>국가-지역 필드 혹은 동명이인 필드를 정렬해야 하는 경우, 안정 정렬(stable_sort)을 사용하는 것이 빠르다.</li>
<li>안정 정렬(stable_sort) 은 값이 같다면 원래의 순서를 보장한다.</li>
<li>불안정 정렬(sort, partial_sort) 은 값이 같아도 원래의 순서를 보장하지 않는다.</li>
</ul>
<p>정렬 함수 만들 때 람다 함수(간단한 함수)로 표현해 낼 수 있다.</p>
<pre><code>sort( s.begin(), s.end(), [] (const pair&lt;int, int&gt;&amp; a, const pair&lt;int, int&gt;&amp; b) { 
        if(a.first==b.first) return a.second&lt;b.second; 
        return a.first&gt;b.first;
});
</code></pre>
<h2>4. 알고리즘/수학/순열/조합</h2>
<p>최댓값 최솟값</p>
<pre><code>#include &lt;algorithm&gt;
min(a,b) max(a,b) 
</code></pre>
<p>기초 많이 쓰는 함수</p>
<pre><code>#include &lt;cmath&gt;

ceil(n) -&gt; 올림
floor(n) -&gt; 버림
round(n) -&gt; 반올림
abs(n) -&gt; 절대값
pow(n, p) -&gt; 제곱
sqrt(n) -&gt; 루트
</code></pre>
<p>순열</p>
<ul>
<li>#include algorithm&gt; 다음 아래 함수를 통해서 순열을 구할수가 있다.</li>
</ul>
<p>함수에 벡터의 iterator 혹은 배열의 주소를 넣으면 다음 순열(1-2-3-4의 다음 순열은 1-2-4-3) 혹은 이전 순열(1-2-4-3의 이전 순열은 1-2-3-4)의 결과가 벡터나 배열에 적용된다.</p>
<p>next_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 다음 순열을 구하고 true를 반환한다. 다음 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 작다면) false를 반환.<br>
prev_permutation : 현재 나와 있는 수열에서 인자로 넘어간 범위에 해당하는 이전 순열을 구하고 true를 반환한다. 이전 순열이 없다면(다음에 나온 순열이 순서상 이전 순열보다 크다면) false를 반환.</p>
<pre><code>#include &lt;algorithm&gt;
// 첫번째 인자가 구하고자 하는 순열의 시작, 두번째 인자가 순열의 끝
bool next_permutation (BidirectionalIterator first, BidirectionalIterator last);

// 아래처럼 직접 비교함수를 넣어줘도 됩니다.
bool next_permutation (BidirectionalIterator first, BidirectionalIterator last, Compare comp);
</code></pre>
<p>n개 중에 r개로 순열(순서상관았는)을 만들기</p>
<ul>
<li>순열(next_permutation), 반전(reverse)함수를 이용해서 제작 가능.<br>
반드시 오름차순으로 입력 n개 입력 1234  or 00112 //중복되도 됨<br>
[12]  //순서대로 r만큼 출력<br>
1243 //r이후 요소를 reverse (34-&gt;43) = reverse(begin()+r,end());<br>
1324 //next_permutation()으로 다음 순열 제작, 조건걸어서 false나오면 반복문 빠져나가면 됨</li>
</ul>
<p>이 과정을 반복하면 아래와 같이 조합을 모두 뽑아낼 수 있다.</p>
<p>[13]<br>
1342 1423<br>
[14]<br>
1432 2134<br>
[21]<br>
2143 2314<br>
[23]<br>
...</p>
<p>원리는 r 뒤의 오름차순된 내용을 반전으로 최댓값을 만들어<br>
다음번 순열을 구할 때 출력한 r의 다음번 내용이 나오고<br>
r 뒤는 최솟값이 나오게 하여<br>
이를 반복하면 r부분만 변하는 순열이 되버린다.</p>
<p>[소수찾기 - 응용 예]</p>
<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;unordered_set&gt;
#include &lt;cmath&gt;

using namespace std;

unordered_set&lt;long&gt; num;

void subPermutation(string n, int m) {
    do {
        num.insert(stol(n.substr(0,m)));
        reverse(n.begin()+m,n.end());
    }
    while(next_permutation(n.begin(),n.end()));
}

int solution(string numbers) {
    int answer = 0;
    bool isPrime;

    sort(numbers.begin(),numbers.end());
    
    for(int i=1; i&lt;=numbers.length(); i++)
        subPermutation(numbers, i);
    
    num.erase(0); num.erase(1);
    
    for(auto&amp; x: num) {
        isPrime = true;
        for(int i=2; i&lt;=sqrt(x); i++) 
            if(x%i==0) { isPrime=false; break; }
        if(isPrime) answer++;
    }
    
    return answer;
}
</code></pre>
<p>자리수/ 소수점아래 자리수 맞추기</p>
<pre><code>double num = 987.123456;
cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;
// 출력 결과   987.123 
cout.precision(7);     //가장 왼쪽에 있는 숫자부터 오른쪽으로 7개까지의 숫자를 출력  
cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;
//출력 결과 987.1235
cout &lt;&lt; fixed; //소수점아래 자리수 고정시키겠다는 뜻
cout.precision(2);
cout &lt;&lt; "num = " &lt;&lt; num &lt;&lt; endl;
//출력 결과는 987.12
</code></pre>
<h2>5. 검색/탐색</h2>
<p>찾는 함수 (다양한 자료구조에서 유용 대게 begin(),end() 포인터로 찾고 결과를 내뿜는다.)</p>
<pre><code>find(), find_if(), count(), count_if()
</code></pre>
<p>알고리즘에 있는 distance() 함수와 find_if() 함수 눈여겨보자 &lt;참고&gt;</p>
<pre><code>#include &lt;string&gt;
#include &lt;algorithm&gt;
#include &lt;iostream&gt;

using namespace std;

string solution(vector&lt;string&gt; seoul)
{
    return string("김서방은 ") + to_string(distance(seoul.begin(), find_if(seoul.begin(), seoul.end(), [](string s){ return s == string("Kim"); }))) + string("에 있다");
}
</code></pre>
<p>lower_bound 란?</p>
<ul>
<li>이진탐색(Binary Search)기반의 탐색 방법입니다. (배열 또는 리스트가 정렬 되어있어야 한다.)</li>
<li>lower_bound는 찾으려 하는 key값이 "없으면" key값보다 큰 가장 작은 정수 값을 찾습니다.</li>
<li>같은 원소가 여러개 있어도 상관 없으며, 항상 유일한 해를 구할 수 있습니다.</li>
<li>구간이 [start, end]인 배열이 있을때, 중간위치의 index를 mid 라고 하면,<br>
arr[mid-1] &lt; key 이면서 arr[mid] &gt;= key 인 최소의 m 값을 찾으면 됩니다. (m&gt;=2)</li>
</ul>
<p>반환형이 Iterator 이므로 vector container인 경우에는 iterator에서 v.begin()을 뺀 값으로 몇 번째 인자인지 계산을 하고,<br>
배열인 경우에는 배열의 첫번째 주소를 가리키는 배열의 이름을 빼면 몇 번째 인자인지 알 수 있습니다.</p>
<pre><code>#include&lt;algorithm&gt; //헤더파일

lower_bound(arr, arr+n, key); //이런식으로 사용.
</code></pre>
<p>upper_bound 란?</p>
<ul>
<li>lower_bound와 마찬가지로 이진탐색(Binary Search)기반의 탐색법 입니다.</li>
<li>이진탐색(Binary Search)기반이므로 배열이나 리스트가 오름차순으로 정렬 되어있어야 합니다.</li>
<li>upper_bound는 key값을 초과하는 가장 첫 번째 원소의 위치를 구하는 것 입니다.</li>
<li>같은 원소가 여러개 존재 해도 항상 유일한 해를 구할 수 있습니다.</li>
<li>구간이 [start, end]인 배열이 있을때, 중간위치의 index를 mid 라고 하면,<br>
arr[mid-1] &lt;= key 이면서 arr[mid] &gt; key 인 최소의 m 값을 찾으면 됩니다. (m&gt;=2)</li>
<li>upper_bound에서 기억해야 할 것은 (같은 값이 아닌) key 값을 초과하는 가장 첫번째 원소의 위치 라는 것 입니다.</li>
</ul>
<pre><code>#include&lt;algorithm&gt; //헤더파일
upper_bound(arr, arr + 10, 6) - arr + 1;
</code></pre>
<p>map 사용법 key value</p>
<pre><code>// accessing mapped values
#include &lt;iostream&gt;
#include &lt;map&gt;
#include &lt;string&gt;

int main ()
{
  std::map&lt;char,std::string&gt; mymap;

  mymap['a']="an element";
  mymap['b']="another element";
  mymap['c']=mymap['b'];

  std::cout &lt;&lt; "mymap['a'] is " &lt;&lt; mymap['a'] &lt;&lt; '\n';
  std::cout &lt;&lt; "mymap['b'] is " &lt;&lt; mymap['b'] &lt;&lt; '\n';
  std::cout &lt;&lt; "mymap['c'] is " &lt;&lt; mymap['c'] &lt;&lt; '\n';
  std::cout &lt;&lt; "mymap['d'] is " &lt;&lt; mymap['d'] &lt;&lt; '\n';

  std::cout &lt;&lt; "mymap now contains " &lt;&lt; mymap.size() &lt;&lt; " elements.\n";

  return 0;

#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;map&gt;

using namespace std;

int solution(vector&lt;vector&lt;string&gt;&gt; clothes) {
    int answer = 1;
    int cSize= clothes.size();
    map&lt;string,int&gt; m;
    string key;

    for(int i=0; i&lt;cSize; i++) {
        key = clothes[i][1];
        if(m.find(key)==m.end()) m[key] = 1;
        else m[key]+=1;
    }

    if(m.size()!=1) { for(auto&amp; x: m) answer *= (x.second + 1); answer--; }
    else answer = cSize;

    return answer;
}

</code></pre>
<p>맵은 key중복되면 기존값을 수정함 value(int일때)올리고 싶으면 [ key]++; 방법있음<br>
unordered_map</p>
<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;
#include &lt;unordered_map&gt;

using namespace std;

int solution(vector&lt;vector&lt;string&gt;&gt; clothes) {
    int answer = 1;

    unordered_map &lt;string, int&gt; attributes;
    for(int i = 0; i &lt; clothes.size(); i++)
        attributes[clothes[i][1]]++;
    for(auto it = attributes.begin(); it != attributes.end(); it++)
        answer *= (it-&gt;second+1);
    answer--;

    return answer;
}
</code></pre>
<pre><code>#include &lt;iostream&gt;
#include &lt;sstream&gt;
#include &lt;string&gt;

using namespace std;

int main()
{
    string s("string to split");
    istringstream iss(s);

    do
    {
        string sub;
        iss &gt;&gt; sub;
        cout &lt;&lt; "Substring: " &lt;&lt; sub &lt;&lt; endl;

    } while (iss);

}
</code></pre>
<p>istringstream을 거치면 공백을 delim 으로 하여 string 을 parsing 해준다.<br>
위의 예제를 보면, istr에 저장된 string 을 int 형에도 넣을 수 있는 것을 볼 수 있는데<br>
이것이 바로 istringstream의 강력한 기능이다.</p>
<p>그리고 ostringstream은 위에서 살펴본 istringstream과 반대 기능을 한다고 볼 수도 있다.<br>
주로, 수를 string 으로 바꾸어 줄때 주로 사용하게 된다.<br>
사용은,</p>
<pre><code>string solution(string s) {
    istringstream iss(s);
    vector&lt;string&gt; wList;
    string word;
    
    
    while(iss &gt;&gt; word)
    {
        for(int i=0; i&lt;word.length(); i++)
            i &amp; 1 ? toLowerString(word,i) : toUpperString(word,i);
        wList.push_back(word);
    }
</code></pre>
<pre><code>#include&lt;sstream&gt; // ostringstream 을 사용하기 위하여 필요함.  
#include&lt;iostream&gt;  
#include&lt;string&gt;  
using namespace std;  
  
int main(){  
    ostringstream ostr;  
    int num = 34534;  
    string val;  
    ostr&lt;&lt;num;    //ostr에 num 저장  
    val = ostr.str(); //ostr을 string으로 바꾸어 val에 저장  
      
    return 0;  
}  
</code></pre>
<p>숫자 정규식</p>
<pre><code>bool isNumber(const std::string &amp;token)
{
    return std::regex_match(token, std::regex("(\\+|-)?[0-9]*(\\.?([0-9]+))$"));
}

bool isNumber( std::string token )
{
    using namespace std;
    return std::regex_match( token, std::regex( ( "((\\+|-)?[[:digit:]]+)(\\.(([[:digit:]]+)?))?" ) ) );
}
</code></pre>
<p>vector 에는 기본적으로 iterator, const_iterator (더 가벼운) 이 있다. 이걸 잘 활용하면 iter은 포인터이구 *iter 이런식으로 가리키는 값을 볼 수 있다.</p>
<pre><code>int temp;
    for (vector&lt;int&gt;::const_iterator iter = arr.begin(); iter != arr.end(); ++iter)
    {
        if (arr.empty() || temp != (*iter))
        {
            temp = (*iter);
            answer.push_back(temp);
        }
    }

</code></pre>
<p>isspace(char) 스페이스인지 확인하는 것, string::iterator 활용해서 find_if사용하자.</p>
<pre><code>  #include &lt;iostream&gt;
  #include &lt;iterator&gt;
  #include &lt;string&gt;
  #include &lt;vector&gt;
  #include &lt;algorithm&gt;    //find_if
  #include &lt;cctype&gt;       //isspace

  using namespace std;

  bool notspc(char c) { return !isspace(c); }
  bool spc(char c) { return isspace(c); }

  int main()
  {
      typedef string::iterator iter;

      string str;
      vector&lt;string&gt; vs;

      cout &lt;&lt; "Insert string : ";
      getline(cin,str);

      iter i=str.begin();

      while(i!=str.end())
      {
          i=find_if(i,str.end(),notspc);
          iter j=find_if(i,str.end(),spc);
          if(i!=str.end())
              vs.push_back(string(i,j));
          i=j;
      }

      endl(cout);
      cout &lt;&lt; "The string split by whitespace." &lt;&lt; endl;
      copy(vs.begin(),vs.end(),ostream_iterator&lt;string&gt;(cout,"\n"));

    return EXIT_SUCCESS;
 }
</code></pre>
<p>메트릭스 곱과 메트릭스 선언 이렇게하자</p>
<pre><code>typedef vector&lt;vector&lt;long long&gt;&gt; matrix;

matrix operator* (matrix &amp;a, matrix &amp;b)
{
    int n = a.size();
    matrix c(n, vector&lt;long long&gt;(n));
    for(int i=0; i&lt;n; i++)
        for(int j=0; j&lt;n; j++) {
            for(int k=0; k&lt;n; k++)
                c[i][j] += a[i][k]*b[k][j];
            c[i][j] %= mod;
        }    
    return c;
}
</code></pre>
<p>최댓값</p>
<pre><code>#include &lt;limits&gt;
then use

int imin = std::numeric_limits&lt;int&gt;::min(); // minimum value
int imax = std::numeric_limits&lt;int&gt;::max();
</code></pre>
<p>set 컨테이너는 연관 컨테이너 중 단순한 컨테이너로 key라 불리는 원소(value).의 집합으로 이루어진 컨테이너이다.<br>
모든 연관 컨테이너는 노드 기반 컨테이너이며 균현 이진 트리로 구현되므로 균형 이진 트리의 모든 특징을 갖는다.<br>
#include </p>
<p>map 컨테이너는 연관 컨테이너 중 자주 사용하는 컨테이너로 원소를 key 와 value의 쌍으로 저장한다.<br>
set은 원소로 key 하나만을 저장하지만, map 은 원소로 key와 value의 쌍(pair 객체)를 저장한다.<br>
set처럼 원소의 key는 컨테이너에 중복 저장될 수 없으며 중복 key를 저장해야 한다면 mulitmap을 사용해야 한다.<br>
#include </p>
<pre><code>set&lt;int&gt; s;

    s.insert(40);
    s.insert(30);
    s.insert(50);
    s.insert(80);
    s.insert(10);
    s.insert(90); 
    s.insert(70);

    set&lt;int&gt;::iterator iter;
    for (iter = s.begin(); iter != s.end(); ++iter)
        cout &lt;&lt; *iter &lt;&lt; " ";
    cout &lt;&lt; endl;

    // count는 해당 원소의 개수를 반환한다. set은 중복을 허용하지 않으므로 1 또는 0이다.
    cout &lt;&lt; "원소 50의 개수 : " &lt;&lt; s.count(50) &lt;&lt; endl;
    cout &lt;&lt; "원소 100의 개수 : " &lt;&lt; s.count(100) &lt;&lt; endl;

    // find는 해당 원소를 찾는다. 원소가 없으면 end() 를 반환한다.
    iter = s.find(30);
    if (iter != s.end())
        cout &lt;&lt; *iter &lt;&lt; "가 s에 있다" &lt;&lt; endl;
    else
        cout &lt;&lt; "30이 s에 없다." &lt;&lt; endl;


        // map
	// &lt;string, int&gt; =&gt; &lt;key, value&gt;
	map&lt; string, int &gt; m;


	// insert(key,value)
	m.insert(make_pair("a", 1));
	m.insert(make_pair("b", 2));
	m.insert(make_pair("c", 3));
	m.insert(make_pair("d", 4));
	m.insert(make_pair("e", 5));
	m["f"] = 6; // also possible


	// erase(key)
	m.erase("d");

</code></pre>
<p>먼저, std::tuple&lt;&gt; 안의 &lt;&gt; 안에 필요한 변수 타입들을 작성합니다.<br>
typedef로 해당 타입을 OddOrEven 타입이라고 명명했습니다.<br>
tuple 변수에 값을 넣을 때는 std::make_tuple()을 사용하면 됩니다.<br>
해당하는 위치에 해당하는 값을 넣으면 생성이 됩니다.<br>
tuple 안에 몇 개의 변수가 존재하는지는 std::tuple_size&lt;decltype(myNumber)&gt;::value로 가능합니다.<br>
decltype(myNumber)는 C++11에서 생긴 문법으로 해당 변수의 타입을 유추해줍니다.<br>
간단하게 auto와 비슷한 기능이라고 할 수 있습니다.<br>
값을 가져올 때는 std::get(myNumber)로 가져올 수 있습니다.<br>
인덱스는 0부터 시작해서 해당하는 위치의 값을 가져옵니다.<br>
std::tuple_element를 사용해서 tuple의 특정 위치의 타입을 가져올 수 있습니다</p>
<pre><code>// make tuple variable.
    typedef std::tuple&lt;int, std::string, bool&gt; OddOrEven;
    OddOrEven myNumber = std::make_tuple(10, std::string("Even"), true);
 
    // get tuple size
    std::cout &lt;&lt; "size : " &lt;&lt; std::tuple_size&lt;decltype(myNumber)&gt;::value &lt;&lt; std::endl;
 
    // get each value and get type using std::tuple_element, auto keyword.
    std::tuple_element&lt;0, decltype(myNumber)&gt;::type nNum = std::get&lt;0&gt;(myNumber);
    auto szVal = std::get&lt;1&gt;(myNumber);
    bool bEven = std::get&lt;2&gt;(myNumber);
 
    std::cout &lt;&lt; nNum &lt;&lt; ", " &lt;&lt; szVal &lt;&lt; ", " &lt;&lt; std::boolalpha &lt;&lt; bEven &lt;&lt; std::endl;
</code></pre>
      </td>
    </tr>
  </tbody>
</table>
</task-lists>


    </div>

  </div>
</div>

  </div>
  <div class="timeline-comment-wrapper js-comment-container">
      

<div class="avatar-parent-child timeline-comment-avatar">
    <a class="d-inline-block" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie"><img class="avatar rounded-1" height="44" width="44" alt="@Curookie" src="https://avatars2.githubusercontent.com/u/20276670?s=180&amp;v=4" /></a>

</div>


    
<div class="timeline-comment-group js-minimizable-comment-group js-targetable-comment" id="gistcomment-2697309">
    <div class="minimized-comment d-none ">
      

  

<details class="Details-element details-reset border rounded-1 bg-white"
       data-body-version="6cfcac17040c82f93719ae059d25aea6">
    <summary class="bg-gray border-bottom-0 py-0 px-2">
      <div class="d-flex flex-justify-between flex-items-center">
        <h3 class="timeline-comment-header-text f5 text-gray text-normal text-italic">
              This comment has been minimized.

        </h3>
        <div class="text-gray text-small">
          <a rel="nofollow" class="link-gray" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;minimized comment&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="b3773f3cc96ed032b98ef9a9d523dc9d64b9d9eae0ff19467669c5a6ee188649" href="/login?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">Sign in to view</a>
        </div>
      </div>
    </summary>
</details>


    </div>
  <div class="unminimized-comment comment previewable-edit js-comment js-task-list-container timeline-comment  "
       data-body-version="6cfcac17040c82f93719ae059d25aea6"
       data-unfurl-hide-url="/content_reference_attachments/hide"
       data-unfurl-authenticity-token="SMjpv0+Z9DuBdywR4y3PJxket/WTvGZFphOVc+SmY73AWEoqQKGa7lik6+lzYCwtb3lfbXvhf5NvQz6tYDwBwg==">

    
<div class="timeline-comment-header clearfix">
  <div class="timeline-comment-actions">
    

















<details class="details-overlay details-reset position-relative d-inline-block ">
  <summary class="btn-link timeline-comment-action">
    <svg aria-label="Show options" class="octicon octicon-kebab-horizontal" viewBox="0 0 13 16" version="1.1" width="13" height="16" role="img"><path fill-rule="evenodd" d="M1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM13 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg>
  </summary>
  <details-menu class="dropdown-menu dropdown-menu-sw show-more-popover text-gray-dark anim-scale-in" style="width:185px">
        <clipboard-copy
    class="dropdown-item btn-link"
    for="gistcomment-2697309-permalink"
    role="menuitem"
    
    >
    Copy link
  </clipboard-copy>

        <button
    type="button"
    class="dropdown-item btn-link d-none js-comment-quote-reply"
    role="menuitem">
    Quote reply
  </button>

      
  </details-menu>
</details>

  </div>

    
  <span class="timeline-comment-label text-bold tooltipped tooltipped-multiline tooltipped-s" aria-label="This user is the owner of the gist.">
    Owner
  </span>


  <span
  class="timeline-comment-label tooltipped tooltipped-multiline tooltipped-s"
  aria-label="This user is the author of this gist.">
  Author
</span>



  <h3 class="timeline-comment-header-text f5 text-normal">


    <strong class="css-truncate expandable">
      

  <a class="author text-inherit css-truncate-target" show_full_name="false" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie">Curookie</a>
  

    </strong>

    commented


      <a href="#gistcomment-2697309" id="gistcomment-2697309-permalink" class="timestamp js-timestamp"><relative-time datetime="2018-09-04T16:22:43Z">Sep 4, 2018</relative-time></a>


    <span class="js-comment-edit-history">
        
  <span class="d-inline-block text-gray-light">&#8226;</span>

  <details class="details-overlay details-reset d-inline-block dropdown">
    <summary class="btn-link no-underline text-gray js-notice">
      <div class="position-relative">
        <span>
            edited
        </span>
        <svg height="11" class="octicon octicon-triangle-down v-align-middle" viewBox="0 0 12 16" version="1.1" width="8" aria-hidden="true"><path fill-rule="evenodd" d="M0 5l6 6 6-6H0z"/></svg>
      </div>
    </summary>
    <details-menu class="anim-scale-in dropdown-menu dropdown-menu-se py-0" style="width:352px" src="/_render_node/MDExOkdpc3RDb21tZW50NTQwODMyNGQ4NzZhNTEzODQ1NjRmYWMxZjE4NjkzOGU6MjY5NzMwOQ==/comments/comment_edit_history_log" preload>
      <include-fragment class="octocat-spinner my-3" aria-label="Loading"></include-fragment>
    </details-menu>
  </details>

    </span>
  </h3>
</div>


    <div class="edit-comment-hide">

      
<task-lists disabled sortable>
<table class="d-block">
  <tbody class="d-block">
    <tr class="d-block">
      <td class="d-block comment-body markdown-body  js-comment-body">
          <p>이해 안되는 알고리즘</p>
<pre><code>#include &lt;string&gt;
#include &lt;vector&gt;

using namespace std;

long long solution(int a, int b) {
    long long answer = 0;
    if (a &gt; b) a ^= b ^= a ^= b;
    answer = (long long)b * -~b / 2 - (long long)a * ~-a / 2; // 이부분만 이해안됨 가우스 소거 알고리즘
    return answer;
}
</code></pre>
<ol>
<li>Manacher 알고리즘</li>
<li>Z 알고리즘</li>
<li>3*n 타일링</li>
</ol>
      </td>
    </tr>
  </tbody>
</table>
</task-lists>


    </div>

  </div>
</div>

  </div>
  <div class="timeline-comment-wrapper js-comment-container">
      

<div class="avatar-parent-child timeline-comment-avatar">
    <a class="d-inline-block" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie"><img class="avatar rounded-1" height="44" width="44" alt="@Curookie" src="https://avatars2.githubusercontent.com/u/20276670?s=180&amp;v=4" /></a>

</div>


    
<div class="timeline-comment-group js-minimizable-comment-group js-targetable-comment" id="gistcomment-2722663">
    <div class="minimized-comment d-none ">
      

  

<details class="Details-element details-reset border rounded-1 bg-white"
       data-body-version="39a6d2b9f4321214241dce3022af13ff">
    <summary class="bg-gray border-bottom-0 py-0 px-2">
      <div class="d-flex flex-justify-between flex-items-center">
        <h3 class="timeline-comment-header-text f5 text-gray text-normal text-italic">
              This comment has been minimized.

        </h3>
        <div class="text-gray text-small">
          <a rel="nofollow" class="link-gray" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;minimized comment&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="b3773f3cc96ed032b98ef9a9d523dc9d64b9d9eae0ff19467669c5a6ee188649" href="/login?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">Sign in to view</a>
        </div>
      </div>
    </summary>
</details>


    </div>
  <div class="unminimized-comment comment previewable-edit js-comment js-task-list-container timeline-comment  "
       data-body-version="39a6d2b9f4321214241dce3022af13ff"
       data-unfurl-hide-url="/content_reference_attachments/hide"
       data-unfurl-authenticity-token="Bi1FodwrJR7vZK7YqO2dPuHg6fhxH9t35hZv91KxvbqOveY00xNLyza3aSA4oH40l4cBYJlCwqEvRsQp1ivfxQ==">

    
<div class="timeline-comment-header clearfix">
  <div class="timeline-comment-actions">
    

















<details class="details-overlay details-reset position-relative d-inline-block ">
  <summary class="btn-link timeline-comment-action">
    <svg aria-label="Show options" class="octicon octicon-kebab-horizontal" viewBox="0 0 13 16" version="1.1" width="13" height="16" role="img"><path fill-rule="evenodd" d="M1.5 9a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zm5 0a1.5 1.5 0 1 0 0-3 1.5 1.5 0 0 0 0 3zM13 7.5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0z"/></svg>
  </summary>
  <details-menu class="dropdown-menu dropdown-menu-sw show-more-popover text-gray-dark anim-scale-in" style="width:185px">
        <clipboard-copy
    class="dropdown-item btn-link"
    for="gistcomment-2722663-permalink"
    role="menuitem"
    
    >
    Copy link
  </clipboard-copy>

        <button
    type="button"
    class="dropdown-item btn-link d-none js-comment-quote-reply"
    role="menuitem">
    Quote reply
  </button>

      
  </details-menu>
</details>

  </div>

    
  <span class="timeline-comment-label text-bold tooltipped tooltipped-multiline tooltipped-s" aria-label="This user is the owner of the gist.">
    Owner
  </span>


  <span
  class="timeline-comment-label tooltipped tooltipped-multiline tooltipped-s"
  aria-label="This user is the author of this gist.">
  Author
</span>



  <h3 class="timeline-comment-header-text f5 text-normal">


    <strong class="css-truncate expandable">
      

  <a class="author text-inherit css-truncate-target" show_full_name="false" data-hovercard-type="user" data-hovercard-url="/hovercards?user_id=20276670" data-octo-click="hovercard-link-click" data-octo-dimensions="link_type:self" href="/Curookie">Curookie</a>
  

    </strong>

    commented


      <a href="#gistcomment-2722663" id="gistcomment-2722663-permalink" class="timestamp js-timestamp"><relative-time datetime="2018-10-03T06:43:12Z">Oct 3, 2018</relative-time></a>


    <span class="js-comment-edit-history">
    </span>
  </h3>
</div>


    <div class="edit-comment-hide">

      
<task-lists disabled sortable>
<table class="d-block">
  <tbody class="d-block">
    <tr class="d-block">
      <td class="d-block comment-body markdown-body  js-comment-body">
          <p><a href="https://www.acmicpc.net/board/view/3261" rel="nofollow">https://www.acmicpc.net/board/view/3261</a><br>
문제 푸는순서</p>
      </td>
    </tr>
  </tbody>
</table>
</task-lists>


    </div>

  </div>
</div>

  </div>

<!-- Rendered timeline since 2018-11-06 05:07:28 -->
<div id="partial-timeline-marker"
      class="js-timeline-marker js-updatable-content"
      data-url="/Curookie/5408324d876a51384564fac1f186938e/show_partial?partial=gist%2Ftimeline_marker&amp;since=1541509648"
      data-last-modified="Tue, 06 Nov 2018 13:07:28 GMT"
      >
</div>


        <div class="discussion-timeline-actions">
            
<div class="flash flash-warn mt-3">
    <a rel="nofollow" class="btn btn-primary" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;signed out comment&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;SIGN_UP&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="47d3533e94c344361bd7a2e2318cc1bdd164f84130394dafe6c88107b32a42fb" href="/join?source=comment-gist">Sign up for free</a>
    <strong>to join this conversation on GitHub</strong>.
    Already have an account?
    <a rel="nofollow" data-hydro-click="{&quot;event_type&quot;:&quot;authentication.click&quot;,&quot;payload&quot;:{&quot;location_in_page&quot;:&quot;signed out comment&quot;,&quot;repository_id&quot;:null,&quot;auth_type&quot;:&quot;LOG_IN&quot;,&quot;client_id&quot;:&quot;907455007.1557670219&quot;,&quot;originating_request_id&quot;:&quot;0F62:883A:F5D3D7:166A8B6:5CE940C1&quot;,&quot;originating_url&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;referrer&quot;:&quot;https://gist.github.com/Curookie/5408324d876a51384564fac1f186938e&quot;,&quot;user_id&quot;:null}}" data-hydro-click-hmac="a353785d90e3492138bd9f6d58c07b8a124ce90be563335ac0b0e02854fdd917" href="/login?return_to=https%3A%2F%2Fgist.github.com%2FCurookie%2F5408324d876a51384564fac1f186938e">Sign in to comment</a>
</div>

        </div>
      </div>
    </div>
</div>
  </div>

  <div class="modal-backdrop js-touch-events"></div>
</div><!-- /.container -->

    </main>
  </div>

  </div>

        
<div class="footer container-lg width-full px-3" role="contentinfo">
  <div class="position-relative d-flex flex-justify-between pt-6 pb-2 mt-6 f6 text-gray border-top border-gray-light ">
    <ul class="list-style-none d-flex flex-wrap ">
      <li class="mr-3">&copy; 2019 <span title="0.30898s from unicorn-65bbc9b658-d9nvk">GitHub</span>, Inc.</li>
        <li class="mr-3"><a data-ga-click="Footer, go to terms, text:terms" href="https://github.com/site/terms">Terms</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to privacy, text:privacy" href="https://github.com/site/privacy">Privacy</a></li>
        <li class="mr-3"><a data-ga-click="Footer, go to security, text:security" href="https://github.com/security">Security</a></li>
        <li class="mr-3"><a href="https://githubstatus.com/" data-ga-click="Footer, go to status, text:status">Status</a></li>
        <li><a data-ga-click="Footer, go to help, text:help" href="https://help.github.com">Help</a></li>
    </ul>

    <a aria-label="Homepage" title="GitHub" class="footer-octicon d-none d-lg-block mx-lg-4" href="https://github.com">
      <svg height="24" class="octicon octicon-mark-github" viewBox="0 0 16 16" version="1.1" width="24" aria-hidden="true"><path fill-rule="evenodd" d="M8 0C3.58 0 0 3.58 0 8c0 3.54 2.29 6.53 5.47 7.59.4.07.55-.17.55-.38 0-.19-.01-.82-.01-1.49-2.01.37-2.53-.49-2.69-.94-.09-.23-.48-.94-.82-1.13-.28-.15-.68-.52-.01-.53.63-.01 1.08.58 1.23.82.72 1.21 1.87.87 2.33.66.07-.52.28-.87.51-1.07-1.78-.2-3.64-.89-3.64-3.95 0-.87.31-1.59.82-2.15-.08-.2-.36-1.02.08-2.12 0 0 .67-.21 2.2.82.64-.18 1.32-.27 2-.27.68 0 1.36.09 2 .27 1.53-1.04 2.2-.82 2.2-.82.44 1.1.16 1.92.08 2.12.51.56.82 1.27.82 2.15 0 3.07-1.87 3.75-3.65 3.95.29.25.54.73.54 1.48 0 1.07-.01 1.93-.01 2.2 0 .21.15.46.55.38A8.013 8.013 0 0 0 16 8c0-4.42-3.58-8-8-8z"/></svg>
</a>
   <ul class="list-style-none d-flex flex-wrap ">
        <li class="mr-3"><a data-ga-click="Footer, go to contact, text:contact" href="https://github.com/contact">Contact GitHub</a></li>
        <li class="mr-3"><a href="https://github.com/pricing" data-ga-click="Footer, go to Pricing, text:Pricing">Pricing</a></li>
      <li class="mr-3"><a href="https://developer.github.com" data-ga-click="Footer, go to api, text:api">API</a></li>
      <li class="mr-3"><a href="https://training.github.com" data-ga-click="Footer, go to training, text:training">Training</a></li>
        <li class="mr-3"><a href="https://github.blog" data-ga-click="Footer, go to blog, text:blog">Blog</a></li>
        <li><a data-ga-click="Footer, go to about, text:about" href="https://github.com/about">About</a></li>

    </ul>
  </div>
  <div class="d-flex flex-justify-center pb-6">
    <span class="f6 text-gray-light"></span>
  </div>
</div>



  <div id="ajax-error-message" class="ajax-error-message flash flash-error">
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"/></svg>
    <button type="button" class="flash-close js-ajax-error-dismiss" aria-label="Dismiss error">
      <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
    </button>
    You can’t perform that action at this time.
  </div>


    <script crossorigin="anonymous" integrity="sha512-EPrD+nddbyhpiLL8l3M8VfJpZr4J2EWQLaPXZ+6A3VDJKzS5HeZ3dkMVieHSdvIPHsMbWPyVlY42SWKoS4XTfA==" type="application/javascript" src="https://github.githubassets.com/assets/compat-bootstrap-831f12d4.js"></script>
    
    
    
    
      <script crossorigin="anonymous" async="async" integrity="sha512-/zaU5EX23qYyS7f5IkyjhLBmAFSnzWW4/Ja1QMp+4wUS7I3IuPP2ErTc6XnL6ASykz4qlE+2PjBDVOH52rYf9Q==" type="application/javascript" src="https://github.githubassets.com/assets/gist-bootstrap-f994b955.js"></script>

    
  <div class="js-stale-session-flash stale-session-flash flash flash-warn flash-banner" hidden
    >
    <svg class="octicon octicon-alert" viewBox="0 0 16 16" version="1.1" width="16" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"/></svg>
    <span class="signed-in-tab-flash">You signed in with another tab or window. <a href="">Reload</a> to refresh your session.</span>
    <span class="signed-out-tab-flash">You signed out in another tab or window. <a href="">Reload</a> to refresh your session.</span>
  </div>
  <template id="site-details-dialog">
  <details class="details-reset details-overlay details-overlay-dark lh-default text-gray-dark hx_rsm" open>
    <summary role="button" aria-label="Close dialog"></summary>
    <details-dialog class="Box Box--overlay d-flex flex-column anim-fade-in fast hx_rsm-dialog hx_rsm-modal">
      <button class="Box-btn-octicon m-0 btn-octicon position-absolute right-0 top-0" type="button" aria-label="Close dialog" data-close-dialog>
        <svg class="octicon octicon-x" viewBox="0 0 12 16" version="1.1" width="12" height="16" aria-hidden="true"><path fill-rule="evenodd" d="M7.48 8l3.75 3.75-1.48 1.48L6 9.48l-3.75 3.75-1.48-1.48L4.52 8 .77 4.25l1.48-1.48L6 6.52l3.75-3.75 1.48 1.48L7.48 8z"/></svg>
      </button>
      <div class="octocat-spinner my-6 js-details-dialog-spinner"></div>
    </details-dialog>
  </details>
</template>

  <div class="Popover js-hovercard-content position-absolute" style="display: none; outline: none;" tabindex="0">
  <div class="Popover-message Popover-message--bottom-left Popover-message--large Box box-shadow-large" style="width:360px;">
  </div>
</div>

  <div aria-live="polite" class="js-global-screen-reader-notice sr-only"></div>

  </body>
</html>

